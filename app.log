2025-07-31 17:06:49,538 - __main__ - INFO - Gemini API configured with model: gemini-1.5-flash
2025-07-31 17:06:49,539 - embeddings - INFO - Embedding manager initialized successfully
2025-07-31 17:06:49,539 - __main__ - INFO - GraphRAG embedding manager initialized
2025-07-31 17:06:51,617 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-07-31 17:06:51,617 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-07-31 17:06:51,685 - embeddings - INFO - Semantic vector index created
2025-07-31 17:06:51,762 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-07-31 17:06:51,766 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-07-31 17:06:51,767 - __main__ - INFO - Neo4j available: True
2025-07-31 17:06:51,767 - __main__ - INFO - Gemini API available: True
2025-07-31 17:06:51,767 - __main__ - INFO - Gemini model: gemini-1.5-flash
2025-07-31 17:06:51,806 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-07-31 17:06:51,807 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-31 17:06:53,305 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:06:53] "GET / HTTP/1.1" 200 -
2025-07-31 17:06:53,375 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:06:53,413 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:06:53,415 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:06:53] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:06:53,608 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:06:53] "GET /api/history HTTP/1.1" 200 -
2025-07-31 17:06:53,638 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:06:53,671 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:06:53,672 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:06:53] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:06:55,789 - __main__ - INFO - Received question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-07-31 17:06:55,790 - __main__ - INFO - Generating Cypher for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-07-31 17:06:55,793 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:06:55,814 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:06:55,814 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-07-31 17:06:55,819 - graphrag_pipeline - INFO - Extracted entities: ['Node']
2025-07-31 17:06:56,566 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:06:56,853 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: title)} {position: line: 3, column: 51, offset: 77} for query: "\n            MATCH (start)\n            WHERE start.name IN ['Node'] OR start.title IN ['Node']\n            CALL apoc.path.subgraphAll(start, {\n                maxLevel: 2,\n                relationshipFilter: null,\n                labelFilter: null\n            })\n            YIELD nodes, relationships\n            RETURN {\n                central_nodes: [n IN nodes WHERE n.name IN ['Node'] OR n.title IN ['Node']],\n                related_nodes: [n IN nodes WHERE NOT (n.name IN ['Node'] OR n.title IN ['Node'])],\n                relationships: relationships,\n                paths: [p IN relationships | {\n                    type: type(p),\n                    properties: properties(p)\n                }]\n            } AS context\n            "
2025-07-31 17:06:56,856 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: title)} {position: line: 11, column: 74, offset: 396} for query: "\n            MATCH (start)\n            WHERE start.name IN ['Node'] OR start.title IN ['Node']\n            CALL apoc.path.subgraphAll(start, {\n                maxLevel: 2,\n                relationshipFilter: null,\n                labelFilter: null\n            })\n            YIELD nodes, relationships\n            RETURN {\n                central_nodes: [n IN nodes WHERE n.name IN ['Node'] OR n.title IN ['Node']],\n                related_nodes: [n IN nodes WHERE NOT (n.name IN ['Node'] OR n.title IN ['Node'])],\n                relationships: relationships,\n                paths: [p IN relationships | {\n                    type: type(p),\n                    properties: properties(p)\n                }]\n            } AS context\n            "
2025-07-31 17:06:56,858 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: title)} {position: line: 12, column: 79, offset: 494} for query: "\n            MATCH (start)\n            WHERE start.name IN ['Node'] OR start.title IN ['Node']\n            CALL apoc.path.subgraphAll(start, {\n                maxLevel: 2,\n                relationshipFilter: null,\n                labelFilter: null\n            })\n            YIELD nodes, relationships\n            RETURN {\n                central_nodes: [n IN nodes WHERE n.name IN ['Node'] OR n.title IN ['Node']],\n                related_nodes: [n IN nodes WHERE NOT (n.name IN ['Node'] OR n.title IN ['Node'])],\n                relationships: relationships,\n                paths: [p IN relationships | {\n                    type: type(p),\n                    properties: properties(p)\n                }]\n            } AS context\n            "
2025-07-31 17:06:56,878 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:06:56,879 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:06:58,262 - __main__ - INFO - Gemini API call successful
2025-07-31 17:06:58,277 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH ()-[r]->() RETURN DISTINCT type(r)
2025-07-31 17:06:58,278 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN DISTINCT type(r)
2025-07-31 17:06:58,347 - __main__ - INFO - Query results: 2 rows
2025-07-31 17:06:58,348 - __main__ - INFO - Generating answer for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-07-31 17:07:03,382 - __main__ - INFO - Gemini API call successful
2025-07-31 17:07:03,395 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:07:03,405 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:07:03] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:07:15,791 - __main__ - INFO - Received question: bana t√ºm markalarƒ± listele
2025-07-31 17:07:15,791 - __main__ - INFO - Generating Cypher for question: bana t√ºm markalarƒ± listele
2025-07-31 17:07:15,795 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:07:15,820 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:07:15,820 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: bana t√ºm markalarƒ± listele
2025-07-31 17:07:15,822 - graphrag_pipeline - INFO - Extracted entities: []
2025-07-31 17:07:16,184 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:07:16,203 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:07:16,204 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:07:17,206 - __main__ - INFO - Gemini API call successful
2025-07-31 17:07:17,224 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (b:Brand) RETURN b
2025-07-31 17:07:17,225 - __main__ - INFO - Generated Cypher: MATCH (b:Brand) RETURN b
2025-07-31 17:07:17,232 - __main__ - INFO - Query results: 14 rows
2025-07-31 17:07:17,232 - __main__ - INFO - Generating answer for question: bana t√ºm markalarƒ± listele
2025-07-31 17:07:21,536 - __main__ - INFO - Gemini API call successful
2025-07-31 17:07:21,551 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:07:21,559 - __main__ - ERROR - Error in api_ask: Object of type Node is not JSON serializable
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat\app.py", line 878, in api_ask
    return jsonify({
        "answer": answer,
    ...<2 lines>...
        "description": json_data.get("description", "")
    })
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\__init__.py", line 170, in jsonify
    return current_app.json.response(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\provider.py", line 215, in response
    f"{self.dumps(obj, **dump_args)}\n", mimetype=self.mimetype
       ~~~~~~~~~~^^^^^^^^^^^^^^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\provider.py", line 180, in dumps
    return json.dumps(obj, **kwargs)
           ~~~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\json\__init__.py", line 238, in dumps
    **kw).encode(obj)
          ~~~~~~^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\json\encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\json\encoder.py", line 261, in iterencode
    return _iterencode(o, 0)
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\provider.py", line 120, in _default
    raise TypeError(f"Object of type {type(o).__name__} is not JSON serializable")
TypeError: Object of type Node is not JSON serializable
2025-07-31 17:07:21,595 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:07:21] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-07-31 17:07:23,370 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:07:23,385 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:07:23,386 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:07:23] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:07:32,358 - __main__ - INFO - Received question: t√ºm markalarƒ± getir.
2025-07-31 17:07:32,359 - __main__ - INFO - Generating Cypher for question: t√ºm markalarƒ± getir.
2025-07-31 17:07:32,362 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:07:32,385 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:07:32,386 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: t√ºm markalarƒ± getir.
2025-07-31 17:07:32,392 - graphrag_pipeline - INFO - Extracted entities: []
2025-07-31 17:07:32,763 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:07:32,782 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:07:32,782 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:07:33,822 - __main__ - INFO - Gemini API call successful
2025-07-31 17:07:33,843 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (b:Brand) RETURN b
2025-07-31 17:07:33,843 - __main__ - INFO - Generated Cypher: MATCH (b:Brand) RETURN b
2025-07-31 17:07:33,849 - __main__ - INFO - Query results: 14 rows
2025-07-31 17:07:33,849 - __main__ - INFO - Generating answer for question: t√ºm markalarƒ± getir.
2025-07-31 17:07:42,905 - __main__ - INFO - Gemini API call successful
2025-07-31 17:07:42,924 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:07:42,930 - __main__ - ERROR - Error in api_ask: Object of type Node is not JSON serializable
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat\app.py", line 878, in api_ask
    return jsonify({
        "answer": answer,
    ...<2 lines>...
        "description": json_data.get("description", "")
    })
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\__init__.py", line 170, in jsonify
    return current_app.json.response(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\provider.py", line 215, in response
    f"{self.dumps(obj, **dump_args)}\n", mimetype=self.mimetype
       ~~~~~~~~~~^^^^^^^^^^^^^^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\provider.py", line 180, in dumps
    return json.dumps(obj, **kwargs)
           ~~~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\json\__init__.py", line 238, in dumps
    **kw).encode(obj)
          ~~~~~~^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\json\encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\json\encoder.py", line 261, in iterencode
    return _iterencode(o, 0)
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\provider.py", line 120, in _default
    raise TypeError(f"Object of type {type(o).__name__} is not JSON serializable")
TypeError: Object of type Node is not JSON serializable
2025-07-31 17:07:42,941 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:07:42] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-07-31 17:07:53,472 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:07:53,489 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:07:53,489 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:07:53] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:08:23,468 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:08:23,482 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:08:23,482 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:08:23] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:08:53,474 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:08:53,489 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:08:53,490 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:08:53] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:09:23,462 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:09:23,478 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:09:23,478 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:09:23] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:10:10,898 - __main__ - INFO - Gemini API configured with model: gemini-1.5-flash
2025-07-31 17:10:10,899 - embeddings - INFO - Embedding manager initialized successfully
2025-07-31 17:10:10,899 - __main__ - INFO - GraphRAG embedding manager initialized
2025-07-31 17:10:12,999 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-07-31 17:10:13,000 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-07-31 17:10:13,008 - embeddings - INFO - Semantic vector index created
2025-07-31 17:10:13,011 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-07-31 17:10:13,016 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-07-31 17:10:13,017 - __main__ - INFO - Neo4j available: True
2025-07-31 17:10:13,017 - __main__ - INFO - Gemini API available: True
2025-07-31 17:10:13,017 - __main__ - INFO - Gemini model: gemini-1.5-flash
2025-07-31 17:10:13,068 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-07-31 17:10:13,069 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-31 17:10:23,464 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:10:23,481 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:10:23,482 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:10:23] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:11:25,906 - __main__ - INFO - Gemini API configured with model: gemini-1.5-flash
2025-07-31 17:11:25,907 - embeddings - INFO - Embedding manager initialized successfully
2025-07-31 17:11:25,907 - __main__ - INFO - GraphRAG embedding manager initialized
2025-07-31 17:11:28,013 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-07-31 17:11:28,013 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-07-31 17:11:28,018 - embeddings - INFO - Semantic vector index created
2025-07-31 17:11:28,019 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-07-31 17:11:28,025 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-07-31 17:11:28,025 - __main__ - INFO - Neo4j available: True
2025-07-31 17:11:28,025 - __main__ - INFO - Gemini API available: True
2025-07-31 17:11:28,026 - __main__ - INFO - Gemini model: gemini-1.5-flash
2025-07-31 17:11:28,080 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-07-31 17:11:28,081 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-31 17:11:38,397 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:11:38] "GET / HTTP/1.1" 200 -
2025-07-31 17:11:38,446 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:11:38,480 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:11:38,481 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:11:38] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:11:38,597 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:11:38] "GET /api/history HTTP/1.1" 200 -
2025-07-31 17:11:38,620 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:11:38,666 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:11:38,670 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:11:38] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:11:41,680 - __main__ - INFO - Received question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:11:41,680 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:11:41,683 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:11:41,708 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:11:41,709 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:11:41,712 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±ndaki']
2025-07-31 17:11:42,404 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:11:42,452 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: title)} {position: line: 3, column: 51, offset: 77} for query: "\n            MATCH (start)\n            WHERE start.name IN ['Veritabanƒ±ndaki'] OR start.title IN ['Veritabanƒ±ndaki']\n            CALL apoc.path.subgraphAll(start, {\n                maxLevel: 2,\n                relationshipFilter: null,\n                labelFilter: null\n            })\n            YIELD nodes, relationships\n            RETURN {\n                central_nodes: [n IN nodes WHERE n.name IN ['Veritabanƒ±ndaki'] OR n.title IN ['Veritabanƒ±ndaki']],\n                related_nodes: [n IN nodes WHERE NOT (n.name IN ['Veritabanƒ±ndaki'] OR n.title IN ['Veritabanƒ±ndaki'])],\n                relationships: relationships,\n                paths: [p IN relationships | {\n                    type: type(p),\n                    properties: properties(p)\n                }]\n            } AS context\n            "
2025-07-31 17:11:42,454 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: title)} {position: line: 11, column: 74, offset: 396} for query: "\n            MATCH (start)\n            WHERE start.name IN ['Veritabanƒ±ndaki'] OR start.title IN ['Veritabanƒ±ndaki']\n            CALL apoc.path.subgraphAll(start, {\n                maxLevel: 2,\n                relationshipFilter: null,\n                labelFilter: null\n            })\n            YIELD nodes, relationships\n            RETURN {\n                central_nodes: [n IN nodes WHERE n.name IN ['Veritabanƒ±ndaki'] OR n.title IN ['Veritabanƒ±ndaki']],\n                related_nodes: [n IN nodes WHERE NOT (n.name IN ['Veritabanƒ±ndaki'] OR n.title IN ['Veritabanƒ±ndaki'])],\n                relationships: relationships,\n                paths: [p IN relationships | {\n                    type: type(p),\n                    properties: properties(p)\n                }]\n            } AS context\n            "
2025-07-31 17:11:42,456 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: title)} {position: line: 12, column: 79, offset: 494} for query: "\n            MATCH (start)\n            WHERE start.name IN ['Veritabanƒ±ndaki'] OR start.title IN ['Veritabanƒ±ndaki']\n            CALL apoc.path.subgraphAll(start, {\n                maxLevel: 2,\n                relationshipFilter: null,\n                labelFilter: null\n            })\n            YIELD nodes, relationships\n            RETURN {\n                central_nodes: [n IN nodes WHERE n.name IN ['Veritabanƒ±ndaki'] OR n.title IN ['Veritabanƒ±ndaki']],\n                related_nodes: [n IN nodes WHERE NOT (n.name IN ['Veritabanƒ±ndaki'] OR n.title IN ['Veritabanƒ±ndaki'])],\n                relationships: relationships,\n                paths: [p IN relationships | {\n                    type: type(p),\n                    properties: properties(p)\n                }]\n            } AS context\n            "
2025-07-31 17:11:42,473 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:11:42,474 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:11:44,552 - __main__ - INFO - Gemini API call successful
2025-07-31 17:11:44,563 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) RETURN DISTINCT labels(n)
2025-07-31 17:11:44,563 - __main__ - INFO - Generated Cypher: MATCH (n) RETURN DISTINCT labels(n)
2025-07-31 17:11:44,607 - __main__ - INFO - Query results: 3 rows
2025-07-31 17:11:44,607 - __main__ - INFO - Generating answer for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:11:51,633 - __main__ - INFO - Gemini API call successful
2025-07-31 17:11:51,657 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:11:51,670 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:11:51] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:11:57,807 - __main__ - INFO - Received question: t√ºm markalarƒ± listele
2025-07-31 17:11:57,807 - __main__ - INFO - Generating Cypher for question: t√ºm markalarƒ± listele
2025-07-31 17:11:57,810 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:11:57,834 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:11:57,835 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: t√ºm markalarƒ± listele
2025-07-31 17:11:57,839 - graphrag_pipeline - INFO - Extracted entities: []
2025-07-31 17:11:58,188 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:11:58,206 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:11:58,206 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:11:59,155 - __main__ - INFO - Gemini API call successful
2025-07-31 17:11:59,169 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (b:Brand) RETURN b
2025-07-31 17:11:59,169 - __main__ - INFO - Generated Cypher: MATCH (b:Brand) RETURN b
2025-07-31 17:11:59,175 - __main__ - INFO - Query results: 14 rows
2025-07-31 17:11:59,175 - __main__ - INFO - Generating answer for question: t√ºm markalarƒ± listele
2025-07-31 17:12:08,445 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:12:08,456 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:12:08,457 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:12:08] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:12:10,771 - __main__ - INFO - Gemini API call successful
2025-07-31 17:12:10,785 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:12:10,794 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:12:10] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:12:38,460 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:12:38,474 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:12:38,475 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:12:38] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:13:08,459 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:13:08,475 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:13:08,476 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:13:08] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:13:17,898 - __main__ - INFO - Received question: Obsidian Elite √ºr√ºn√ºne yapƒ±lan yorumu getir
2025-07-31 17:13:17,899 - __main__ - INFO - Generating Cypher for question: Obsidian Elite √ºr√ºn√ºne yapƒ±lan yorumu getir
2025-07-31 17:13:17,903 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:13:17,927 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:13:17,928 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Obsidian Elite √ºr√ºn√ºne yapƒ±lan yorumu getir
2025-07-31 17:13:17,931 - graphrag_pipeline - INFO - Extracted entities: ['Elite', 'Obsidian']
2025-07-31 17:13:18,297 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:13:18,414 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: title)} {position: line: 3, column: 64, offset: 90} for query: "\n            MATCH (start)\n            WHERE start.name IN ['Elite', 'Obsidian'] OR start.title IN ['Elite', 'Obsidian']\n            CALL apoc.path.subgraphAll(start, {\n                maxLevel: 2,\n                relationshipFilter: null,\n                labelFilter: null\n            })\n            YIELD nodes, relationships\n            RETURN {\n                central_nodes: [n IN nodes WHERE n.name IN ['Elite', 'Obsidian'] OR n.title IN ['Elite', 'Obsidian']],\n                related_nodes: [n IN nodes WHERE NOT (n.name IN ['Elite', 'Obsidian'] OR n.title IN ['Elite', 'Obsidian'])],\n                relationships: relationships,\n                paths: [p IN relationships | {\n                    type: type(p),\n                    properties: properties(p)\n                }]\n            } AS context\n            "
2025-07-31 17:13:18,415 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: title)} {position: line: 11, column: 87, offset: 435} for query: "\n            MATCH (start)\n            WHERE start.name IN ['Elite', 'Obsidian'] OR start.title IN ['Elite', 'Obsidian']\n            CALL apoc.path.subgraphAll(start, {\n                maxLevel: 2,\n                relationshipFilter: null,\n                labelFilter: null\n            })\n            YIELD nodes, relationships\n            RETURN {\n                central_nodes: [n IN nodes WHERE n.name IN ['Elite', 'Obsidian'] OR n.title IN ['Elite', 'Obsidian']],\n                related_nodes: [n IN nodes WHERE NOT (n.name IN ['Elite', 'Obsidian'] OR n.title IN ['Elite', 'Obsidian'])],\n                relationships: relationships,\n                paths: [p IN relationships | {\n                    type: type(p),\n                    properties: properties(p)\n                }]\n            } AS context\n            "
2025-07-31 17:13:18,417 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: title)} {position: line: 12, column: 92, offset: 559} for query: "\n            MATCH (start)\n            WHERE start.name IN ['Elite', 'Obsidian'] OR start.title IN ['Elite', 'Obsidian']\n            CALL apoc.path.subgraphAll(start, {\n                maxLevel: 2,\n                relationshipFilter: null,\n                labelFilter: null\n            })\n            YIELD nodes, relationships\n            RETURN {\n                central_nodes: [n IN nodes WHERE n.name IN ['Elite', 'Obsidian'] OR n.title IN ['Elite', 'Obsidian']],\n                related_nodes: [n IN nodes WHERE NOT (n.name IN ['Elite', 'Obsidian'] OR n.title IN ['Elite', 'Obsidian'])],\n                relationships: relationships,\n                paths: [p IN relationships | {\n                    type: type(p),\n                    properties: properties(p)\n                }]\n            } AS context\n            "
2025-07-31 17:13:18,443 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:13:18,444 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:13:19,586 - __main__ - INFO - Gemini API call successful
2025-07-31 17:13:19,607 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product {name: 'Obsidian Elite'})<-[:BRAND]-(b:Brand)<-[:TYPE]-(c:Category) RETURN p, b, c
2025-07-31 17:13:19,607 - __main__ - INFO - Generated Cypher: MATCH (p:Product {name: 'Obsidian Elite'})<-[:BRAND]-(b:Brand)<-[:TYPE]-(c:Category) RETURN p, b, c
2025-07-31 17:13:19,723 - __main__ - INFO - Query results: 0 rows
2025-07-31 17:13:19,724 - __main__ - INFO - Generating answer for question: Obsidian Elite √ºr√ºn√ºne yapƒ±lan yorumu getir
2025-07-31 17:13:25,505 - __main__ - INFO - Gemini API call successful
2025-07-31 17:13:25,530 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:13:25,544 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:13:25] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:13:38,464 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:13:38,479 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:13:38,480 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:13:38] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:14:08,480 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:14:08,495 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:14:08,496 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:14:08] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:14:38,482 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:14:38,496 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:14:38,497 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:14:38] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:15:08,486 - __main__ - INFO - Detecting live schema from Neo4j...
2025-07-31 17:15:08,502 - __main__ - INFO - Schema detection completed: 3 node types, 2 relationship types
2025-07-31 17:15:08,503 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:15:08] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:21:50,570 - __main__ - INFO - Gemini API configured with model: gemini-1.5-flash
2025-07-31 17:21:50,570 - embeddings - INFO - Embedding manager initialized successfully
2025-07-31 17:21:50,571 - __main__ - INFO - GraphRAG embedding manager initialized
2025-07-31 17:21:52,624 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-07-31 17:21:52,624 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-07-31 17:21:52,628 - embeddings - INFO - Semantic vector index created
2025-07-31 17:21:52,629 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-07-31 17:21:52,633 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-07-31 17:21:52,633 - __main__ - INFO - Neo4j available: True
2025-07-31 17:21:52,633 - __main__ - INFO - Gemini API available: True
2025-07-31 17:21:52,633 - __main__ - INFO - Gemini model: gemini-1.5-flash
2025-07-31 17:21:52,724 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-07-31 17:21:52,724 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-31 17:21:54,975 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:21:54] "GET / HTTP/1.1" 200 -
2025-07-31 17:21:55,025 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:21:55,441 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:21:55] "GET /api/history HTTP/1.1" 200 -
2025-07-31 17:21:55,976 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:21:55,976 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:21:55,978 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:21:55,978 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:21:55,979 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:21:55] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:21:55,995 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:21:56,053 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:21:56,055 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:21:56,058 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:21:56,060 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:21:56,063 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:21:56] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:21:58,428 - __main__ - INFO - Received question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-07-31 17:21:58,429 - __main__ - INFO - Generating Cypher for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-07-31 17:21:58,434 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:21:58,466 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:21:58,466 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:21:58,468 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:21:58,468 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:21:58,469 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-07-31 17:21:58,478 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±']
2025-07-31 17:21:59,178 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:21:59,318 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-07-31 17:21:59,342 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:21:59,343 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:22:00,675 - __main__ - INFO - Gemini API call successful
2025-07-31 17:22:00,700 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count
2025-07-31 17:22:00,700 - __main__ - INFO - Generated Cypher: MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count
2025-07-31 17:22:00,716 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.SyntaxError} {message: All sub queries in an UNION must have the same return column names (line 1, column 66 (offset: 65))
"MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count"
                                                                  ^}
2025-07-31 17:22:00,717 - __main__ - ERROR - Failed to execute query: MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count
2025-07-31 17:22:00,717 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.SyntaxError} {message: All sub queries in an UNION must have the same return column names (line 1, column 66 (offset: 65))
"MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count"
                                                                  ^}
2025-07-31 17:22:00,718 - __main__ - INFO - Query results: 0 rows
2025-07-31 17:22:00,718 - __main__ - INFO - Generating answer for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-07-31 17:22:07,754 - __main__ - INFO - Gemini API call successful
2025-07-31 17:22:07,776 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:22:07,786 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:22:07] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:22:11,541 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:22:11,563 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:22:11,564 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:22:11,565 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:22:11,566 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:22:11,567 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:22:11] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:22:25,041 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:22:25,063 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:22:25,064 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:22:25,065 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:22:25,066 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:22:25,068 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:22:25] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:22:54,637 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:22:54] "GET / HTTP/1.1" 200 -
2025-07-31 17:22:54,665 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:22:54,670 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:22:54] "GET /api/history HTTP/1.1" 200 -
2025-07-31 17:22:54,716 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:22:54,717 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:22:54,719 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:22:54,720 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:22:54,722 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:22:54] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:22:54,737 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:22:54,769 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:22:54,770 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:22:54,771 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:22:54,771 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:22:54,772 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:22:54] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:22:57,572 - __main__ - INFO - Received question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:22:57,572 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:22:57,577 - __main__ - INFO - Using cached Cypher query
2025-07-31 17:22:57,577 - __main__ - INFO - Generated Cypher: MATCH (n) RETURN DISTINCT labels(n)
2025-07-31 17:22:57,583 - __main__ - INFO - Query results: 3 rows
2025-07-31 17:22:57,583 - __main__ - INFO - Generating answer for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:22:57,590 - __main__ - INFO - Using cached answer
2025-07-31 17:22:57,604 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:22:57] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:23:06,902 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:23:06] "GET / HTTP/1.1" 200 -
2025-07-31 17:23:06,930 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:23:06,934 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:23:06] "GET /api/history HTTP/1.1" 200 -
2025-07-31 17:23:06,967 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:23:06,968 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:23:06,969 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:23:06,970 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:23:06,971 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:23:06] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:23:06,990 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:23:07,020 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:23:07,020 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:23:07,022 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:23:07,022 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:23:07,023 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:23:07] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:23:07,696 - __main__ - INFO - Received question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:23:07,697 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:23:07,699 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:23:07,723 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:23:07,724 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:23:07,725 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:23:07,725 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:23:07,726 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:23:07,731 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±ndaki']
2025-07-31 17:23:08,085 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:23:08,097 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-07-31 17:23:08,114 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:23:08,115 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:23:09,362 - __main__ - INFO - Gemini API call successful
2025-07-31 17:23:09,375 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) RETURN DISTINCT labels(n)
2025-07-31 17:23:09,375 - __main__ - INFO - Generated Cypher: MATCH (n) RETURN DISTINCT labels(n)
2025-07-31 17:23:09,379 - __main__ - INFO - Query results: 3 rows
2025-07-31 17:23:09,380 - __main__ - INFO - Generating answer for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:23:14,743 - __main__ - INFO - Gemini API call successful
2025-07-31 17:23:14,756 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:23:14,766 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:23:14] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:23:37,542 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:23:37,675 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:23:37,675 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:23:37,676 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:23:37,677 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:23:37,677 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:23:37] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:24:03,392 - __main__ - INFO - Received question: MSI PRO B650M-B DDR5 AMD B650 AM5 Soket DDR5 6800+(OC)MHz mATX Anakart bu √ºr√ºne yapƒ±lan yorumu getir.
2025-07-31 17:24:03,393 - __main__ - INFO - Generating Cypher for question: MSI PRO B650M-B DDR5 AMD B650 AM5 Soket DDR5 6800+(OC)MHz mATX Anakart bu √ºr√ºne yapƒ±lan yorumu getir.
2025-07-31 17:24:03,396 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:24:03,425 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:24:03,425 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:24:03,426 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:24:03,427 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:24:03,428 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: MSI PRO B650M-B DDR5 AMD B650 AM5 Soket DDR5 6800+(OC)MHz mATX Anakart bu √ºr√ºne yapƒ±lan yorumu getir.
2025-07-31 17:24:03,431 - graphrag_pipeline - INFO - Extracted entities: ['MHz', 'MSI', 'Soket', 'PRO', 'AMD', 'Anakart']
2025-07-31 17:24:03,784 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:24:03,880 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-07-31 17:24:03,908 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:24:03,909 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:24:05,553 - __main__ - INFO - Gemini API call successful
2025-07-31 17:24:05,571 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) WHERE p.name CONTAINS 'MSI PRO B650M-B DDR5' MATCH (p)<-[:REVIEWED_BY]-(r:Review) RETURN p, r
2025-07-31 17:24:05,572 - __main__ - INFO - Generated Cypher: MATCH (p:Product) WHERE p.name CONTAINS 'MSI PRO B650M-B DDR5' MATCH (p)<-[:REVIEWED_BY]-(r:Review) RETURN p, r
2025-07-31 17:24:05,707 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownRelationshipTypeWarning} {category: UNRECOGNIZED} {title: The provided relationship type is not in the database.} {description: One of the relationship types in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing relationship type is: REVIEWED_BY)} {position: line: 1, column: 77, offset: 76} for query: "MATCH (p:Product) WHERE p.name CONTAINS 'MSI PRO B650M-B DDR5' MATCH (p)<-[:REVIEWED_BY]-(r:Review) RETURN p, r"
2025-07-31 17:24:05,709 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownLabelWarning} {category: UNRECOGNIZED} {title: The provided label is not in the database.} {description: One of the labels in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing label name is: Review)} {position: line: 1, column: 93, offset: 92} for query: "MATCH (p:Product) WHERE p.name CONTAINS 'MSI PRO B650M-B DDR5' MATCH (p)<-[:REVIEWED_BY]-(r:Review) RETURN p, r"
2025-07-31 17:24:05,711 - __main__ - INFO - Query results: 0 rows
2025-07-31 17:24:05,711 - __main__ - INFO - Generating answer for question: MSI PRO B650M-B DDR5 AMD B650 AM5 Soket DDR5 6800+(OC)MHz mATX Anakart bu √ºr√ºne yapƒ±lan yorumu getir.
2025-07-31 17:24:06,932 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:24:06,949 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:24:06,950 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:24:06,951 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:24:06,951 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:24:06,952 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:24:06] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:24:11,543 - __main__ - INFO - Gemini API call successful
2025-07-31 17:24:11,565 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:24:11,574 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:24:11] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:24:36,950 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:24:36,971 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:24:36,972 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:24:36,972 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:24:36,973 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:24:36,974 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:24:36] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:24:53,709 - __main__ - INFO - Received question: √ºr√ºnlerin i√ßindeki yorum √∂zelliƒüini g√∂r√ºyor musun?
2025-07-31 17:24:53,710 - __main__ - INFO - Generating Cypher for question: √ºr√ºnlerin i√ßindeki yorum √∂zelliƒüini g√∂r√ºyor musun?
2025-07-31 17:24:53,715 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:24:53,746 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:24:53,747 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:24:53,749 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:24:53,750 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:24:53,751 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: √ºr√ºnlerin i√ßindeki yorum √∂zelliƒüini g√∂r√ºyor musun?
2025-07-31 17:24:53,755 - graphrag_pipeline - INFO - Extracted entities: []
2025-07-31 17:24:54,126 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:24:54,151 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:24:54,151 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:24:55,104 - __main__ - INFO - Gemini API call successful
2025-07-31 17:24:55,125 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) WHERE p.comment IS NOT NULL RETURN p
2025-07-31 17:24:55,126 - __main__ - INFO - Generated Cypher: MATCH (p:Product) WHERE p.comment IS NOT NULL RETURN p
2025-07-31 17:24:55,181 - __main__ - INFO - Query results: 5 rows
2025-07-31 17:24:55,182 - __main__ - INFO - Generating answer for question: √ºr√ºnlerin i√ßindeki yorum √∂zelliƒüini g√∂r√ºyor musun?
2025-07-31 17:25:06,952 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:25:06,976 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:25:06,977 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:25:06,978 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:25:06,979 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:25:06,980 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:25:06] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:25:14,402 - __main__ - INFO - Gemini API call successful
2025-07-31 17:25:14,427 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:25:14,435 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:25:14] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:25:22,797 - __main__ - INFO - Received question: name: MSI PRO B650M-B DDR5 AMD B650 AM5 Soket DDR5 6800+(OC)MHz mATX Anakart bu √ºr√ºn√ºn yorum √∂zelliƒüine ne var?
2025-07-31 17:25:22,797 - __main__ - INFO - Generating Cypher for question: name: MSI PRO B650M-B DDR5 AMD B650 AM5 Soket DDR5 6800+(OC)MHz mATX Anakart bu √ºr√ºn√ºn yorum √∂zelliƒüine ne var?
2025-07-31 17:25:22,802 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:25:22,835 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:25:22,836 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:25:22,837 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:25:22,837 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:25:22,837 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: name: MSI PRO B650M-B DDR5 AMD B650 AM5 Soket DDR5 6800+(OC)MHz mATX Anakart bu √ºr√ºn√ºn yorum √∂zelliƒüine ne var?
2025-07-31 17:25:22,843 - graphrag_pipeline - INFO - Extracted entities: ['MHz', 'MSI', 'Soket', 'PRO', 'AMD', 'Anakart']
2025-07-31 17:25:23,219 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:25:23,229 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-07-31 17:25:23,283 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:25:23,287 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:25:24,462 - __main__ - INFO - Gemini API call successful
2025-07-31 17:25:24,483 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) WHERE p.name CONTAINS 'MSI PRO B650M-B DDR5 AMD B650 AM5 Soket DDR5 6800+(OC)MHz mATX Anakart' RETURN p.comment
2025-07-31 17:25:24,484 - __main__ - INFO - Generated Cypher: MATCH (p:Product) WHERE p.name CONTAINS 'MSI PRO B650M-B DDR5 AMD B650 AM5 Soket DDR5 6800+(OC)MHz mATX Anakart' RETURN p.comment
2025-07-31 17:25:24,546 - __main__ - INFO - Query results: 1 rows
2025-07-31 17:25:24,546 - __main__ - INFO - Generating answer for question: name: MSI PRO B650M-B DDR5 AMD B650 AM5 Soket DDR5 6800+(OC)MHz mATX Anakart bu √ºr√ºn√ºn yorum √∂zelliƒüine ne var?
2025-07-31 17:25:29,707 - __main__ - INFO - Gemini API call successful
2025-07-31 17:25:29,728 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:25:29,739 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:25:29] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:25:36,946 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:25:36,965 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:25:36,966 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:25:36,967 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:25:36,967 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:25:36,968 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:25:36] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:26:07,551 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:26:07,572 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:26:07,572 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:26:07,573 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:26:07,574 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:26:07,574 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:26:07] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:26:36,945 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:26:36,999 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:26:36,999 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:26:37,000 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:26:37,001 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:26:37,001 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:26:37] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:27:06,953 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:27:06,974 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:27:06,974 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:27:06,976 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:27:06,976 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:27:06,977 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:27:06] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:27:37,565 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:27:37,584 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:27:37,585 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:27:37,587 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:27:37,587 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:27:37,588 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:27:37] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:28:07,573 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:28:07,595 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:28:07,595 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:28:07,596 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:28:07,597 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:28:07,599 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:28:07] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:28:37,571 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:28:37,613 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:28:37,613 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:28:37,614 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:28:37,614 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:28:37,615 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:28:37] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:28:48,172 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:28:48] "GET / HTTP/1.1" 200 -
2025-07-31 17:28:48,198 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:28:48,203 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:28:48] "GET /api/history HTTP/1.1" 200 -
2025-07-31 17:28:48,237 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:28:48,238 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:28:48,240 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:28:48,241 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:28:48,243 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:28:48] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:28:48,255 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:28:48,275 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:28:48,276 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:28:48,277 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:28:48,278 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:28:48,279 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:28:48] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:28:49,600 - __main__ - INFO - Received question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:28:49,600 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:28:49,605 - __main__ - INFO - Using cached Cypher query
2025-07-31 17:28:49,605 - __main__ - INFO - Generated Cypher: MATCH (n) RETURN DISTINCT labels(n)
2025-07-31 17:28:49,612 - __main__ - INFO - Query results: 3 rows
2025-07-31 17:28:49,613 - __main__ - INFO - Generating answer for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:28:49,617 - __main__ - INFO - Using cached answer
2025-07-31 17:28:49,626 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:28:49] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:29:18,455 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:29:18,483 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:29:18,483 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:29:18,486 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:29:18,487 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:29:18,488 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:29:18] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:29:48,565 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:29:48,585 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:29:48,586 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:29:48,587 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:29:48,588 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:29:48,589 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:29:48] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:30:18,567 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:30:18,595 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:30:18,597 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:30:18,600 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:30:18,601 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:30:18,603 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:30:18] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:30:46,436 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:30:46] "GET / HTTP/1.1" 200 -
2025-07-31 17:30:46,464 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:30:46,472 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:30:46] "GET /api/history HTTP/1.1" 200 -
2025-07-31 17:30:46,505 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:30:46,507 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:30:46,509 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:30:46,509 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:30:46,510 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:30:46] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:30:46,527 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:30:46,553 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:30:46,554 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:30:46,558 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:30:46,559 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:30:46,561 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:30:46] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:31:12,830 - __main__ - INFO - Received question: Ver
2025-07-31 17:31:12,830 - __main__ - INFO - Generating Cypher for question: Ver
2025-07-31 17:31:12,836 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:31:12,861 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:31:12,862 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:31:12,862 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:31:12,863 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:31:12,863 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Ver
2025-07-31 17:31:12,871 - graphrag_pipeline - INFO - Extracted entities: ['Ver']
2025-07-31 17:31:13,306 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:31:13,346 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-07-31 17:31:13,373 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:31:13,374 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:31:14,344 - __main__ - INFO - Gemini API call successful
2025-07-31 17:31:14,369 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) WHERE ANY(x IN keys(n) WHERE toString(n[x]) CONTAINS 'Ver') RETURN n
2025-07-31 17:31:14,370 - __main__ - INFO - Generated Cypher: MATCH (n) WHERE ANY(x IN keys(n) WHERE toString(n[x]) CONTAINS 'Ver') RETURN n
2025-07-31 17:31:14,451 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:31:14,452 - __main__ - ERROR - Failed to execute query: MATCH (n) WHERE ANY(x IN keys(n) WHERE toString(n[x]) CONTAINS 'Ver') RETURN n
2025-07-31 17:31:14,452 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:31:14,453 - __main__ - INFO - Query results: 0 rows
2025-07-31 17:31:14,453 - __main__ - INFO - Generating answer for question: Ver
2025-07-31 17:31:16,473 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:31:16,496 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:31:16,496 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:31:16,498 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:31:16,500 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:31:16,502 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:31:16] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:31:19,192 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:31:19] "GET / HTTP/1.1" 200 -
2025-07-31 17:31:19,248 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:31:19,249 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:31:19] "GET /api/history HTTP/1.1" 200 -
2025-07-31 17:31:19,297 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:31:19,300 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:31:19,303 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:31:19,304 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:31:19,306 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:31:19] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:31:19,325 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:31:19,356 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:31:19,357 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:31:19,357 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:31:19,358 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:31:19,358 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:31:19] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:31:19,953 - __main__ - INFO - Gemini API call successful
2025-07-31 17:31:19,977 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:31:19,984 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:31:19] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:31:27,348 - __main__ - INFO - Received question: veritabanƒ±ndaki klavyeyi getir
2025-07-31 17:31:27,349 - __main__ - INFO - Generating Cypher for question: veritabanƒ±ndaki klavyeyi getir
2025-07-31 17:31:27,355 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:31:27,384 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:31:27,385 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:31:27,386 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:31:27,386 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:31:27,386 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: veritabanƒ±ndaki klavyeyi getir
2025-07-31 17:31:27,391 - graphrag_pipeline - INFO - Extracted entities: []
2025-07-31 17:31:27,734 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:31:27,764 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:31:27,765 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:31:28,901 - __main__ - INFO - Gemini API call successful
2025-07-31 17:31:28,933 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) WHERE p.klavye_duzeni IS NOT NULL RETURN p
2025-07-31 17:31:28,933 - __main__ - INFO - Generated Cypher: MATCH (p:Product) WHERE p.klavye_duzeni IS NOT NULL RETURN p
2025-07-31 17:31:28,987 - __main__ - INFO - Query results: 1 rows
2025-07-31 17:31:28,987 - __main__ - INFO - Generating answer for question: veritabanƒ±ndaki klavyeyi getir
2025-07-31 17:31:38,412 - __main__ - INFO - Gemini API call successful
2025-07-31 17:31:38,436 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:31:38,442 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:31:38] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:31:49,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:31:49,273 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:31:49,274 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:31:49,275 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:31:49,275 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:31:49,276 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:31:49] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:32:19,247 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:32:19,264 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:32:19,265 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:32:19,265 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:32:19,266 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:32:19,266 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:32:19] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:32:49,022 - __main__ - INFO - Received question: Kategorisi klavye olan √ºr√ºnlerin markasƒ±nƒ± getir
2025-07-31 17:32:49,022 - __main__ - INFO - Generating Cypher for question: Kategorisi klavye olan √ºr√ºnlerin markasƒ±nƒ± getir
2025-07-31 17:32:49,031 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:32:49,052 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:32:49,053 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:32:49,054 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:32:49,055 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:32:49,056 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Kategorisi klavye olan √ºr√ºnlerin markasƒ±nƒ± getir
2025-07-31 17:32:49,061 - graphrag_pipeline - INFO - Extracted entities: ['Kategorisi']
2025-07-31 17:32:49,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:32:49,276 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:32:49,277 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:32:49,277 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:32:49,278 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:32:49,278 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:32:49] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:32:49,424 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:32:49,461 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-07-31 17:32:49,494 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:32:49,495 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:32:51,090 - __main__ - INFO - Gemini API call successful
2025-07-31 17:32:51,119 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product)-[:TYPE]->(c:Category {name: 'Klavye'})-[:BRAND]->(b:Brand) RETURN p, c, b
2025-07-31 17:32:51,120 - __main__ - INFO - Generated Cypher: MATCH (p:Product)-[:TYPE]->(c:Category {name: 'Klavye'})-[:BRAND]->(b:Brand) RETURN p, c, b
2025-07-31 17:32:51,194 - __main__ - INFO - Query results: 0 rows
2025-07-31 17:32:51,195 - __main__ - INFO - Generating answer for question: Kategorisi klavye olan √ºr√ºnlerin markasƒ±nƒ± getir
2025-07-31 17:32:56,272 - __main__ - INFO - Gemini API call successful
2025-07-31 17:32:56,300 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:32:56,306 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:32:56] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:33:19,264 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:33:19,280 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:33:19,281 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:33:19,282 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:33:19,282 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:33:19,283 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:33:19] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:33:49,581 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:33:49,598 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:33:49,598 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:33:49,599 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:33:49,599 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:33:49,600 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:33:49] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:34:19,258 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:34:19,284 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:34:19,285 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:34:19,287 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:34:19,288 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:34:19,289 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:34:19] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:34:49,580 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:34:49,599 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:34:49,600 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:34:49,601 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:34:49,601 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:34:49,602 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:34:49] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:35:19,592 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:35:19,678 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:35:19,679 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:35:19,679 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:35:19,681 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:35:19,682 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:35:19] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:35:49,256 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:35:49,274 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:35:49,275 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:35:49,275 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:35:49,275 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:35:49,276 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:35:49] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:36:01,503 - __main__ - INFO - Received question: Razer BlackWidow V4 RZ03-04691200-R3L1 Green Switch TR Q RGB Kablolu Mekanik Gaming (Oyuncu) Klavye markasƒ± razer olan bu √ºr√ºn√ºn type ini getir
2025-07-31 17:36:01,504 - __main__ - INFO - Generating Cypher for question: Razer BlackWidow V4 RZ03-04691200-R3L1 Green Switch TR Q RGB Kablolu Mekanik Gaming (Oyuncu) Klavye markasƒ± razer olan bu √ºr√ºn√ºn type ini getir
2025-07-31 17:36:01,509 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:36:01,529 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:36:01,529 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:36:01,530 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:36:01,531 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:36:01,531 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Razer BlackWidow V4 RZ03-04691200-R3L1 Green Switch TR Q RGB Kablolu Mekanik Gaming (Oyuncu) Klavye markasƒ± razer olan bu √ºr√ºn√ºn type ini getir
2025-07-31 17:36:01,540 - graphrag_pipeline - INFO - Extracted entities: ['Gaming', 'BlackWidow', 'Switch', 'Razer', 'Mekanik', 'Green', 'RGB', 'Oyuncu', 'Klavye', 'Kablolu']
2025-07-31 17:36:01,920 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:36:01,982 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-07-31 17:36:02,017 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:36:02,017 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:36:03,291 - __main__ - INFO - Gemini API call successful
2025-07-31 17:36:03,322 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product {name: "Razer BlackWidow V4 RZ03-04691200-R3L1 Green Switch TR Q RGB Kablolu Mekanik Gaming (Oyuncu) Klavye"})-[:TYPE]->(c:Category) RETURN p, c
2025-07-31 17:36:03,323 - __main__ - INFO - Generated Cypher: MATCH (p:Product {name: "Razer BlackWidow V4 RZ03-04691200-R3L1 Green Switch TR Q RGB Kablolu Mekanik Gaming (Oyuncu) Klavye"})-[:TYPE]->(c:Category) RETURN p, c
2025-07-31 17:36:03,371 - __main__ - INFO - Query results: 1 rows
2025-07-31 17:36:03,371 - __main__ - INFO - Generating answer for question: Razer BlackWidow V4 RZ03-04691200-R3L1 Green Switch TR Q RGB Kablolu Mekanik Gaming (Oyuncu) Klavye markasƒ± razer olan bu √ºr√ºn√ºn type ini getir
2025-07-31 17:36:10,064 - __main__ - INFO - Gemini API call successful
2025-07-31 17:36:10,094 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:36:10,101 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:36:10] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:36:19,258 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:36:19,276 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:36:19,276 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:36:19,277 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:36:19,277 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:36:19,278 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:36:19] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:36:49,594 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:36:49,612 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:36:49,613 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:36:49,614 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:36:49,615 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:36:49,616 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:36:49] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:44:40,324 - __main__ - INFO - Gemini API configured with model: gemini-1.5-flash
2025-07-31 17:44:40,324 - embeddings - INFO - Embedding manager initialized successfully
2025-07-31 17:44:40,325 - __main__ - INFO - GraphRAG embedding manager initialized
2025-07-31 17:44:42,426 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-07-31 17:44:42,426 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-07-31 17:44:42,431 - embeddings - INFO - Semantic vector index created
2025-07-31 17:44:42,432 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-07-31 17:44:42,436 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-07-31 17:44:42,436 - __main__ - INFO - Neo4j available: True
2025-07-31 17:44:42,436 - __main__ - INFO - Gemini API available: True
2025-07-31 17:44:42,437 - __main__ - INFO - Gemini model: gemini-1.5-flash
2025-07-31 17:44:42,493 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-07-31 17:44:42,494 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-07-31 17:44:44,675 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:44:44] "GET / HTTP/1.1" 200 -
2025-07-31 17:44:44,729 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:44:44,766 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:44:44,766 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:44:44,767 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:44:44,768 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:44:44,769 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:44:44] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:44:44,934 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:44:44] "GET /api/history HTTP/1.1" 200 -
2025-07-31 17:44:44,970 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:44:45,007 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:44:45,008 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:44:45,015 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:44:45,017 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:44:45,018 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:44:45] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:44:51,746 - __main__ - INFO - Received question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-07-31 17:44:51,746 - __main__ - INFO - Generating Cypher for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-07-31 17:44:51,759 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:44:51,783 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:44:51,784 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:44:51,785 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:44:51,785 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:44:51,786 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-07-31 17:44:51,797 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±']
2025-07-31 17:44:52,429 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:44:52,440 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-07-31 17:44:52,481 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:44:52,482 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:44:54,634 - __main__ - INFO - Gemini API call successful
2025-07-31 17:44:54,670 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count
2025-07-31 17:44:54,671 - __main__ - INFO - Generated Cypher: MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count
2025-07-31 17:44:54,682 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.SyntaxError} {message: All sub queries in an UNION must have the same return column names (line 1, column 66 (offset: 65))
"MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count"
                                                                  ^}
2025-07-31 17:44:54,683 - __main__ - ERROR - Failed to execute query: MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count
2025-07-31 17:44:54,684 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.SyntaxError} {message: All sub queries in an UNION must have the same return column names (line 1, column 66 (offset: 65))
"MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count"
                                                                  ^}
2025-07-31 17:44:54,684 - __main__ - INFO - Query results: 0 rows
2025-07-31 17:44:54,684 - __main__ - INFO - Generating answer for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-07-31 17:44:59,825 - __main__ - INFO - Gemini API call successful
2025-07-31 17:44:59,869 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:44:59,879 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:44:59] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:45:14,732 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:45:14,754 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:45:14,754 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:45:14,756 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:45:14,756 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:45:14,757 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:45:14] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:45:15,835 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:45:15] "GET / HTTP/1.1" 200 -
2025-07-31 17:45:15,860 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:45:15,869 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:45:15] "GET /api/history HTTP/1.1" 200 -
2025-07-31 17:45:15,913 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:45:15,914 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:45:15,917 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:45:15,918 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:45:15,919 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:45:15] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:45:15,935 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:45:15,962 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:45:15,963 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:45:15,963 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:45:15,964 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:45:15,966 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:45:15] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:45:17,223 - __main__ - INFO - Received question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:45:17,224 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:45:17,232 - __main__ - INFO - Using cached Cypher query
2025-07-31 17:45:17,233 - __main__ - INFO - Generated Cypher: MATCH (n) RETURN DISTINCT labels(n)
2025-07-31 17:45:17,238 - __main__ - INFO - Query results: 3 rows
2025-07-31 17:45:17,239 - __main__ - INFO - Generating answer for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-07-31 17:45:17,252 - __main__ - INFO - Using cached answer
2025-07-31 17:45:17,263 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:45:17] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:45:18,822 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:45:18] "GET / HTTP/1.1" 200 -
2025-07-31 17:45:18,852 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:45:18,860 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:45:18] "GET /api/history HTTP/1.1" 200 -
2025-07-31 17:45:18,897 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:45:18,902 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:45:18,907 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:45:18,908 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:45:18,909 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:45:18] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:45:18,925 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:45:18,957 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:45:18,957 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:45:18,958 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:45:18,959 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:45:18,959 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:45:18] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:45:24,853 - __main__ - INFO - Received question: √ºr√ºnleri listele
2025-07-31 17:45:24,853 - __main__ - INFO - Generating Cypher for question: √ºr√ºnleri listele
2025-07-31 17:45:24,864 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:45:24,889 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:45:24,889 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:45:24,890 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:45:24,890 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:45:24,891 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: √ºr√ºnleri listele
2025-07-31 17:45:24,902 - graphrag_pipeline - INFO - Extracted entities: []
2025-07-31 17:45:25,275 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-07-31 17:45:25,318 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-07-31 17:45:25,318 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-07-31 17:45:26,798 - __main__ - INFO - Gemini API call successful
2025-07-31 17:45:26,878 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) RETURN p
2025-07-31 17:45:26,879 - __main__ - INFO - Generated Cypher: MATCH (p:Product) RETURN p
2025-07-31 17:45:26,916 - __main__ - INFO - Query results: 20 rows
2025-07-31 17:45:26,916 - __main__ - INFO - Generating answer for question: √ºr√ºnleri listele
2025-07-31 17:45:49,635 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:45:49,653 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:45:49,653 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:45:49,654 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:45:49,654 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:45:49,655 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:45:49] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:46:18,861 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:46:18,897 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:46:18,898 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:46:18,899 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:46:18,899 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:46:18,900 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:46:18] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:46:24,738 - __main__ - INFO - Gemini API call successful
2025-07-31 17:46:24,805 - __main__ - INFO - Successfully generated answer with Gemini
2025-07-31 17:46:24,814 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:46:24] "POST /api/ask HTTP/1.1" 200 -
2025-07-31 17:46:49,605 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:46:49,630 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:46:49,631 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:46:49,632 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:46:49,633 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:46:49,634 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:46:49] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:47:19,609 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:47:19,626 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:47:19,626 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:47:19,627 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:47:19,627 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:47:19,628 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:47:19] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:47:49,601 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:47:49,618 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:47:49,619 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:47:49,619 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:47:49,620 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:47:49,620 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:47:49] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:48:19,605 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:48:19,622 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:48:19,622 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:48:19,623 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:48:19,623 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:48:19,624 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:48:19] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:48:49,609 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:48:49,625 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:48:49,626 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:48:49,627 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:48:49,627 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:48:49,628 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:48:49] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:49:37,604 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:49:37,620 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:49:37,621 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:49:37,621 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:49:37,622 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:49:37,622 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:49:37] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:50:37,598 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:50:37,618 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:50:37,618 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:50:37,619 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:50:37,619 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:50:37,620 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:50:37] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:51:01,589 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:51:01,629 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:51:01,630 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:51:01,632 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:51:01,634 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:51:01,634 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:51:01] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:51:18,856 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:51:18,872 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:51:18,872 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:51:18,873 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:51:18,873 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:51:18,874 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:51:18] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:51:49,612 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:51:49,631 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:51:49,632 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:51:49,632 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:51:49,633 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:51:49,634 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:51:49] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:52:19,607 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:52:19,623 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:52:19,623 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:52:19,624 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:52:19,624 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:52:19,625 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:52:19] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:53:20,601 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:53:20,618 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:53:20,618 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:53:20,619 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:53:20,619 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:53:20,619 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:53:20] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:53:48,868 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:53:48,886 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:53:48,886 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:53:48,888 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:53:48,888 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:53:48,889 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:53:48] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:54:19,608 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:54:19,637 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:54:19,638 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:54:19,640 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:54:19,640 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:54:19,641 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:54:19] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:54:49,604 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:54:49,621 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:54:49,622 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:54:49,623 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:54:49,624 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:54:49,625 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:54:49] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:55:19,606 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:55:19,622 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:55:19,623 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:55:19,623 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:55:19,624 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:55:19,624 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:55:19] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:55:48,869 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:55:48,888 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:55:48,888 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:55:48,889 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:55:48,889 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:55:48,890 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:55:48] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:56:19,624 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:56:19,656 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:56:19,656 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:56:19,657 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:56:19,658 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:56:19,659 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:56:19] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:56:49,649 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:56:49,699 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:56:49,700 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:56:49,701 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:56:49,702 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:56:49,704 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:56:49] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:57:37,620 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:57:38,038 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:57:38,038 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:57:38,040 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:57:38,040 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:57:38,041 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:57:38] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:58:37,615 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:58:37,644 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:58:37,645 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:58:37,647 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:58:37,647 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:58:37,648 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:58:37] "GET /api/health HTTP/1.1" 200 -
2025-07-31 17:59:37,619 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 17:59:37,663 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:59:37,666 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 17:59:37,668 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 17:59:37,668 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 17:59:37,670 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 17:59:37] "GET /api/health HTTP/1.1" 200 -
2025-07-31 18:00:37,647 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 18:00:37,678 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 18:00:37,679 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 18:00:37,681 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 18:00:37,682 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 18:00:37,684 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 18:00:37] "GET /api/health HTTP/1.1" 200 -
2025-07-31 18:01:37,855 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 18:01:38,134 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 18:01:38,143 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 18:01:38,159 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 18:01:38,172 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 18:01:38,179 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 18:01:38] "GET /api/health HTTP/1.1" 200 -
2025-07-31 18:02:37,909 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 18:02:38,491 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 18:02:38,630 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 18:02:38,745 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 18:02:38,970 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 18:02:39,066 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 18:02:39] "GET /api/health HTTP/1.1" 200 -
2025-07-31 18:03:37,706 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 18:03:38,730 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 18:03:38,740 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 18:03:38,799 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 18:03:38,813 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 18:03:38,840 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 18:03:38] "GET /api/health HTTP/1.1" 200 -
2025-07-31 18:04:38,468 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 18:04:39,103 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 18:04:39,405 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 18:04:39,499 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 18:04:39,860 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 18:04:40,077 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 18:04:40] "GET /api/health HTTP/1.1" 200 -
2025-07-31 18:05:37,762 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 18:05:38,055 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 18:05:38,125 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 18:05:38,271 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 18:05:38,293 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 18:05:38,329 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 18:05:38] "GET /api/health HTTP/1.1" 200 -
2025-07-31 18:06:37,836 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 18:06:38,102 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 18:06:38,111 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 18:06:38,141 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 18:06:38,156 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 18:06:38,178 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 18:06:38] "GET /api/health HTTP/1.1" 200 -
2025-07-31 18:07:37,735 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-07-31 18:07:38,013 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 18:07:38,031 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-07-31 18:07:38,054 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-07-31 18:07:38,067 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-07-31 18:07:38,082 - werkzeug - INFO - 127.0.0.1 - - [31/Jul/2025 18:07:38] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:20:18,303 - __main__ - INFO - Gemini API configured with model: gemini-1.5-flash
2025-08-01 15:20:18,303 - embeddings - INFO - Embedding manager initialized successfully
2025-08-01 15:20:18,304 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-01 15:20:20,473 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-01 15:20:20,473 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-01 15:20:20,489 - embeddings - INFO - Semantic vector index created
2025-08-01 15:20:20,491 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-01 15:20:20,494 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-01 15:20:20,495 - __main__ - INFO - Neo4j available: True
2025-08-01 15:20:20,495 - __main__ - INFO - Gemini API available: True
2025-08-01 15:20:20,495 - __main__ - INFO - Gemini model: gemini-1.5-flash
2025-08-01 15:20:20,643 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-01 15:20:20,644 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-01 15:20:22,592 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:20:22] "GET / HTTP/1.1" 200 -
2025-08-01 15:20:23,102 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:20:23] "GET /api/history HTTP/1.1" 200 -
2025-08-01 15:20:23,145 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:20:23,255 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:20:23,256 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:20:23,257 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:20:23,257 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:20:23,258 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:20:23] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:20:23,277 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:20:23,335 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:20:23,336 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:20:23,337 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:20:23,338 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:20:23,338 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:20:23] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:20:33,237 - __main__ - INFO - Received question: markalara listele
2025-08-01 15:20:33,237 - __main__ - INFO - Generating Cypher for question: markalara listele
2025-08-01 15:20:33,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:20:33,322 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:20:33,322 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:20:33,323 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:20:33,324 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:20:33,325 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: markalara listele
2025-08-01 15:20:33,342 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-01 15:20:34,169 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 15:20:34,225 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 15:20:34,225 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 15:20:34,901 - __main__ - INFO - Gemini API call successful
2025-08-01 15:20:34,953 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (b:Brand) RETURN b
2025-08-01 15:20:34,954 - __main__ - INFO - Generated Cypher: MATCH (b:Brand) RETURN b
2025-08-01 15:20:35,161 - __main__ - INFO - Query results: 14 rows
2025-08-01 15:20:35,161 - __main__ - INFO - Generating answer for question: markalara listele
2025-08-01 15:20:51,332 - __main__ - INFO - Gemini API call successful
2025-08-01 15:20:51,385 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 15:20:51,399 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:20:51] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 15:20:53,406 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:20:53,466 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:20:53,466 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:20:53,468 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:20:53,468 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:20:53,469 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:20:53] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:21:23,404 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:21:23,445 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:21:23,445 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:21:23,446 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:21:23,447 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:21:23,447 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:21:23] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:21:53,401 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:21:53,440 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:21:53,441 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:21:53,442 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:21:53,442 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:21:53,443 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:21:53] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:22:23,407 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:22:23,444 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:22:23,445 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:22:23,445 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:22:23,446 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:22:23,446 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:22:23] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:22:53,404 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:22:53,460 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:22:53,461 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:22:53,462 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:22:53,462 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:22:53,462 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:22:53] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:23:23,414 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:23:23,480 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:23:23,481 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:23:23,481 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:23:23,482 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:23:23,482 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:23:23] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:23:53,413 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:23:53,452 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:23:53,453 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:23:53,455 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:23:53,456 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:23:53,456 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:23:53] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:24:30,407 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:24:30,451 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:24:30,452 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:24:30,453 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:24:30,453 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:24:30,454 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:24:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:25:30,436 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:25:30,475 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:25:30,475 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:25:30,477 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:25:30,477 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:25:30,478 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:25:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:26:30,331 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:26:30,370 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:26:30,371 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:26:30,372 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:26:30,372 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:26:30,373 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:26:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:27:30,272 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:27:30,306 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:27:30,306 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:27:30,307 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:27:30,307 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:27:30,308 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:27:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:28:30,197 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:28:30,256 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:28:30,256 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:28:30,257 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:28:30,257 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:28:30,258 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:28:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:29:30,132 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:29:30,181 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:29:30,182 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:29:30,182 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:29:30,183 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:29:30,183 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:29:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:30:30,101 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:30:30,142 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:30:30,143 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:30:30,144 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:30:30,144 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:30:30,145 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:30:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:31:30,068 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:31:30,106 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:31:30,107 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:31:30,107 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:31:30,108 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:31:30,108 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:31:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:32:30,056 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:32:30,086 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:32:30,087 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:32:30,088 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:32:30,088 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:32:30,089 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:32:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:33:30,066 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:33:30,101 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:33:30,102 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:33:30,103 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:33:30,103 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:33:30,104 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:33:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:34:30,052 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:34:30,085 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:34:30,086 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:34:30,087 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:34:30,087 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:34:30,088 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:34:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:35:30,068 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:35:30,102 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:35:30,103 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:35:30,104 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:35:30,105 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:35:30,106 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:35:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:36:30,066 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:36:30,104 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:36:30,105 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:36:30,106 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:36:30,107 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:36:30,107 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:36:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:37:30,065 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:37:30,097 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:37:30,098 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:37:30,099 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:37:30,100 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:37:30,101 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:37:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:38:30,055 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:38:30,090 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:38:30,091 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:38:30,092 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:38:30,093 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:38:30,094 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:38:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:39:30,056 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:39:30,088 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:39:30,088 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:39:30,090 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:39:30,090 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:39:30,091 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:39:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:40:30,059 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:40:30,153 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:40:30,153 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:40:30,154 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:40:30,154 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:40:30,155 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:40:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:41:30,059 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:41:30,092 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:41:30,092 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:41:30,093 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:41:30,094 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:41:30,094 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:41:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:42:30,065 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:42:30,113 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:42:30,114 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:42:30,115 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:42:30,115 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:42:30,116 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:42:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:43:30,114 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:43:30,144 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:43:30,144 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:43:30,145 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:43:30,145 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:43:30,147 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:43:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:44:30,156 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:44:30,192 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:44:30,193 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:44:30,194 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:44:30,194 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:44:30,195 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:44:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:45:30,195 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:45:30,238 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:45:30,239 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:45:30,240 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:45:30,240 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:45:30,241 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:45:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:46:30,223 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:46:30,255 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:46:30,255 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:46:30,256 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:46:30,257 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:46:30,257 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:46:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:47:30,267 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:47:30,295 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:47:30,296 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:47:30,297 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:47:30,298 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:47:30,299 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:47:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:48:30,284 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:48:30,318 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:48:30,318 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:48:30,319 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:48:30,319 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:48:30,320 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:48:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:49:30,298 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:49:30,334 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:49:30,335 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:49:30,336 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:49:30,337 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:49:30,338 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:49:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:50:30,313 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:50:30,345 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:50:30,346 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:50:30,346 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:50:30,347 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:50:30,347 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:50:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:51:30,340 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:51:30,367 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:51:30,368 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:51:30,369 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:51:30,370 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:51:30,371 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:51:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:52:30,354 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:52:30,387 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:52:30,388 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:52:30,389 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:52:30,390 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:52:30,390 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:52:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:53:30,349 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:53:30,377 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:53:30,378 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:53:30,379 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:53:30,380 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:53:30,380 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:53:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:54:30,354 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:54:30,404 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:54:30,405 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:54:30,406 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:54:30,407 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:54:30,408 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:54:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:55:30,370 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:55:30,397 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:55:30,398 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:55:30,399 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:55:30,400 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:55:30,401 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:55:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:56:30,382 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:56:30,407 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:56:30,408 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:56:30,409 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:56:30,410 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:56:30,410 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:56:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:57:30,415 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:57:30,444 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:57:30,445 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:57:30,445 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:57:30,446 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:57:30,447 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:57:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:58:30,388 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:58:30,421 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:58:30,421 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:58:30,422 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:58:30,422 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:58:30,423 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:58:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 15:59:30,389 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 15:59:30,417 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:59:30,418 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 15:59:30,419 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 15:59:30,419 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 15:59:30,420 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 15:59:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:00:30,374 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:00:30,404 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:00:30,405 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:00:30,406 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:00:30,406 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:00:30,406 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:00:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:01:30,367 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:01:30,413 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:01:30,414 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:01:30,415 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:01:30,415 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:01:30,416 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:01:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:02:30,361 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:02:30,386 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:02:30,386 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:02:30,387 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:02:30,388 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:02:30,389 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:02:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:03:30,350 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:03:30,397 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:03:30,398 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:03:30,399 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:03:30,399 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:03:30,400 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:03:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:04:30,339 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:04:30,369 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:04:30,370 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:04:30,371 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:04:30,372 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:04:30,373 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:04:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:05:30,336 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:05:30,360 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:05:30,361 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:05:30,361 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:05:30,362 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:05:30,363 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:05:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:06:30,336 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:06:30,385 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:06:30,385 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:06:30,387 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:06:30,387 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:06:30,388 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:06:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:07:30,346 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:07:30,377 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:07:30,377 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:07:30,378 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:07:30,378 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:07:30,379 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:07:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:08:30,324 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:08:30,351 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:08:30,352 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:08:30,353 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:08:30,354 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:08:30,355 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:08:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:09:30,325 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:09:30,354 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:09:30,355 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:09:30,356 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:09:30,356 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:09:30,357 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:09:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:10:30,328 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:10:30,387 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:10:30,388 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:10:30,389 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:10:30,389 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:10:30,390 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:10:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:11:30,330 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:11:30,366 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:11:30,367 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:11:30,367 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:11:30,368 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:11:30,368 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:11:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:12:30,320 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:12:30,351 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:12:30,351 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:12:30,352 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:12:30,353 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:12:30,353 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:12:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:13:30,318 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:13:30,349 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:13:30,349 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:13:30,350 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:13:30,350 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:13:30,351 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:13:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:14:30,325 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:14:30,353 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:14:30,354 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:14:30,355 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:14:30,355 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:14:30,356 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:14:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:15:30,321 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:15:30,346 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:15:30,347 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:15:30,347 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:15:30,348 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:15:30,348 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:15:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:16:30,309 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:16:30,337 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:16:30,337 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:16:30,338 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:16:30,338 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:16:30,340 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:16:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:17:30,275 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:17:30,304 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:17:30,304 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:17:30,305 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:17:30,305 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:17:30,306 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:17:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:18:30,236 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:18:30,266 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:18:30,267 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:18:30,268 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:18:30,268 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:18:30,269 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:18:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:18:59,312 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:18:59,395 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:18:59,407 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:18:59,416 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:18:59,425 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:18:59,427 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:18:59] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:19:23,203 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:19:23,232 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:19:23,233 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:19:23,233 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:19:23,234 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:19:23,234 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:19:23] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:20:16,971 - __main__ - INFO - Gemini API configured with model: gemini-1.5-flash
2025-08-01 16:20:16,972 - embeddings - INFO - Embedding manager initialized successfully
2025-08-01 16:20:16,973 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-01 16:20:19,390 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-01 16:20:19,391 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-01 16:20:19,409 - embeddings - INFO - Semantic vector index created
2025-08-01 16:20:19,417 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-01 16:20:19,432 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-01 16:20:19,434 - __main__ - INFO - Neo4j available: True
2025-08-01 16:20:19,436 - __main__ - INFO - Gemini API available: True
2025-08-01 16:20:19,437 - __main__ - INFO - Gemini model: gemini-1.5-flash
2025-08-01 16:20:19,605 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-01 16:20:19,607 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-01 16:20:23,171 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:20:23,231 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:20:23,232 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:20:23,234 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:20:23,235 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:20:23,237 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:20:23] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:20:53,147 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:20:53,207 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:20:53,208 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:20:53,208 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:20:53,209 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:20:53,209 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:20:53] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:21:30,125 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:21:30,160 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:21:30,161 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:21:30,162 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:21:30,162 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:21:30,163 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:21:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:22:30,109 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:22:30,137 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:22:30,137 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:22:30,138 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:22:30,139 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:22:30,140 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:22:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:22:58,230 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:22:58,271 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:22:58,271 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:22:58,272 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:22:58,272 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:22:58,273 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:22:58] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:23:09,489 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:23:09] "GET / HTTP/1.1" 200 -
2025-08-01 16:23:09,965 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:23:09,997 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:23:09,998 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:23:09,999 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:23:10,000 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:23:10,001 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:23:10] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:23:10,069 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:23:10] "GET /api/history HTTP/1.1" 200 -
2025-08-01 16:23:10,097 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:23:10,129 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:23:10,130 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:23:10,130 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:23:10,131 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:23:10,132 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:23:10] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:23:14,582 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:23:14] "GET / HTTP/1.1" 200 -
2025-08-01 16:23:14,995 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:23:15,024 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:23:15,025 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:23:15,026 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:23:15,027 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:23:15,027 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:23:15] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:23:15,095 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:23:15] "GET /api/history HTTP/1.1" 200 -
2025-08-01 16:23:15,110 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:23:15,149 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:23:15,149 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:23:15,150 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:23:15,151 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:23:15,152 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:23:15] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:23:18,190 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:23:18] "GET / HTTP/1.1" 200 -
2025-08-01 16:23:18,595 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:23:18,622 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:23:18,622 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:23:18,623 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:23:18,623 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:23:18,624 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:23:18] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:23:18,693 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:23:18] "GET /api/history HTTP/1.1" 200 -
2025-08-01 16:23:18,708 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:23:18,744 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:23:18,745 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:23:18,746 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:23:18,746 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:23:18,746 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:23:18] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:23:23,087 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:23:23,115 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:23:23,115 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:23:23,116 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:23:23,117 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:23:23,117 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:23:23] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:23:53,079 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:23:53,102 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:23:53,103 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:23:53,104 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:23:53,104 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:23:53,105 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:23:53] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:24:30,068 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:24:30,092 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:24:30,093 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:24:30,093 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:24:30,094 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:24:30,094 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:24:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:25:30,111 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:25:30,155 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:25:30,156 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:25:30,157 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:25:30,157 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:25:30,158 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:25:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:26:30,040 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:26:30,087 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:26:30,088 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:26:30,089 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:26:30,090 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:26:30,091 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:26:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:27:30,032 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:27:30,058 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:27:30,060 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:27:30,061 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:27:30,062 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:27:30,064 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:27:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:28:30,027 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:28:30,050 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:28:30,051 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:28:30,055 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:28:30,056 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:28:30,057 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:28:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:29:30,032 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:29:30,055 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:29:30,056 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:29:30,058 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:29:30,059 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:29:30,060 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:29:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:30:30,021 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:30:30,043 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:30:30,044 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:30:30,047 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:30:30,049 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:30:30,050 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:30:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:31:30,008 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:31:30,033 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:31:30,034 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:31:30,038 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:31:30,039 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:31:30,040 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:31:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:32:30,005 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:32:30,033 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:32:30,034 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:32:30,037 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:32:30,038 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:32:30,039 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:32:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:33:30,000 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:33:30,026 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:33:30,028 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:33:30,031 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:33:30,032 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:33:30,034 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:33:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:34:30,036 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:34:30,065 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:34:30,066 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:34:30,068 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:34:30,069 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:34:30,070 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:34:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:35:30,070 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:35:30,091 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:35:30,092 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:35:30,092 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:35:30,093 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:35:30,093 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:35:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:36:30,097 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:36:30,120 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:36:30,120 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:36:30,121 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:36:30,122 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:36:30,127 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:36:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:37:30,138 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:37:30,163 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:37:30,164 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:37:30,165 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:37:30,166 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:37:30,167 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:37:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:38:01,019 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:38:01,065 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:38:01,067 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:38:01,070 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:38:01,071 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:38:01,074 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:38:01] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:38:23,167 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:38:23,190 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:38:23,190 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:38:23,191 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:38:23,191 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:38:23,192 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:38:23] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:38:53,176 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:38:53,195 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:38:53,195 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:38:53,196 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:38:53,196 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:38:53,197 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:38:53] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:42:12,662 - __main__ - INFO - Gemini API configured with model: gemini-1.5-flash
2025-08-01 16:42:12,662 - embeddings - INFO - Embedding manager initialized successfully
2025-08-01 16:42:12,662 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-01 16:42:14,755 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-01 16:42:14,756 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-01 16:42:14,761 - embeddings - INFO - Semantic vector index created
2025-08-01 16:42:14,762 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-01 16:42:14,767 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-01 16:42:14,768 - __main__ - INFO - Neo4j available: True
2025-08-01 16:42:14,768 - __main__ - INFO - Gemini API available: True
2025-08-01 16:42:14,768 - __main__ - INFO - Gemini model: gemini-1.5-flash
2025-08-01 16:42:14,910 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-01 16:42:14,910 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-01 16:42:30,234 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:42:30,262 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:42:30,262 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:42:30,263 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:42:30,264 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:42:30,265 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:42:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:42:31,409 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:42:31] "GET /?id=fa0979a6-b553-41d2-b303-2a94b34874ea&vscodeBrowserReqId=1754055751382 HTTP/1.1" 200 -
2025-08-01 16:42:31,829 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:42:31] "GET /api/history HTTP/1.1" 200 -
2025-08-01 16:42:53,232 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:42:53,262 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:42:53,263 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:42:53,264 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:42:53,264 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:42:53,265 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:42:53] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:42:58,776 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:42:58] "GET / HTTP/1.1" 200 -
2025-08-01 16:42:58,818 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:42:58] "GET /api/history HTTP/1.1" 200 -
2025-08-01 16:43:04,701 - __main__ - INFO - Gemini API configured with model: gemini-1.5-flash
2025-08-01 16:43:04,701 - embeddings - INFO - Embedding manager initialized successfully
2025-08-01 16:43:04,702 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-01 16:43:06,760 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-01 16:43:06,760 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-01 16:43:06,766 - embeddings - INFO - Semantic vector index created
2025-08-01 16:43:06,767 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-01 16:43:06,773 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-01 16:43:06,773 - __main__ - INFO - Neo4j available: True
2025-08-01 16:43:06,774 - __main__ - INFO - Gemini API available: True
2025-08-01 16:43:06,774 - __main__ - INFO - Gemini model: gemini-1.5-flash
2025-08-01 16:43:06,826 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-01 16:43:06,826 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-01 16:44:46,698 - __main__ - INFO - Received question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 16:44:46,698 - __main__ - INFO - Generating Cypher for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 16:44:46,711 - __main__ - INFO - Using cached Cypher query
2025-08-01 16:44:46,712 - __main__ - INFO - Generated Cypher: MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count
2025-08-01 16:44:46,727 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.SyntaxError} {message: All sub queries in an UNION must have the same return column names (line 1, column 66 (offset: 65))
"MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count"
                                                                  ^}
2025-08-01 16:44:46,729 - __main__ - ERROR - Failed to execute query: MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count
2025-08-01 16:44:46,730 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.SyntaxError} {message: All sub queries in an UNION must have the same return column names (line 1, column 66 (offset: 65))
"MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count"
                                                                  ^}
2025-08-01 16:44:46,732 - __main__ - INFO - Query results: 0 rows
2025-08-01 16:44:46,733 - __main__ - INFO - Generating answer for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 16:44:46,746 - __main__ - INFO - Using cached answer
2025-08-01 16:44:46,759 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:44:46] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 16:44:58,370 - __main__ - INFO - Received question: √ºr√ºnleri listele
2025-08-01 16:44:58,370 - __main__ - INFO - Generating Cypher for question: √ºr√ºnleri listele
2025-08-01 16:44:58,385 - __main__ - INFO - Using cached Cypher query
2025-08-01 16:44:58,386 - __main__ - INFO - Generated Cypher: MATCH (p:Product) RETURN p
2025-08-01 16:44:58,401 - __main__ - INFO - Query results: 20 rows
2025-08-01 16:44:58,402 - __main__ - INFO - Generating answer for question: √ºr√ºnleri listele
2025-08-01 16:44:58,417 - __main__ - INFO - Using cached answer
2025-08-01 16:44:58,428 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:44:58] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 16:45:16,240 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:45:16] "GET / HTTP/1.1" 200 -
2025-08-01 16:45:16,268 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:45:16] "GET /api/history HTTP/1.1" 200 -
2025-08-01 16:45:17,699 - __main__ - INFO - Received question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 16:45:17,700 - __main__ - INFO - Generating Cypher for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 16:45:17,702 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:45:17,728 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:45:17,728 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:45:17,729 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:45:17,730 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:45:17,731 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 16:45:17,733 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±']
2025-08-01 16:45:18,587 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 16:45:18,599 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 16:45:18,617 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 16:45:18,618 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 16:45:19,817 - __main__ - INFO - Gemini API call successful
2025-08-01 16:45:19,830 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count
2025-08-01 16:45:19,830 - __main__ - INFO - Generated Cypher: MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count
2025-08-01 16:45:19,839 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.SyntaxError} {message: All sub queries in an UNION must have the same return column names (line 1, column 66 (offset: 65))
"MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count"
                                                                  ^}
2025-08-01 16:45:19,840 - __main__ - ERROR - Failed to execute query: MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count
2025-08-01 16:45:19,841 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.SyntaxError} {message: All sub queries in an UNION must have the same return column names (line 1, column 66 (offset: 65))
"MATCH (n) RETURN labels(n) AS node_label, count(*) AS node_count UNION ALL MATCH ()-[r]->() RETURN type(r) AS relationship_type, count(*) AS relationship_count"
                                                                  ^}
2025-08-01 16:45:19,842 - __main__ - INFO - Query results: 0 rows
2025-08-01 16:45:19,842 - __main__ - INFO - Generating answer for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 16:45:24,781 - __main__ - INFO - Gemini API call successful
2025-08-01 16:45:24,797 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 16:45:24,805 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:45:24] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 16:45:50,484 - __main__ - INFO - Received question: √ºr√ºnleri listele
2025-08-01 16:45:50,484 - __main__ - INFO - Generating Cypher for question: √ºr√ºnleri listele
2025-08-01 16:45:50,487 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:45:50,518 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:45:50,519 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:45:50,520 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:45:50,521 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:45:50,522 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: √ºr√ºnleri listele
2025-08-01 16:45:50,526 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-01 16:45:50,878 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 16:45:50,896 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 16:45:50,896 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 16:45:51,648 - __main__ - INFO - Gemini API call successful
2025-08-01 16:45:51,674 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) RETURN p
2025-08-01 16:45:51,675 - __main__ - INFO - Generated Cypher: MATCH (p:Product) RETURN p
2025-08-01 16:45:51,695 - __main__ - INFO - Query results: 20 rows
2025-08-01 16:45:51,702 - __main__ - INFO - Generating answer for question: √ºr√ºnleri listele
2025-08-01 16:46:07,549 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:46:07] "GET /?id=1589bed4-47fc-451f-86d8-4ee4bea5bc66&vscodeBrowserReqId=1754055967539 HTTP/1.1" 200 -
2025-08-01 16:46:07,946 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:46:07] "GET /api/history HTTP/1.1" 200 -
2025-08-01 16:46:43,180 - __main__ - INFO - Gemini API configured with model: gemini-1.5-flash
2025-08-01 16:46:43,181 - embeddings - INFO - Embedding manager initialized successfully
2025-08-01 16:46:43,181 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-01 16:46:45,248 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-01 16:46:45,249 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-01 16:46:45,256 - embeddings - INFO - Semantic vector index created
2025-08-01 16:46:45,257 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-01 16:46:45,266 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-01 16:46:45,267 - __main__ - INFO - Neo4j available: True
2025-08-01 16:46:45,267 - __main__ - INFO - Gemini API available: True
2025-08-01 16:46:45,268 - __main__ - INFO - Gemini model: gemini-1.5-flash
2025-08-01 16:46:45,338 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-01 16:46:45,339 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-01 16:46:50,248 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:46:50] "GET / HTTP/1.1" 200 -
2025-08-01 16:46:50,355 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:46:50,413 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:46:50,436 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:46:50,442 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:46:50,443 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:46:50,446 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:46:50] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:46:50,769 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:46:50] "GET /api/history HTTP/1.1" 200 -
2025-08-01 16:46:50,810 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:46:50,854 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:46:50,860 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:46:50,869 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:46:50,872 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:46:50,893 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:46:50] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:46:57,056 - __main__ - INFO - Received question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 16:46:57,056 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 16:46:57,061 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:46:57,087 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:46:57,087 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:46:57,089 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:46:57,090 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:46:57,090 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 16:46:57,096 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±ndaki']
2025-08-01 16:46:57,693 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 16:46:57,703 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 16:46:57,729 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 16:46:57,730 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 16:46:58,991 - __main__ - INFO - Gemini API call successful
2025-08-01 16:46:59,015 - __main__ - INFO - Generated Cypher with GraphRAG: CALL db.labels() YIELD label RETURN label
2025-08-01 16:46:59,015 - __main__ - INFO - Generated Cypher: CALL db.labels() YIELD label RETURN label
2025-08-01 16:46:59,055 - __main__ - INFO - Query results: 4 rows
2025-08-01 16:46:59,055 - __main__ - INFO - Generating answer for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 16:47:05,039 - __main__ - INFO - Gemini API call successful
2025-08-01 16:47:05,063 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 16:47:05,072 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:47:05] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 16:47:21,268 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:47:21,292 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:47:21,293 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:47:21,294 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:47:21,295 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:47:21,295 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:47:21] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:47:51,269 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:47:51,298 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:47:51,299 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:47:51,300 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:47:51,300 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:47:51,301 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:47:51] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:48:21,265 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:48:21,287 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:48:21,288 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:48:21,289 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:48:21,289 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:48:21,290 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:48:21] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:48:51,268 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:48:51,289 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:48:51,290 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:48:51,290 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:48:51,291 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:48:51,292 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:48:51] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:49:21,265 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:49:21,284 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:49:21,284 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:49:21,285 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:49:21,286 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:49:21,286 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:49:21] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:49:51,278 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:49:51,303 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:49:51,303 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:49:51,304 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:49:51,304 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:49:51,305 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:49:51] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:50:21,269 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:50:21,290 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:50:21,291 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:50:21,292 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:50:21,292 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:50:21,292 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:50:21] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:50:50,328 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:50:50,346 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:50:50,347 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:50:50,348 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:50:50,348 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:50:50,349 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:50:50] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:50:52,810 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:50:52] "GET / HTTP/1.1" 200 -
2025-08-01 16:50:52,838 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:50:52,843 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:50:52] "GET /api/history HTTP/1.1" 200 -
2025-08-01 16:50:52,873 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:50:52,874 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:50:52,875 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:50:52,876 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:50:52,877 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:50:52] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:50:52,889 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:50:52,917 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:50:52,917 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:50:52,918 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:50:52,918 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:50:52,919 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:50:52] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:50:57,499 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 16:50:57,499 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 16:50:57,506 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:50:57,535 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:50:57,536 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:50:57,537 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:50:57,538 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:50:57,538 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 16:50:57,543 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±nda']
2025-08-01 16:50:57,893 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 16:50:57,901 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 16:50:57,925 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 16:50:57,925 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 16:50:58,847 - __main__ - INFO - Gemini API call successful
2025-08-01 16:50:58,865 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH ()-[r]-() RETURN count(r)
2025-08-01 16:50:58,865 - __main__ - INFO - Generated Cypher: MATCH ()-[r]-() RETURN count(r)
2025-08-01 16:50:58,912 - __main__ - INFO - Query results: 1 rows
2025-08-01 16:50:58,913 - __main__ - INFO - Generating answer for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 16:51:02,630 - __main__ - INFO - Gemini API call successful
2025-08-01 16:51:02,654 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 16:51:02,662 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:51:02] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 16:51:22,837 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:51:22,858 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:51:22,858 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:51:22,859 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:51:22,859 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:51:22,860 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:51:22] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:51:28,524 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:51:28] "GET / HTTP/1.1" 200 -
2025-08-01 16:51:28,551 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:51:28,556 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:51:28] "GET /api/history HTTP/1.1" 200 -
2025-08-01 16:51:28,585 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:51:28,586 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:51:28,587 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:51:28,587 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:51:28,588 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:51:28,600 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:51:28,629 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:51:28,630 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:51:28,631 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:51:28,631 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:51:28,632 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:51:37,946 - __main__ - INFO - Received question: ili≈üki tipleri nelerdir
2025-08-01 16:51:37,946 - __main__ - INFO - Generating Cypher for question: ili≈üki tipleri nelerdir
2025-08-01 16:51:37,951 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:51:37,983 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:51:37,984 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:51:37,985 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:51:37,985 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:51:37,986 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: ili≈üki tipleri nelerdir
2025-08-01 16:51:37,993 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-01 16:51:38,380 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 16:51:38,404 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 16:51:38,404 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 16:51:39,161 - __main__ - INFO - Gemini API call successful
2025-08-01 16:51:39,185 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH ()-[r]->() RETURN DISTINCT type(r)
2025-08-01 16:51:39,186 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN DISTINCT type(r)
2025-08-01 16:51:39,247 - __main__ - INFO - Query results: 2 rows
2025-08-01 16:51:39,248 - __main__ - INFO - Generating answer for question: ili≈üki tipleri nelerdir
2025-08-01 16:51:43,040 - __main__ - INFO - Gemini API call successful
2025-08-01 16:51:43,093 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 16:51:43,106 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:51:43] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 16:51:59,259 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:51:59,282 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:51:59,283 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:51:59,284 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:51:59,285 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:51:59,286 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:51:59] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:52:27,546 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:52:27] "GET / HTTP/1.1" 200 -
2025-08-01 16:52:27,582 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:52:27,588 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:52:27] "GET /api/history HTTP/1.1" 200 -
2025-08-01 16:52:27,624 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:52:27,626 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:52:27,629 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:52:27,631 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:52:27,634 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:52:27] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:52:27,651 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:52:27,695 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:52:27,696 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:52:27,698 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:52:27,698 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:52:27,701 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:52:27] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:52:58,256 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:52:58,274 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:52:58,275 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:52:58,275 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:52:58,276 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:52:58,276 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:52:58] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:53:28,262 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:53:28,284 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:53:28,285 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:53:28,286 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:53:28,287 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:53:28,288 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:53:58,254 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:53:58,281 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:53:58,281 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:53:58,283 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:53:58,283 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:53:58,284 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:53:58] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:54:28,249 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:54:28,270 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:54:28,271 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:54:28,272 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:54:28,272 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:54:28,273 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:54:58,251 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:54:58,273 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:54:58,273 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:54:58,274 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:54:58,275 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:54:58,275 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:54:58] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:55:28,241 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:55:28,269 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:55:28,270 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:55:28,271 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:55:28,272 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:55:28,273 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:55:34,543 - __main__ - INFO - Gemini API configured with model: gemini-1.5-flash
2025-08-01 16:55:34,543 - embeddings - INFO - Embedding manager initialized successfully
2025-08-01 16:55:34,543 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-01 16:55:36,637 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-01 16:55:36,638 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-01 16:55:36,642 - embeddings - INFO - Semantic vector index created
2025-08-01 16:55:36,643 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-01 16:55:36,647 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-01 16:55:36,648 - __main__ - INFO - Neo4j available: True
2025-08-01 16:55:36,648 - __main__ - INFO - Gemini API available: True
2025-08-01 16:55:36,648 - __main__ - INFO - Gemini model: gemini-1.5-flash
2025-08-01 16:55:36,696 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-01 16:55:36,696 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-01 16:55:58,249 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:55:58,270 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:55:58,270 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:55:58,271 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:55:58,272 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:55:58,272 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:55:58] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:56:22,047 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-01 16:56:22,048 - embeddings - INFO - Embedding manager initialized successfully
2025-08-01 16:56:22,048 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-01 16:56:24,122 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-01 16:56:24,122 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-01 16:56:24,128 - embeddings - INFO - Semantic vector index created
2025-08-01 16:56:24,129 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-01 16:56:24,133 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-01 16:56:24,134 - __main__ - INFO - Neo4j available: True
2025-08-01 16:56:24,134 - __main__ - INFO - Gemini API available: True
2025-08-01 16:56:24,135 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-01 16:56:24,193 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-01 16:56:24,194 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-01 16:56:30,247 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:56:30,276 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:56:30,277 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:56:30,278 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:56:30,279 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:56:30,279 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:56:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:56:43,832 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:56:43] "GET /?id=2b06300a-250d-455c-b2da-c7d4ca311f70&vscodeBrowserReqId=1754056603810 HTTP/1.1" 200 -
2025-08-01 16:56:44,223 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:56:44,261 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:56:44,267 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:56:44,269 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:56:44,272 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:56:44,274 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:56:44] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:56:44,450 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:56:44] "GET /api/history HTTP/1.1" 200 -
2025-08-01 16:56:44,463 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:56:44,535 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:56:44,562 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:56:44,571 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:56:44,591 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:56:44,601 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:56:44] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:56:47,460 - __main__ - INFO - Received question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 16:56:47,460 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 16:56:47,470 - __main__ - INFO - Using cached Cypher query
2025-08-01 16:56:47,470 - __main__ - INFO - Generated Cypher: CALL db.labels() YIELD label RETURN label
2025-08-01 16:56:47,475 - __main__ - INFO - Query results: 4 rows
2025-08-01 16:56:47,475 - __main__ - INFO - Generating answer for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 16:56:47,482 - __main__ - INFO - Using cached answer
2025-08-01 16:56:47,489 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:56:47] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 16:56:51,966 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:56:51] "GET /?id=2b06300a-250d-455c-b2da-c7d4ca311f70&vscodeBrowserReqId=1754056611919 HTTP/1.1" 200 -
2025-08-01 16:56:52,002 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:56:52] "GET /api/history HTTP/1.1" 200 -
2025-08-01 16:56:52,003 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:56:52,034 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:56:52,035 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:56:52,036 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:56:52,037 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:56:52,037 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:56:52] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:56:52,051 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:56:52,084 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:56:52,085 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:56:52,087 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:56:52,088 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:56:52,089 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:56:52] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:57:11,354 - __main__ - INFO - Received question: √ºr√ºnlerin yorum √∂zelliklerini getir
2025-08-01 16:57:11,355 - __main__ - INFO - Generating Cypher for question: √ºr√ºnlerin yorum √∂zelliklerini getir
2025-08-01 16:57:11,362 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:57:11,392 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:57:11,393 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:57:11,394 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:57:11,395 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:57:11,396 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: √ºr√ºnlerin yorum √∂zelliklerini getir
2025-08-01 16:57:11,401 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-01 16:57:11,867 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 16:57:11,897 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 16:57:11,898 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 16:57:13,518 - __main__ - INFO - Gemini API call successful
2025-08-01 16:57:13,560 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) RETURN p.comment, p.total_product_comment_count, p.sentiment_id, p.toplam_urun_yorum_sayisi, p.yorum, p.total_product_reviews, p.review_summary, p.total_reviews
2025-08-01 16:57:13,561 - __main__ - INFO - Generated Cypher: MATCH (p:Product) RETURN p.comment, p.total_product_comment_count, p.sentiment_id, p.toplam_urun_yorum_sayisi, p.yorum, p.total_product_reviews, p.review_summary, p.total_reviews
2025-08-01 16:57:13,735 - __main__ - INFO - Query results: 20 rows
2025-08-01 16:57:13,736 - __main__ - INFO - Generating answer for question: √ºr√ºnlerin yorum √∂zelliklerini getir
2025-08-01 16:57:21,999 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:57:22,020 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:57:22,023 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:57:22,023 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:57:22,024 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:57:22,025 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:57:22] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:57:30,244 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:57:30,265 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:57:30,265 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:57:30,266 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:57:30,267 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:57:30,268 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:57:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:57:32,318 - __main__ - INFO - Gemini API call successful
2025-08-01 16:57:32,344 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 16:57:32,351 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:57:32] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 16:57:52,008 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:57:52,044 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:57:52,045 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:57:52,046 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:57:52,046 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:57:52,047 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:57:52] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:58:02,282 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:58:02,313 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:58:02,314 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:58:02,315 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:58:02,316 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:58:02,317 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:58:02] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:58:21,995 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:58:22,041 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:58:22,041 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:58:22,042 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:58:22,042 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:58:22,043 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:58:22] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:58:28,234 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:58:28,252 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:58:28,253 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:58:28,254 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:58:28,254 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:58:28,255 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:59:05,809 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-01 16:59:05,809 - embeddings - INFO - Embedding manager initialized successfully
2025-08-01 16:59:05,810 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-01 16:59:07,905 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-01 16:59:07,905 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-01 16:59:07,909 - embeddings - INFO - Semantic vector index created
2025-08-01 16:59:07,910 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-01 16:59:07,915 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-01 16:59:07,915 - __main__ - INFO - Neo4j available: True
2025-08-01 16:59:07,915 - __main__ - INFO - Gemini API available: True
2025-08-01 16:59:07,915 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-01 16:59:07,967 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-01 16:59:07,968 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-01 16:59:09,230 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:59:09] "GET / HTTP/1.1" 200 -
2025-08-01 16:59:09,256 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:59:09,266 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:59:09] "GET /api/history HTTP/1.1" 200 -
2025-08-01 16:59:09,307 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:59:09,310 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:59:09,312 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:59:09,313 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:59:09,314 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:59:09] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:59:09,334 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:59:09,366 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:59:09,366 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:59:09,367 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:59:09,368 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:59:09,369 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:59:09] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:59:39,260 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:59:39,289 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:59:39,290 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:59:39,291 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:59:39,291 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:59:39,292 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:59:39] "GET /api/health HTTP/1.1" 200 -
2025-08-01 16:59:44,113 - __main__ - INFO - Received question: Samsung Odyssey G5 hakkƒ±nda bilgi ver
2025-08-01 16:59:44,113 - __main__ - INFO - Generating Cypher for question: Samsung Odyssey G5 hakkƒ±nda bilgi ver
2025-08-01 16:59:44,122 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 16:59:44,158 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:59:44,159 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 16:59:44,160 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 16:59:44,160 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 16:59:44,160 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Samsung Odyssey G5 hakkƒ±nda bilgi ver
2025-08-01 16:59:44,169 - graphrag_pipeline - INFO - Extracted entities: ['Samsung', 'Odyssey']
2025-08-01 16:59:44,724 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 16:59:44,833 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 16:59:44,872 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 16:59:44,872 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 16:59:45,817 - __main__ - INFO - Gemini API call successful
2025-08-01 16:59:45,853 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) WHERE p.name CONTAINS 'Samsung Odyssey G5' RETURN p
2025-08-01 16:59:45,854 - __main__ - INFO - Generated Cypher: MATCH (p:Product) WHERE p.name CONTAINS 'Samsung Odyssey G5' RETURN p
2025-08-01 16:59:45,939 - __main__ - INFO - Query results: 1 rows
2025-08-01 16:59:45,939 - __main__ - INFO - Generating answer for question: Samsung Odyssey G5 hakkƒ±nda bilgi ver
2025-08-01 16:59:51,732 - __main__ - INFO - Gemini API call successful
2025-08-01 16:59:51,791 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 16:59:51,800 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 16:59:51] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:00:10,231 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:00:10,249 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:00:10,249 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:00:10,250 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:00:10,250 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:00:10,251 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:00:10] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:00:39,259 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:00:39,281 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:00:39,281 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:00:39,282 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:00:39,283 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:00:39,284 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:00:39] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:01:10,231 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:01:10,248 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:01:10,249 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:01:10,249 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:01:10,250 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:01:10,250 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:01:10] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:01:18,030 - __main__ - INFO - Received question: Fornax V2 √ºr√ºn√ºne yapƒ±lan yorum u getir
2025-08-01 17:01:18,030 - __main__ - INFO - Generating Cypher for question: Fornax V2 √ºr√ºn√ºne yapƒ±lan yorum u getir
2025-08-01 17:01:18,036 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:01:18,060 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:01:18,060 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:01:18,062 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:01:18,062 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:01:18,063 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Fornax V2 √ºr√ºn√ºne yapƒ±lan yorum u getir
2025-08-01 17:01:18,072 - graphrag_pipeline - INFO - Extracted entities: ['Fornax']
2025-08-01 17:01:18,465 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:01:18,474 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 17:01:18,513 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:01:18,513 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:01:19,666 - __main__ - INFO - Gemini API call successful
2025-08-01 17:01:19,698 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) WHERE p.name CONTAINS 'Fornax V2' RETURN p
2025-08-01 17:01:19,698 - __main__ - INFO - Generated Cypher: MATCH (p:Product) WHERE p.name CONTAINS 'Fornax V2' RETURN p
2025-08-01 17:01:19,734 - __main__ - INFO - Query results: 1 rows
2025-08-01 17:01:19,734 - __main__ - INFO - Generating answer for question: Fornax V2 √ºr√ºn√ºne yapƒ±lan yorum u getir
2025-08-01 17:01:25,533 - __main__ - INFO - Gemini API call successful
2025-08-01 17:01:25,565 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:01:25,573 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:01:25] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:01:39,263 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:01:39,284 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:01:39,285 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:01:39,287 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:01:39,288 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:01:39,289 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:01:39] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:02:10,236 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:02:10,255 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:02:10,256 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:02:10,257 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:02:10,257 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:02:10,257 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:02:10] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:02:37,302 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-01 17:02:37,303 - embeddings - INFO - Embedding manager initialized successfully
2025-08-01 17:02:37,303 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-01 17:02:39,408 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-01 17:02:39,408 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-01 17:02:39,413 - embeddings - INFO - Semantic vector index created
2025-08-01 17:02:39,415 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-01 17:02:39,420 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-01 17:02:39,421 - __main__ - INFO - Neo4j available: True
2025-08-01 17:02:39,421 - __main__ - INFO - Gemini API available: True
2025-08-01 17:02:39,421 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-01 17:02:39,478 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-01 17:02:39,479 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-01 17:02:40,228 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:02:40,252 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:02:40,253 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:02:40,253 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:02:40,255 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:02:40,257 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:02:40] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:02:41,998 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:02:41] "GET / HTTP/1.1" 200 -
2025-08-01 17:02:42,025 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:02:42,032 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:02:42] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:02:42,067 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:02:42,068 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:02:42,069 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:02:42,070 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:02:42,072 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:02:42] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:02:42,085 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:02:42,117 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:02:42,118 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:02:42,118 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:02:42,119 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:02:42,119 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:02:42] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:03:12,034 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:03:12,056 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:03:12,056 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:03:12,057 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:03:12,057 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:03:12,058 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:03:12] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:03:19,176 - __main__ - INFO - Received question: Razer BlackWidow V4 RZ03-04691200-R3L1 Green Switch TR Q RGB Kablolu Mekanik Gaming (Oyuncu) Klavye adlƒ± √ºr√ºn√ºn tipi ve markasƒ± nedir?
2025-08-01 17:03:19,176 - __main__ - INFO - Generating Cypher for question: Razer BlackWidow V4 RZ03-04691200-R3L1 Green Switch TR Q RGB Kablolu Mekanik Gaming (Oyuncu) Klavye adlƒ± √ºr√ºn√ºn tipi ve markasƒ± nedir?
2025-08-01 17:03:19,190 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:03:19,223 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:03:19,223 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:03:19,224 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:03:19,224 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:03:19,225 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Razer BlackWidow V4 RZ03-04691200-R3L1 Green Switch TR Q RGB Kablolu Mekanik Gaming (Oyuncu) Klavye adlƒ± √ºr√ºn√ºn tipi ve markasƒ± nedir?
2025-08-01 17:03:19,236 - graphrag_pipeline - INFO - Extracted entities: ['Oyuncu', 'RGB', 'Kablolu', 'Klavye', 'Switch', 'BlackWidow', 'Gaming', 'Razer', 'Green', 'Mekanik']
2025-08-01 17:03:19,891 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:03:19,903 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 17:03:19,942 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:03:19,942 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:03:21,671 - __main__ - INFO - Gemini API call successful
2025-08-01 17:03:21,709 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product {name: 'Razer BlackWidow V4 RZ03-04691200-R3L1 Green Switch TR Q RGB Kablolu Mekanik Gaming (Oyuncu) Klavye'})-[r1:TYPE]->(c:Category), (p)-[r2:BRAND]->(b:Brand) RETURN c, b
2025-08-01 17:03:21,710 - __main__ - INFO - Generated Cypher: MATCH (p:Product {name: 'Razer BlackWidow V4 RZ03-04691200-R3L1 Green Switch TR Q RGB Kablolu Mekanik Gaming (Oyuncu) Klavye'})-[r1:TYPE]->(c:Category), (p)-[r2:BRAND]->(b:Brand) RETURN c, b
2025-08-01 17:03:21,904 - __main__ - INFO - Query results: 1 rows
2025-08-01 17:03:21,908 - __main__ - INFO - Generating answer for question: Razer BlackWidow V4 RZ03-04691200-R3L1 Green Switch TR Q RGB Kablolu Mekanik Gaming (Oyuncu) Klavye adlƒ± √ºr√ºn√ºn tipi ve markasƒ± nedir?
2025-08-01 17:03:24,556 - __main__ - INFO - Gemini API call successful
2025-08-01 17:03:24,592 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:03:24,601 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:03:24] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:03:42,226 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:03:42,248 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:03:42,248 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:03:42,249 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:03:42,249 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:03:42,250 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:03:42] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:04:12,229 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:04:12,247 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:04:12,248 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:04:12,249 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:04:12,250 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:04:12,251 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:04:12] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:04:42,226 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:04:42,244 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:04:42,244 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:04:42,245 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:04:42,245 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:04:42,246 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:04:42] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:05:12,224 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:05:12,245 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:05:12,246 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:05:12,247 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:05:12,247 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:05:12,248 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:05:12] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:05:42,225 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:05:42,247 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:05:42,248 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:05:42,249 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:05:42,249 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:05:42,249 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:05:42] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:06:12,226 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:06:12,248 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:06:12,248 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:06:12,249 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:06:12,249 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:06:12,250 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:06:12] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:07:13,223 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:07:13,240 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:07:13,240 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:07:13,241 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:07:13,242 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:07:13,242 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:07:13] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:13:05,079 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-01 17:13:05,079 - embeddings - INFO - Embedding manager initialized successfully
2025-08-01 17:13:05,079 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-01 17:13:07,138 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-01 17:13:07,138 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-01 17:13:07,144 - embeddings - INFO - Semantic vector index created
2025-08-01 17:13:07,146 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-01 17:13:07,150 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-01 17:13:07,151 - __main__ - INFO - Neo4j available: True
2025-08-01 17:13:07,151 - __main__ - INFO - Gemini API available: True
2025-08-01 17:13:07,152 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-01 17:13:07,153 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-01 17:13:07,285 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-01 17:13:07,285 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-01 17:13:19,031 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:13:19,050 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:13:19,051 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:13:19,051 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:13:19,052 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:13:19,053 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:13:19] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:13:33,937 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:13:33] "GET /?id=c7166be5-1f7c-4789-9462-4500502293d3&vscodeBrowserReqId=1754057613897 HTTP/1.1" 200 -
2025-08-01 17:13:34,225 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:13:34,259 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:13:34,259 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:13:34,261 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:13:34,261 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:13:34,262 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:13:34] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:13:34,386 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:13:34] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:13:34,395 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:13:34,426 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:13:34,427 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:13:34,428 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:13:34,429 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:13:34,430 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:13:34] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:13:39,278 - __main__ - INFO - Received question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-01 17:13:39,279 - __main__ - INFO - Generating Cypher for question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-01 17:13:39,292 - __main__ - INFO - üìä Schema cache expired/missing, fetching fresh schema...
2025-08-01 17:13:39,293 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:13:39,324 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:13:39,325 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:13:39,325 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:13:39,326 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:13:39,459 - __main__ - INFO - üìä Fresh schema cached successfully
2025-08-01 17:13:39,459 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-01 17:13:39,480 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-01 17:13:40,232 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:13:40,296 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:13:40,297 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:13:41,823 - __main__ - INFO - Gemini API call successful
2025-08-01 17:13:41,924 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n)
WITH n, size((n)-[]-()) AS degree
WHERE degree > 0
RETURN n, degree
ORDER BY degree DESC
2025-08-01 17:13:41,926 - __main__ - INFO - Generated Cypher: MATCH (n)
WITH n, size((n)-[]-()) AS degree
WHERE degree > 0
RETURN n, degree
ORDER BY degree DESC
2025-08-01 17:13:41,966 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.SyntaxError} {message: A pattern expression should only be used in order to test the existence of a pattern. It can no longer be used inside the function size(), an alternative is to replace size() with COUNT {}. (line 2, column 14 (offset: 23))
"WITH n, size((n)-[]-()) AS degree"
              ^}
2025-08-01 17:13:41,968 - __main__ - ERROR - Failed to execute query: MATCH (n)
WITH n, size((n)-[]-()) AS degree
WHERE degree > 0
RETURN n, degree
ORDER BY degree DESC
2025-08-01 17:13:41,971 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.SyntaxError} {message: A pattern expression should only be used in order to test the existence of a pattern. It can no longer be used inside the function size(), an alternative is to replace size() with COUNT {}. (line 2, column 14 (offset: 23))
"WITH n, size((n)-[]-()) AS degree"
              ^}
2025-08-01 17:13:41,973 - __main__ - INFO - Query results: 0 rows
2025-08-01 17:13:41,976 - __main__ - INFO - Generating answer for question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-01 17:13:44,403 - __main__ - INFO - Gemini API call successful
2025-08-01 17:13:44,447 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:13:44,456 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:13:44] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:14:04,218 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:14:04,272 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:04,273 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:14:04,274 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:04,274 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:14:04,275 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:04] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:14:20,019 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:14:20,047 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:20,048 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:14:20,049 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:20,049 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:14:20,050 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:20] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:14:39,239 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-01 17:14:39,240 - embeddings - INFO - Embedding manager initialized successfully
2025-08-01 17:14:39,240 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-01 17:14:41,319 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-01 17:14:41,320 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-01 17:14:41,323 - embeddings - INFO - Semantic vector index created
2025-08-01 17:14:41,324 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-01 17:14:41,328 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-01 17:14:41,329 - __main__ - INFO - Neo4j available: True
2025-08-01 17:14:41,329 - __main__ - INFO - Gemini API available: True
2025-08-01 17:14:41,329 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-01 17:14:41,330 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-01 17:14:41,395 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-01 17:14:41,396 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-01 17:14:43,240 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:43] "GET / HTTP/1.1" 200 -
2025-08-01 17:14:43,287 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:14:43,327 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:43,328 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:14:43,329 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:43,330 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:14:43,332 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:43] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:14:43,524 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:43] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:14:43,541 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:14:43,578 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:43,579 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:14:43,582 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:43,583 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:14:43,584 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:43] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:14:46,917 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:46] "GET / HTTP/1.1" 200 -
2025-08-01 17:14:46,942 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:14:46,949 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:46] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:14:46,974 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:46,975 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:14:46,976 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:46,976 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:14:46,977 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:46] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:14:46,992 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:14:47,015 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:47,016 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:14:47,018 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:47,018 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:14:47,019 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:47] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:14:47,775 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:47] "GET / HTTP/1.1" 200 -
2025-08-01 17:14:47,800 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:14:47,805 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:47] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:14:47,838 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:47,839 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:14:47,839 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:47,840 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:14:47,841 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:47] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:14:47,857 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:14:47,882 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:47,883 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:14:47,884 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:47,884 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:14:47,885 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:47] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:14:48,090 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:48] "GET / HTTP/1.1" 200 -
2025-08-01 17:14:48,113 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:14:48,119 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:48] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:14:48,155 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:48,156 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:14:48,157 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:48,158 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:14:48,159 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:48] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:14:48,176 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:14:48,206 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:48,207 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:14:48,208 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:48,209 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:14:48,209 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:48] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:14:48,264 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:48] "GET / HTTP/1.1" 200 -
2025-08-01 17:14:48,290 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:14:48,296 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:48] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:14:48,322 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:48,323 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:14:48,325 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:48,325 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:14:48,326 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:48] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:14:48,341 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:14:48,370 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:48,371 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:14:48,372 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:48,372 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:14:48,373 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:48] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:14:48,426 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:48] "GET / HTTP/1.1" 200 -
2025-08-01 17:14:48,453 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:14:48,459 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:48] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:14:48,483 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:48,484 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:14:48,485 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:48,485 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:14:48,486 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:48] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:14:48,501 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:14:48,524 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:48,525 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:14:48,526 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:14:48,526 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:14:48,527 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:14:48] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:15:00,121 - __main__ - INFO - Received question: Elinde ka√ß tana d√ºƒü√ºm var
2025-08-01 17:15:00,122 - __main__ - INFO - Generating Cypher for question: Elinde ka√ß tana d√ºƒü√ºm var
2025-08-01 17:15:00,132 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 24.4s)
2025-08-01 17:15:00,132 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\neo4j_chat\app.py", line 1040, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\neo4j_chat\app.py", line 779, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\neo4j_chat\app.py", line 352, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-01 17:15:00,141 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:00] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-01 17:15:06,060 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:06] "GET / HTTP/1.1" 200 -
2025-08-01 17:15:06,084 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:15:06,090 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:06] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:15:06,116 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:06,117 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:15:06,119 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:06,120 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:15:06,121 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:06] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:15:06,136 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:15:06,168 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:06,168 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:15:06,172 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:06,175 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:15:06,176 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:06] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:15:06,997 - __main__ - INFO - Received question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 17:15:06,998 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 17:15:07,021 - __main__ - INFO - Using cached Cypher query
2025-08-01 17:15:07,021 - __main__ - INFO - Generated Cypher: CALL db.labels() YIELD label RETURN label
2025-08-01 17:15:07,029 - __main__ - INFO - Query results: 4 rows
2025-08-01 17:15:07,029 - __main__ - INFO - Generating answer for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 17:15:07,041 - __main__ - INFO - Using cached answer
2025-08-01 17:15:07,049 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:07] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:15:08,676 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:08] "GET / HTTP/1.1" 200 -
2025-08-01 17:15:08,707 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:15:08,709 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:08] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:15:08,742 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:08,743 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:15:08,745 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:08,745 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:15:08,746 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:08] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:15:08,764 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:15:08,790 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:08,791 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:15:08,792 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:08,794 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:15:08,794 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:08] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:15:09,316 - __main__ - INFO - Received question: En b√ºy√ºk baƒülƒ± bile≈üen nedir?
2025-08-01 17:15:09,316 - __main__ - INFO - Generating Cypher for question: En b√ºy√ºk baƒülƒ± bile≈üen nedir?
2025-08-01 17:15:09,327 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 33.6s)
2025-08-01 17:15:09,327 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\neo4j_chat\app.py", line 1040, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\neo4j_chat\app.py", line 779, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\neo4j_chat\app.py", line 352, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-01 17:15:09,331 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:09] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-01 17:15:10,281 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:10] "GET / HTTP/1.1" 200 -
2025-08-01 17:15:10,307 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:15:10,313 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:10] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:15:10,344 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:10,345 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:15:10,345 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:10,346 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:15:10,347 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:10] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:15:10,361 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:15:10,380 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:10,380 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:15:10,381 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:10,381 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:15:10,382 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:10] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:15:11,013 - __main__ - INFO - Received question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-01 17:15:11,014 - __main__ - INFO - Generating Cypher for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-01 17:15:11,025 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 35.3s)
2025-08-01 17:15:11,026 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\neo4j_chat\app.py", line 1040, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\neo4j_chat\app.py", line 779, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\neo4j_chat\app.py", line 352, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-01 17:15:11,030 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:11] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-01 17:15:11,931 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:11] "GET / HTTP/1.1" 200 -
2025-08-01 17:15:11,957 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:15:11,963 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:11] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:15:11,997 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:11,998 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:15:11,999 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:12,001 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:15:12,002 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:12] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:15:12,016 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:15:12,043 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:12,044 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:15:12,045 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:12,045 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:15:12,046 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:12] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:15:12,680 - __main__ - INFO - Received question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-01 17:15:12,681 - __main__ - INFO - Generating Cypher for question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-01 17:15:12,691 - __main__ - INFO - Using cached Cypher query
2025-08-01 17:15:12,692 - __main__ - INFO - Generated Cypher: MATCH (n)
WITH n, size((n)-[]-()) AS degree
WHERE degree > 0
RETURN n, degree
ORDER BY degree DESC
2025-08-01 17:15:12,705 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.SyntaxError} {message: A pattern expression should only be used in order to test the existence of a pattern. It can no longer be used inside the function size(), an alternative is to replace size() with COUNT {}. (line 2, column 14 (offset: 23))
"WITH n, size((n)-[]-()) AS degree"
              ^}
2025-08-01 17:15:12,706 - __main__ - ERROR - Failed to execute query: MATCH (n)
WITH n, size((n)-[]-()) AS degree
WHERE degree > 0
RETURN n, degree
ORDER BY degree DESC
2025-08-01 17:15:12,707 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.SyntaxError} {message: A pattern expression should only be used in order to test the existence of a pattern. It can no longer be used inside the function size(), an alternative is to replace size() with COUNT {}. (line 2, column 14 (offset: 23))
"WITH n, size((n)-[]-()) AS degree"
              ^}
2025-08-01 17:15:12,708 - __main__ - INFO - Query results: 0 rows
2025-08-01 17:15:12,709 - __main__ - INFO - Generating answer for question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-01 17:15:12,721 - __main__ - INFO - Using cached answer
2025-08-01 17:15:12,729 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:12] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:15:13,660 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:13] "GET / HTTP/1.1" 200 -
2025-08-01 17:15:13,682 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:15:13,686 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:13] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:15:13,720 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:13,721 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:15:13,722 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:13,723 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:15:13,725 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:13] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:15:13,740 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:15:13,765 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:13,766 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:15:13,768 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:13,769 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:15:13,770 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:13] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:15:26,381 - __main__ - INFO - Received question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-01 17:15:26,382 - __main__ - INFO - Generating Cypher for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-01 17:15:26,389 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 50.6s)
2025-08-01 17:15:26,389 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\neo4j_chat\app.py", line 1040, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\neo4j_chat\app.py", line 779, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\neo4j_chat\app.py", line 352, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-01 17:15:26,392 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:26] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-01 17:15:43,993 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:15:44,016 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:44,018 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:15:44,019 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:15:44,019 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:15:44,020 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:15:44] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:16:13,978 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:16:13,998 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:16:13,998 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:16:13,999 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:16:13,999 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:16:13,999 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:16:13] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:16:43,969 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:16:43,986 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:16:43,987 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:16:43,988 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:16:43,989 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:16:43,990 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:16:43] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:17:13,968 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:17:13,987 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:17:13,987 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:17:13,988 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:17:13,989 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:17:13,990 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:17:13] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:17:43,954 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:17:43,974 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:17:43,974 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:17:43,975 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:17:43,976 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:17:43,977 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:17:43] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:18:13,956 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:18:13,976 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:18:13,976 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, collect(DISTINCT toString(prop_value))[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:18:13,977 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:18:13,977 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:18:13,978 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:18:13] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:19:06,369 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-01 17:19:06,370 - embeddings - INFO - Embedding manager initialized successfully
2025-08-01 17:19:06,370 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-01 17:19:08,436 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-01 17:19:08,436 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-01 17:19:08,466 - embeddings - INFO - Semantic vector index created
2025-08-01 17:19:08,467 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-01 17:19:08,471 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-01 17:19:08,472 - __main__ - INFO - Neo4j available: True
2025-08-01 17:19:08,472 - __main__ - INFO - Gemini API available: True
2025-08-01 17:19:08,472 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-01 17:19:08,473 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-01 17:19:08,535 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-01 17:19:08,536 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-01 17:19:29,953 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:19:30,237 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:19:30,242 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:19:30,245 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:19:30,246 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:19:30,249 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:19:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:19:30,556 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:19:30] "GET /?id=e1f549fb-9d8c-46b5-b68d-115d58d8f651&vscodeBrowserReqId=1754057970193 HTTP/1.1" 200 -
2025-08-01 17:19:30,772 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:19:30,797 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:19:30,799 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:19:30,802 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:19:30,802 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:19:30,804 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:19:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:19:30,963 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:19:30] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:19:31,130 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:19:31,153 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:19:31,154 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:19:31,157 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:19:31,158 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:19:31,159 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:19:31] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:19:32,326 - __main__ - INFO - Received question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-01 17:19:32,326 - __main__ - INFO - Generating Cypher for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-01 17:19:32,336 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 27.7s)
2025-08-01 17:19:32,336 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\neo4j_chat\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\neo4j_chat\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\neo4j_chat\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-01 17:19:32,343 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:19:32] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-01 17:20:04,473 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-01 17:20:04,474 - embeddings - INFO - Embedding manager initialized successfully
2025-08-01 17:20:04,474 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-01 17:20:06,545 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-01 17:20:06,546 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-01 17:20:06,550 - embeddings - INFO - Semantic vector index created
2025-08-01 17:20:06,551 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-01 17:20:06,555 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-01 17:20:06,555 - __main__ - INFO - Neo4j available: True
2025-08-01 17:20:06,556 - __main__ - INFO - Gemini API available: True
2025-08-01 17:20:06,556 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-01 17:20:06,557 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-01 17:20:06,611 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-01 17:20:06,612 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-01 17:20:13,633 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:20:13,652 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:13,653 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:20:13,653 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:13,654 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:20:13,655 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:13] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:20:14,034 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:14] "GET / HTTP/1.1" 200 -
2025-08-01 17:20:14,061 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:20:14,067 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:14] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:20:14,100 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:14,101 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:20:14,102 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:14,103 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:20:14,104 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:14] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:20:14,120 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:20:14,151 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:14,152 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:20:14,153 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:14,153 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:20:14,154 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:14] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:20:16,025 - __main__ - INFO - Received question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 17:20:16,025 - __main__ - INFO - Generating Cypher for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 17:20:16,028 - __main__ - INFO - üìä Schema cache expired/missing, fetching fresh schema...
2025-08-01 17:20:16,028 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:20:16,054 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:16,054 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:20:16,055 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:16,056 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:20:16,068 - __main__ - INFO - üìä Fresh schema cached successfully
2025-08-01 17:20:16,069 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 17:20:16,072 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±']
2025-08-01 17:20:16,652 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:20:16,666 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 17:20:16,679 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:20:16,680 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:20:17,744 - __main__ - INFO - Gemini API call successful
2025-08-01 17:20:17,754 - __main__ - INFO - Generated Cypher with GraphRAG: CALL db.schema.visualization()
2025-08-01 17:20:17,754 - __main__ - INFO - Generated Cypher: CALL db.schema.visualization()
2025-08-01 17:20:17,843 - __main__ - INFO - Query results: 1 rows
2025-08-01 17:20:17,844 - __main__ - INFO - Generating answer for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 17:20:23,210 - __main__ - INFO - Gemini API call successful
2025-08-01 17:20:23,221 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:20:23,232 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:23] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:20:30,940 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:20:30,964 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:30,964 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:20:30,966 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:30,966 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:20:30,967 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:20:35,263 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:35] "GET / HTTP/1.1" 200 -
2025-08-01 17:20:35,294 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:20:35,299 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:35] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:20:35,333 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:35,335 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:20:35,337 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:35,338 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:20:35,339 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:35] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:20:35,352 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:20:35,383 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:35,384 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:20:35,386 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:35,389 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:20:35,391 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:35] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:20:36,945 - __main__ - INFO - Received question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 17:20:36,945 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 17:20:36,948 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 20.9s)
2025-08-01 17:20:36,949 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 17:20:36,954 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±ndaki']
2025-08-01 17:20:37,305 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:20:37,311 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 17:20:37,329 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:20:37,330 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:20:38,237 - __main__ - INFO - Gemini API call successful
2025-08-01 17:20:38,269 - __main__ - INFO - Generated Cypher with GraphRAG: CALL db.labels()
2025-08-01 17:20:38,269 - __main__ - INFO - Generated Cypher: CALL db.labels()
2025-08-01 17:20:38,277 - __main__ - INFO - Query results: 4 rows
2025-08-01 17:20:38,277 - __main__ - INFO - Generating answer for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 17:20:41,636 - __main__ - INFO - Gemini API call successful
2025-08-01 17:20:41,650 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:20:41,674 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:41] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:20:46,943 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:46] "GET / HTTP/1.1" 200 -
2025-08-01 17:20:46,978 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:20:46,987 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:46] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:20:47,073 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:47,074 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:20:47,075 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:47,075 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:20:47,076 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:47] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:20:47,088 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:20:47,112 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:47,112 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:20:47,114 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:20:47,115 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:20:47,117 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:47] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:20:54,442 - __main__ - INFO - Received question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 17:20:54,443 - __main__ - INFO - Generating Cypher for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 17:20:54,447 - __main__ - INFO - Using cached Cypher query
2025-08-01 17:20:54,448 - __main__ - INFO - Generated Cypher: CALL db.schema.visualization()
2025-08-01 17:20:54,456 - __main__ - INFO - Query results: 1 rows
2025-08-01 17:20:54,457 - __main__ - INFO - Generating answer for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 17:20:58,983 - __main__ - INFO - Gemini API call successful
2025-08-01 17:20:58,998 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:20:59,006 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:20:59] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:21:00,632 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:21:00,652 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:21:00,652 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:21:00,653 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:21:00,653 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:21:00,654 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:21:00] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:21:02,285 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:21:02] "GET / HTTP/1.1" 200 -
2025-08-01 17:21:02,314 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:21:02,317 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:21:02] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:21:02,349 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:21:02,350 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:21:02,351 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:21:02,351 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:21:02,353 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:21:02] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:21:02,368 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:21:02,398 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:21:02,399 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:21:02,400 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:21:02,400 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:21:02,401 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:21:02] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:21:23,443 - __main__ - INFO - Received question: Yorum: m√ºkemmel bir √ºr√ºn olmasada am5 sistem toplayacaklar i√ßin giri≈ü seviyesi bir anakart. ben aldƒ±m ≈üuanlƒ±k i≈üimi g√∂r√ºyor ama i≈ülemci kƒ±smƒ±na dikkat bu yorum hangi √ºr√ºne aittir
2025-08-01 17:21:23,443 - __main__ - INFO - Generating Cypher for question: Yorum: m√ºkemmel bir √ºr√ºn olmasada am5 sistem toplayacaklar i√ßin giri≈ü seviyesi bir anakart. ben aldƒ±m ≈üuanlƒ±k i≈üimi g√∂r√ºyor ama i≈ülemci kƒ±smƒ±na dikkat bu yorum hangi √ºr√ºne aittir
2025-08-01 17:21:23,447 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 67.4s)
2025-08-01 17:21:23,447 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Yorum: m√ºkemmel bir √ºr√ºn olmasada am5 sistem toplayacaklar i√ßin giri≈ü seviyesi bir anakart. ben aldƒ±m ≈üuanlƒ±k i≈üimi g√∂r√ºyor ama i≈ülemci kƒ±smƒ±na dikkat bu yorum hangi √ºr√ºne aittir
2025-08-01 17:21:23,451 - graphrag_pipeline - INFO - Extracted entities: ['Yorum']
2025-08-01 17:21:23,813 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:21:23,824 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 17:21:23,841 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:21:23,842 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:21:25,359 - __main__ - INFO - Gemini API call successful
2025-08-01 17:21:25,377 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) WHERE p.comment CONTAINS 'm√ºkemmel bir √ºr√ºn olmasada am5 sistem toplayacaklar i√ßin giri≈ü seviyesi bir anakart. ben aldƒ±m ≈üuanlƒ±k i≈üimi g√∂r√ºyor ama i≈ülemci kƒ±smƒ±na dikkat bu yorum hangi √ºr√ºne aittir' RETURN p
2025-08-01 17:21:25,378 - __main__ - INFO - Generated Cypher: MATCH (p:Product) WHERE p.comment CONTAINS 'm√ºkemmel bir √ºr√ºn olmasada am5 sistem toplayacaklar i√ßin giri≈ü seviyesi bir anakart. ben aldƒ±m ≈üuanlƒ±k i≈üimi g√∂r√ºyor ama i≈ülemci kƒ±smƒ±na dikkat bu yorum hangi √ºr√ºne aittir' RETURN p
2025-08-01 17:21:25,447 - __main__ - INFO - Query results: 0 rows
2025-08-01 17:21:25,448 - __main__ - INFO - Generating answer for question: Yorum: m√ºkemmel bir √ºr√ºn olmasada am5 sistem toplayacaklar i√ßin giri≈ü seviyesi bir anakart. ben aldƒ±m ≈üuanlƒ±k i≈üimi g√∂r√ºyor ama i≈ülemci kƒ±smƒ±na dikkat bu yorum hangi √ºr√ºne aittir
2025-08-01 17:21:29,468 - __main__ - INFO - Gemini API call successful
2025-08-01 17:21:29,485 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:21:29,494 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:21:29] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:21:30,937 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:21:30,955 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:21:30,956 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:21:30,957 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:21:30,957 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:21:30,958 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:21:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:21:32,319 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:21:32,336 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:21:32,336 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:21:32,337 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:21:32,338 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:21:32,338 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:21:32] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:22:00,618 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:22:00,637 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:22:00,638 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:22:00,639 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:22:00,640 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:22:00,641 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:22:00] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:22:02,919 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:22:02,939 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:22:02,940 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:22:02,941 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:22:02,941 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:22:02,942 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:22:02] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:22:20,869 - __main__ - INFO - Received question: comment yerine bir de yorum olarak dene √∂zelliƒüi
2025-08-01 17:22:20,870 - __main__ - INFO - Generating Cypher for question: comment yerine bir de yorum olarak dene √∂zelliƒüi
2025-08-01 17:22:20,873 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 124.8s)
2025-08-01 17:22:20,874 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: comment yerine bir de yorum olarak dene √∂zelliƒüi
2025-08-01 17:22:20,878 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-01 17:22:21,255 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:22:21,273 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:22:21,274 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:22:22,750 - __main__ - INFO - Gemini API call successful
2025-08-01 17:22:22,768 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) WHERE p.comment IS NOT NULL OR p.yorum IS NOT NULL RETURN p.comment, p.yorum
2025-08-01 17:22:22,769 - __main__ - INFO - Generated Cypher: MATCH (p:Product) WHERE p.comment IS NOT NULL OR p.yorum IS NOT NULL RETURN p.comment, p.yorum
2025-08-01 17:22:23,021 - __main__ - INFO - Query results: 8 rows
2025-08-01 17:22:23,022 - __main__ - INFO - Generating answer for question: comment yerine bir de yorum olarak dene √∂zelliƒüi
2025-08-01 17:22:27,802 - __main__ - INFO - Gemini API call successful
2025-08-01 17:22:27,819 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:22:27,828 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:22:27] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:22:30,928 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:22:30,955 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:22:30,955 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:22:30,956 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:22:30,956 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:22:30,957 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:22:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:22:32,301 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:22:32,344 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:22:32,344 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:22:32,345 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:22:32,346 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:22:32,346 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:22:32] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:23:00,615 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:23:00,637 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:23:00,638 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:23:00,639 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:23:00,639 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:23:00,640 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:23:00] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:23:02,304 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:23:02,327 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:23:02,328 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:23:02,329 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:23:02,329 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:23:02,330 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:23:02] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:23:06,735 - __main__ - INFO - Received question: √∂zellik: "Yorum" i√ßerik: m√ºkemmel bir √ºr√ºn olmasada am5 sistem toplayacaklar i√ßin giri≈ü seviyesi bir anakart. ben aldƒ±m ≈üuanlƒ±k i≈üimi g√∂r√ºyor ama i≈ülemci kƒ±smƒ±na dikkat 

bu hangi √ºr√ºne aittir
2025-08-01 17:23:06,735 - __main__ - INFO - Generating Cypher for question: √∂zellik: "Yorum" i√ßerik: m√ºkemmel bir √ºr√ºn olmasada am5 sistem toplayacaklar i√ßin giri≈ü seviyesi bir anakart. ben aldƒ±m ≈üuanlƒ±k i≈üimi g√∂r√ºyor ama i≈ülemci kƒ±smƒ±na dikkat 

bu hangi √ºr√ºne aittir
2025-08-01 17:23:06,744 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 170.7s)
2025-08-01 17:23:06,745 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: √∂zellik: "Yorum" i√ßerik: m√ºkemmel bir √ºr√ºn olmasada am5 sistem toplayacaklar i√ßin giri≈ü seviyesi bir anakart. ben aldƒ±m ≈üuanlƒ±k i≈üimi g√∂r√ºyor ama i≈ülemci kƒ±smƒ±na dikkat 

bu hangi √ºr√ºne aittir
2025-08-01 17:23:06,751 - graphrag_pipeline - INFO - Extracted entities: ['Yorum']
2025-08-01 17:23:07,120 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:23:07,130 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 17:23:07,169 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:23:07,169 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:23:08,681 - __main__ - INFO - Gemini API call successful
2025-08-01 17:23:08,706 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) WHERE p.Yorum CONTAINS 'm√ºkemmel bir √ºr√ºn olmasada am5 sistem toplayacaklar i√ßin giri≈ü seviyesi bir anakart. ben aldƒ±m ≈üuanlƒ±k i≈üimi g√∂r√ºyor ama i≈ülemci kƒ±smƒ±na dikkat' RETURN p
2025-08-01 17:23:08,706 - __main__ - INFO - Generated Cypher: MATCH (p:Product) WHERE p.Yorum CONTAINS 'm√ºkemmel bir √ºr√ºn olmasada am5 sistem toplayacaklar i√ßin giri≈ü seviyesi bir anakart. ben aldƒ±m ≈üuanlƒ±k i≈üimi g√∂r√ºyor ama i≈ülemci kƒ±smƒ±na dikkat' RETURN p
2025-08-01 17:23:08,756 - __main__ - INFO - Query results: 1 rows
2025-08-01 17:23:08,756 - __main__ - INFO - Generating answer for question: √∂zellik: "Yorum" i√ßerik: m√ºkemmel bir √ºr√ºn olmasada am5 sistem toplayacaklar i√ßin giri≈ü seviyesi bir anakart. ben aldƒ±m ≈üuanlƒ±k i≈üimi g√∂r√ºyor ama i≈ülemci kƒ±smƒ±na dikkat 

bu hangi √ºr√ºne aittir
2025-08-01 17:23:13,979 - __main__ - INFO - Gemini API call successful
2025-08-01 17:23:13,997 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:23:14,006 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:23:14] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:23:30,933 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:23:30,955 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:23:30,955 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:23:30,956 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:23:30,957 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:23:30,957 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:23:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:23:32,914 - neo4j.io - ERROR - [#D662]  _: <CONNECTION> error: Failed to read from defunct connection IPv4Address(('localhost', 7687)) (ResolvedIPv4Address(('127.0.0.1', 7687))): ConnectionAbortedError(10053, 'Kurulan bir baƒülantƒ±, ana makinenizdeki yazƒ±lƒ±m tarafƒ±ndan iptal edildi', None, 10053, None)
2025-08-01 17:23:32,915 - neo4j.pool - WARNING - Transaction failed and will be retried in 1.0241480211437686s (Failed to read from defunct connection IPv4Address(('localhost', 7687)) (ResolvedIPv4Address(('127.0.0.1', 7687))))
2025-08-01 17:23:38,008 - neo4j.pool - WARNING - Transaction failed and will be retried in 1.6242617161281319s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:23:43,705 - neo4j.pool - WARNING - Transaction failed and will be retried in 3.8821087529827127s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:23:51,655 - neo4j.pool - WARNING - Transaction failed and will be retried in 8.075401456562458s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:03,812 - __main__ - ERROR - Failed to execute query: MATCH (n) RETURN count(n) AS total LIMIT 1
2025-08-01 17:24:03,813 - __main__ - ERROR - Error: Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
2025-08-01 17:24:03,813 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:24:05,013 - neo4j.pool - WARNING - Transaction failed and will be retried in 1.1996829282050518s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:07,904 - neo4j.pool - WARNING - Transaction failed and will be retried in 1.1114728618144842s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:10,252 - neo4j.pool - WARNING - Transaction failed and will be retried in 2.161939114653393s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:13,076 - neo4j.pool - WARNING - Transaction failed and will be retried in 2.1926600237576244s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:16,496 - neo4j.pool - WARNING - Transaction failed and will be retried in 3.9977183276351798s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:19,345 - neo4j.pool - WARNING - Transaction failed and will be retried in 4.088790722232461s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:24,561 - neo4j.pool - WARNING - Transaction failed and will be retried in 8.983500378011263s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:26,395 - neo4j.pool - WARNING - Transaction failed and will be retried in 1.153095103323468s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:27,528 - neo4j.pool - WARNING - Transaction failed and will be retried in 8.15061944947382s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:31,610 - neo4j.pool - WARNING - Transaction failed and will be retried in 2.018336353781908s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:37,626 - __main__ - ERROR - Failed to execute query: MATCH (n) RETURN count(n) AS total LIMIT 1
2025-08-01 17:24:37,626 - __main__ - ERROR - Error: Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
2025-08-01 17:24:37,627 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:24:37,707 - neo4j.pool - WARNING - Transaction failed and will be retried in 4.130897795897182s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:39,842 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_label, collect(keys(n)) AS all_keys, count(n) AS node_count,
             collect(n)[0] AS sample_node
        WITH node_label, node_count, sample_node,
             reduce(unique_keys = [], key_set IN all_keys | 
                    unique_keys + [k IN key_set WHERE NOT k IN unique_keys]) AS unique_properties
        RETURN node_label, node_count, unique_properties, 
               properties(sample_node) AS sample_properties
        ORDER BY node_label
2025-08-01 17:24:39,844 - __main__ - ERROR - Error: Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
2025-08-01 17:24:42,092 - neo4j.pool - WARNING - Transaction failed and will be retried in 0.8289318433569088s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:43,957 - neo4j.pool - WARNING - Transaction failed and will be retried in 1.166510850321217s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:45,904 - neo4j.pool - WARNING - Transaction failed and will be retried in 8.04972412070187s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:46,989 - neo4j.pool - WARNING - Transaction failed and will be retried in 1.8293975207582829s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:49,187 - neo4j.pool - WARNING - Transaction failed and will be retried in 1.9354394373688228s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:52,886 - neo4j.pool - WARNING - Transaction failed and will be retried in 3.991373792525764s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:55,170 - neo4j.pool - WARNING - Transaction failed and will be retried in 4.737103940703756s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:55,286 - neo4j.pool - WARNING - Transaction failed and will be retried in 1.1909998155862707s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:56,353 - neo4j.pool - WARNING - Transaction failed and will be retried in 0.8715354183172613s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:24:58,034 - __main__ - ERROR - Failed to execute query: MATCH (n) RETURN count(n) AS total LIMIT 1
2025-08-01 17:24:58,035 - __main__ - ERROR - Error: Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
2025-08-01 17:24:58,036 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:25:00,551 - neo4j.pool - WARNING - Transaction failed and will be retried in 1.7311753396938498s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:25:00,951 - neo4j.pool - WARNING - Transaction failed and will be retried in 7.54722998265251s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:25:01,317 - neo4j.pool - WARNING - Transaction failed and will be retried in 2.2848187384635303s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:25:02,084 - neo4j.pool - WARNING - Transaction failed and will be retried in 1.1309001200288575s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:25:03,983 - neo4j.pool - WARNING - Transaction failed and will be retried in 8.99916217809014s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:25:06,333 - neo4j.pool - WARNING - Transaction failed and will be retried in 4.696824847547725s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:25:06,532 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-01 17:25:06,533 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:25:07,283 - neo4j.pool - WARNING - Transaction failed and will be retried in 2.2451528990944563s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:25:07,682 - neo4j.pool - WARNING - Transaction failed and will be retried in 4.453404606974432s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:25:10,599 - neo4j.pool - WARNING - Transaction failed and will be retried in 0.9019006221086163s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:25:12,581 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_label, collect(keys(n)) AS all_keys, count(n) AS node_count,
             collect(n)[0] AS sample_node
        WITH node_label, node_count, sample_node,
             reduce(unique_keys = [], key_set IN all_keys | 
                    unique_keys + [k IN key_set WHERE NOT k IN unique_keys]) AS unique_properties
        RETURN node_label, node_count, unique_properties, 
               properties(sample_node) AS sample_properties
        ORDER BY node_label
2025-08-01 17:25:12,583 - __main__ - ERROR - Error: Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
2025-08-01 17:25:13,597 - neo4j.pool - WARNING - Transaction failed and will be retried in 4.022638360189851s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:25:15,098 - neo4j.pool - WARNING - Transaction failed and will be retried in 8.374619451582145s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:25:15,553 - neo4j.pool - WARNING - Transaction failed and will be retried in 2.2746048888998267s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:25:16,202 - neo4j.pool - WARNING - Transaction failed and will be retried in 9.574818677882968s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:25:16,647 - neo4j.pool - WARNING - Transaction failed and will be retried in 0.9593997327886232s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:25:17,062 - __main__ - ERROR - Failed to execute query: MATCH ()-[r]->() 
        WITH type(r) AS rel_type, collect(keys(r)) AS all_keys, count(r) AS rel_count,
             collect(r)[0] AS sample_rel
        WITH rel_type, rel_count, sample_rel,
             reduce(unique_keys = [], key_set IN all_keys | 
                    unique_keys + [k IN key_set WHERE NOT k IN unique_keys]) AS unique_properties
        RETURN rel_type, rel_count, unique_properties,
               properties(sample_rel) AS sample_properties
        ORDER BY rel_type
2025-08-01 17:25:17,064 - __main__ - ERROR - Error: Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
2025-08-01 17:25:24,147 - __main__ - ERROR - Neo4j query error: {code: Neo.TransientError.General.DatabaseUnavailable} {message: The database is not currently available to serve your request, refer to the database logs for more details. Retrying your request at a later time may succeed.}
2025-08-01 17:25:24,148 - __main__ - ERROR - Neo4j query error: {code: Neo.TransientError.General.DatabaseUnavailable} {message: The database is not currently available to serve your request, refer to the database logs for more details. Retrying your request at a later time may succeed.}
2025-08-01 17:25:24,161 - __main__ - ERROR - Neo4j query error: {code: Neo.TransientError.General.DatabaseUnavailable} {message: The database is not currently available to serve your request, refer to the database logs for more details. Retrying your request at a later time may succeed.}
2025-08-01 17:25:24,164 - neo4j.pool - WARNING - Transaction failed and will be retried in 7.426992295457806s (The database is not currently available to serve your request, refer to the database logs for more details. Retrying your request at a later time may succeed.)
2025-08-01 17:25:24,171 - __main__ - ERROR - Neo4j query error: {code: Neo.TransientError.General.DatabaseUnavailable} {message: The database is not currently available to serve your request, refer to the database logs for more details. Retrying your request at a later time may succeed.}
2025-08-01 17:25:24,188 - neo4j.pool - WARNING - Transaction failed and will be retried in 0.9804896313456386s (The database is not currently available to serve your request, refer to the database logs for more details. Retrying your request at a later time may succeed.)
2025-08-01 17:25:24,207 - neo4j.pool - WARNING - Transaction failed and will be retried in 2.2823354862368106s (The database is not currently available to serve your request, refer to the database logs for more details. Retrying your request at a later time may succeed.)
2025-08-01 17:25:24,226 - neo4j.pool - WARNING - Transaction failed and will be retried in 4.166637748239081s (The database is not currently available to serve your request, refer to the database logs for more details. Retrying your request at a later time may succeed.)
2025-08-01 17:25:26,726 - __main__ - ERROR - Neo4j query error: {code: Neo.TransientError.General.DatabaseUnavailable} {message: The database is not currently available to serve your request, refer to the database logs for more details. Retrying your request at a later time may succeed.}
2025-08-01 17:25:26,744 - neo4j.pool - WARNING - Transaction failed and will be retried in 0.9128405575314751s (The database is not currently available to serve your request, refer to the database logs for more details. Retrying your request at a later time may succeed.)
2025-08-01 17:25:27,268 - __main__ - ERROR - Neo4j query error: {code: Neo.TransientError.General.DatabaseUnavailable} {message: Timeout waiting for database to become available and allow new transactions. Waited 1s. 1 reasons for blocking: Database unavailable.}
2025-08-01 17:25:27,297 - neo4j.pool - WARNING - Transaction failed and will be retried in 2.3119081769187413s (Timeout waiting for database to become available and allow new transactions. Waited 1s. 1 reasons for blocking: Database unavailable.)
2025-08-01 17:25:31,675 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:25:31,676 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:25:31,677 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:25:33,243 - __main__ - INFO - COMPREHENSIVE schema detection completed: 0 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:25:33,245 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:25:33,246 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:25:33] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:25:33,265 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:25:33] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:25:33,273 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:25:33,288 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:25:33,294 - __main__ - INFO - COMPREHENSIVE schema detection completed: 0 node types, 0 relationship types, 10 connection patterns
2025-08-01 17:25:33,336 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:25:33] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:25:33,340 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:25:33,361 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:25:33] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:25:33,390 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:25:33] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:25:33,467 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 17:25:33
2025-08-01 17:25:33,522 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:25:33,677 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:25:33,680 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:25:33,697 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:25:33] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:25:33,830 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:25:33,832 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:25:33] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:25:34,308 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:25:34,311 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:25:34] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:25:48,543 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:25:48] "GET / HTTP/1.1" 200 -
2025-08-01 17:25:48,589 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:25:48] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:25:48,590 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:25:48,732 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:25:48,733 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:25:48] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:25:48,766 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:25:49,046 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:25:49,047 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:25:49] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:26:01,233 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:26:01,390 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:26:01,391 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:26:01] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:26:01,486 - __main__ - INFO - Received question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 17:26:01,487 - __main__ - INFO - Generating Cypher for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 17:26:01,493 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 28.1s)
2025-08-01 17:26:01,495 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 17:26:01,501 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±']
2025-08-01 17:26:01,993 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:26:02,347 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 17:26:02,375 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:26:02,376 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:26:03,519 - __main__ - INFO - Gemini API call successful
2025-08-01 17:26:03,533 - __main__ - INFO - Generated Cypher with GraphRAG: CALL db.schema.visualization()
2025-08-01 17:26:03,534 - __main__ - INFO - Generated Cypher: CALL db.schema.visualization()
2025-08-01 17:26:03,656 - __main__ - INFO - Query results: 1 rows
2025-08-01 17:26:03,657 - __main__ - INFO - Generating answer for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-01 17:26:14,921 - __main__ - INFO - Gemini API call successful
2025-08-01 17:26:14,956 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:26:14,987 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:26:14] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:26:18,584 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:26:18,724 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:26:18,725 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:26:18] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:26:30,908 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:26:30,975 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:26:30,977 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:26:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:26:48,971 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:26:49,058 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:26:49,060 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:26:49] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:27:00,924 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:27:00,969 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:27:00,970 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:27:00] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:27:14,102 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:27:14] "GET / HTTP/1.1" 200 -
2025-08-01 17:27:14,144 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:27:14] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:27:14,144 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:27:14,242 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:27:14,243 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:27:14] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:27:14,260 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:27:14,326 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:27:14,327 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:27:14] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:27:21,214 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 17:27:21,214 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 17:27:21,218 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 107.9s)
2025-08-01 17:27:21,218 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 17:27:21,223 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±nda']
2025-08-01 17:27:21,601 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:27:21,611 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 17:27:21,634 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:27:21,634 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:27:22,805 - __main__ - INFO - Gemini API call successful
2025-08-01 17:27:22,839 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH ()-[r]->() RETURN type(r), count(r) AS relationCount
2025-08-01 17:27:22,840 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN type(r), count(r) AS relationCount
2025-08-01 17:27:22,944 - __main__ - INFO - Query results: 9 rows
2025-08-01 17:27:22,945 - __main__ - INFO - Generating answer for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 17:27:28,359 - __main__ - INFO - Gemini API call successful
2025-08-01 17:27:28,384 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:27:28,393 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:27:28] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:27:31,219 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:27:31,259 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:27:31,260 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:27:31] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:27:44,221 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:27:44,302 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:27:44,303 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:27:44] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:28:00,904 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:28:00,962 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:28:00,963 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:28:00] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:28:14,902 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:28:14,939 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:28:14,940 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:28:14] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:28:31,209 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:28:31,256 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:28:31,257 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:28:31] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:28:44,901 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:28:44,937 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:28:44,938 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:28:44] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:29:01,216 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:29:01,246 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:29:01,246 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:29:01] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:29:03,675 - __main__ - INFO - Received question: T√ºm yasalarƒ± listele
2025-08-01 17:29:03,676 - __main__ - INFO - Generating Cypher for question: T√ºm yasalarƒ± listele
2025-08-01 17:29:03,678 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 210.3s)
2025-08-01 17:29:03,679 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: T√ºm yasalarƒ± listele
2025-08-01 17:29:03,681 - graphrag_pipeline - INFO - Extracted entities: ['T√ºm']
2025-08-01 17:29:04,055 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:29:04,068 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 17:29:04,103 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:29:04,106 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:29:04,995 - __main__ - INFO - Gemini API call successful
2025-08-01 17:29:05,012 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n:Law) RETURN n
2025-08-01 17:29:05,012 - __main__ - INFO - Generated Cypher: MATCH (n:Law) RETURN n
2025-08-01 17:29:05,048 - __main__ - INFO - Query results: 17 rows
2025-08-01 17:29:05,048 - __main__ - INFO - Generating answer for question: T√ºm yasalarƒ± listele
2025-08-01 17:29:14,146 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:29:14,191 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:29:14,193 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:29:14] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:29:17,936 - __main__ - INFO - Gemini API call successful
2025-08-01 17:29:17,963 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:29:17,973 - __main__ - ERROR - Error in api_ask: Object of type Date is not JSON serializable
Traceback (most recent call last):
  File "C:\Users\oedebali\neo4j_chat\app.py", line 1084, in api_ask
    return jsonify({
        "answer": answer,
    ...<2 lines>...
        "description": json_data.get("description", "")
    })
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\__init__.py", line 170, in jsonify
    return current_app.json.response(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\provider.py", line 215, in response
    f"{self.dumps(obj, **dump_args)}\n", mimetype=self.mimetype
       ~~~~~~~~~~^^^^^^^^^^^^^^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\provider.py", line 180, in dumps
    return json.dumps(obj, **kwargs)
           ~~~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\json\__init__.py", line 238, in dumps
    **kw).encode(obj)
          ~~~~~~^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\json\encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\json\encoder.py", line 261, in iterencode
    return _iterencode(o, 0)
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\provider.py", line 120, in _default
    raise TypeError(f"Object of type {type(o).__name__} is not JSON serializable")
TypeError: Object of type Date is not JSON serializable
2025-08-01 17:29:18,025 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:29:18] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-01 17:29:24,362 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:29:24] "GET / HTTP/1.1" 200 -
2025-08-01 17:29:24,407 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:29:24,408 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:29:24] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:29:24,483 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:29:24,488 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:29:24] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:29:24,528 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:29:24,596 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:29:24,600 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:29:24] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:29:31,793 - __main__ - INFO - Received question: Yasa larƒ± listele
2025-08-01 17:29:31,793 - __main__ - INFO - Generating Cypher for question: Yasa larƒ± listele
2025-08-01 17:29:31,796 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 238.4s)
2025-08-01 17:29:31,797 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Yasa larƒ± listele
2025-08-01 17:29:31,802 - graphrag_pipeline - INFO - Extracted entities: ['Yasa']
2025-08-01 17:29:32,143 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:29:32,154 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 17:29:32,177 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:29:32,177 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:29:33,258 - __main__ - INFO - Gemini API call successful
2025-08-01 17:29:33,280 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n:Law) RETURN n
2025-08-01 17:29:33,281 - __main__ - INFO - Generated Cypher: MATCH (n:Law) RETURN n
2025-08-01 17:29:33,291 - __main__ - INFO - Query results: 17 rows
2025-08-01 17:29:33,291 - __main__ - INFO - Generating answer for question: Yasa larƒ± listele
2025-08-01 17:29:45,515 - __main__ - INFO - Gemini API call successful
2025-08-01 17:29:45,540 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:29:45,547 - __main__ - ERROR - Error in api_ask: Object of type Date is not JSON serializable
Traceback (most recent call last):
  File "C:\Users\oedebali\neo4j_chat\app.py", line 1084, in api_ask
    return jsonify({
        "answer": answer,
    ...<2 lines>...
        "description": json_data.get("description", "")
    })
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\__init__.py", line 170, in jsonify
    return current_app.json.response(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\provider.py", line 215, in response
    f"{self.dumps(obj, **dump_args)}\n", mimetype=self.mimetype
       ~~~~~~~~~~^^^^^^^^^^^^^^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\provider.py", line 180, in dumps
    return json.dumps(obj, **kwargs)
           ~~~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\json\__init__.py", line 238, in dumps
    **kw).encode(obj)
          ~~~~~~^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\json\encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\json\encoder.py", line 261, in iterencode
    return _iterencode(o, 0)
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\provider.py", line 120, in _default
    raise TypeError(f"Object of type {type(o).__name__} is not JSON serializable")
TypeError: Object of type Date is not JSON serializable
2025-08-01 17:29:45,555 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:29:45] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-01 17:29:51,596 - __main__ - INFO - Received question: Law larƒ± listele
2025-08-01 17:29:51,596 - __main__ - INFO - Generating Cypher for question: Law larƒ± listele
2025-08-01 17:29:51,601 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 258.3s)
2025-08-01 17:29:51,601 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Law larƒ± listele
2025-08-01 17:29:51,606 - graphrag_pipeline - INFO - Extracted entities: ['Law']
2025-08-01 17:29:51,943 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:29:51,954 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 17:29:51,987 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:29:51,987 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:29:53,156 - __main__ - INFO - Gemini API call successful
2025-08-01 17:29:53,183 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n:Law) RETURN n
2025-08-01 17:29:53,184 - __main__ - INFO - Generated Cypher: MATCH (n:Law) RETURN n
2025-08-01 17:29:53,195 - __main__ - INFO - Query results: 17 rows
2025-08-01 17:29:53,195 - __main__ - INFO - Generating answer for question: Law larƒ± listele
2025-08-01 17:29:54,399 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:29:54,427 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:29:54,428 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:29:54] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:29:55,352 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:29:55,401 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:29:55,402 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:29:55] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:30:00,601 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:30:00,636 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:30:00,636 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:30:00] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:30:06,560 - __main__ - INFO - Gemini API call successful
2025-08-01 17:30:06,588 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:30:06,595 - __main__ - ERROR - Error in api_ask: Object of type Date is not JSON serializable
Traceback (most recent call last):
  File "C:\Users\oedebali\neo4j_chat\app.py", line 1084, in api_ask
    return jsonify({
        "answer": answer,
    ...<2 lines>...
        "description": json_data.get("description", "")
    })
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\__init__.py", line 170, in jsonify
    return current_app.json.response(*args, **kwargs)
           ~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\provider.py", line 215, in response
    f"{self.dumps(obj, **dump_args)}\n", mimetype=self.mimetype
       ~~~~~~~~~~^^^^^^^^^^^^^^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\provider.py", line 180, in dumps
    return json.dumps(obj, **kwargs)
           ~~~~~~~~~~^^^^^^^^^^^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\json\__init__.py", line 238, in dumps
    **kw).encode(obj)
          ~~~~~~^^^^^
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\json\encoder.py", line 200, in encode
    chunks = self.iterencode(o, _one_shot=True)
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\json\encoder.py", line 261, in iterencode
    return _iterencode(o, 0)
  File "C:\Users\oedebali\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\json\provider.py", line 120, in _default
    raise TypeError(f"Object of type {type(o).__name__} is not JSON serializable")
TypeError: Object of type Date is not JSON serializable
2025-08-01 17:30:06,603 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:30:06] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-01 17:30:24,915 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:30:24,961 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:30:24,962 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:30:24] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:30:30,903 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:30:30,937 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:30:30,938 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:30:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:30:33,493 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-01 17:30:33,493 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:30:33,522 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:30:33,560 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 17:30:33
2025-08-01 17:30:54,906 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:30:54,956 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:30:54,960 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:30:54] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:31:00,915 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:31:00,948 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:31:00,949 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:31:00] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:31:03,860 - __main__ - INFO - Received question: ka√ß tane ili≈üki var
2025-08-01 17:31:03,860 - __main__ - INFO - Generating Cypher for question: ka√ß tane ili≈üki var
2025-08-01 17:31:03,904 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 30.4s)
2025-08-01 17:31:03,905 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: ka√ß tane ili≈üki var
2025-08-01 17:31:03,919 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-01 17:31:04,318 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:31:04,337 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:31:04,337 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:31:05,620 - __main__ - INFO - Gemini API call successful
2025-08-01 17:31:05,632 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH ()-[r]->() RETURN type(r), count(r) AS relationCount
2025-08-01 17:31:05,633 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN type(r), count(r) AS relationCount
2025-08-01 17:31:05,639 - __main__ - INFO - Query results: 9 rows
2025-08-01 17:31:05,640 - __main__ - INFO - Generating answer for question: ka√ß tane ili≈üki var
2025-08-01 17:31:09,925 - __main__ - INFO - Gemini API call successful
2025-08-01 17:31:09,935 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:31:09,945 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:31:09] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:31:18,195 - __main__ - INFO - Received question: ka√ß tane d√ºƒü√ºm var
2025-08-01 17:31:18,196 - __main__ - INFO - Generating Cypher for question: ka√ß tane d√ºƒü√ºm var
2025-08-01 17:31:18,198 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 44.7s)
2025-08-01 17:31:18,198 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: ka√ß tane d√ºƒü√ºm var
2025-08-01 17:31:18,200 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-01 17:31:18,554 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:31:18,575 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:31:18,575 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:31:19,503 - __main__ - INFO - Gemini API call successful
2025-08-01 17:31:19,516 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) RETURN count(n) AS totalNodes
2025-08-01 17:31:19,516 - __main__ - INFO - Generated Cypher: MATCH (n) RETURN count(n) AS totalNodes
2025-08-01 17:31:19,560 - __main__ - INFO - Query results: 1 rows
2025-08-01 17:31:19,560 - __main__ - INFO - Generating answer for question: ka√ß tane d√ºƒü√ºm var
2025-08-01 17:31:20,778 - __main__ - INFO - Gemini API call successful
2025-08-01 17:31:20,797 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:31:20,807 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:31:20] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:31:24,913 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:31:24,961 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:31:24,963 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:31:24] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:31:30,895 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:31:30,927 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:31:30,928 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:31:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:31:37,609 - __main__ - INFO - Received question: √∂zellikleri g√∂rebiliyor musun?
2025-08-01 17:31:37,609 - __main__ - INFO - Generating Cypher for question: √∂zellikleri g√∂rebiliyor musun?
2025-08-01 17:31:37,612 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 64.1s)
2025-08-01 17:31:37,612 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: √∂zellikleri g√∂rebiliyor musun?
2025-08-01 17:31:37,616 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-01 17:31:37,956 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:31:37,988 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:31:37,988 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:31:39,290 - __main__ - INFO - Gemini API call successful
2025-08-01 17:31:39,310 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) RETURN keys(n)
2025-08-01 17:31:39,310 - __main__ - INFO - Generated Cypher: MATCH (n) RETURN keys(n)
2025-08-01 17:31:39,371 - __main__ - INFO - Query results: 79 rows
2025-08-01 17:31:39,372 - __main__ - INFO - Generating answer for question: √∂zellikleri g√∂rebiliyor musun?
2025-08-01 17:31:44,520 - __main__ - INFO - Gemini API call successful
2025-08-01 17:31:44,539 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:31:44,550 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:31:44] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:31:54,402 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:31:54,436 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:31:54,437 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:31:54] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:32:00,903 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:32:00,945 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:32:00,946 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:32:00] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:32:24,397 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:32:24,435 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:32:24,436 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:32:24] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:32:30,905 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:32:30,930 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:32:30,931 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:32:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:32:39,788 - __main__ - INFO - Received question: bilgisayar d√ºƒü√ºmleri g√∂r√ºyor musun yoksa hepsi yasalar hakkƒ±nda mƒ±
2025-08-01 17:32:39,789 - __main__ - INFO - Generating Cypher for question: bilgisayar d√ºƒü√ºmleri g√∂r√ºyor musun yoksa hepsi yasalar hakkƒ±nda mƒ±
2025-08-01 17:32:39,792 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 126.3s)
2025-08-01 17:32:39,793 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: bilgisayar d√ºƒü√ºmleri g√∂r√ºyor musun yoksa hepsi yasalar hakkƒ±nda mƒ±
2025-08-01 17:32:39,796 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-01 17:32:40,192 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:32:40,213 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:32:40,213 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:32:42,194 - __main__ - INFO - Gemini API call successful
2025-08-01 17:32:42,216 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) WHERE labels(n)[0] CONTAINS 'Law' OR labels(n)[0] CONTAINS 'Section' RETURN labels(n)[0] AS nodeType, count(*) AS nodeCount
2025-08-01 17:32:42,217 - __main__ - INFO - Generated Cypher: MATCH (n) WHERE labels(n)[0] CONTAINS 'Law' OR labels(n)[0] CONTAINS 'Section' RETURN labels(n)[0] AS nodeType, count(*) AS nodeCount
2025-08-01 17:32:42,299 - __main__ - INFO - Query results: 3 rows
2025-08-01 17:32:42,300 - __main__ - INFO - Generating answer for question: bilgisayar d√ºƒü√ºmleri g√∂r√ºyor musun yoksa hepsi yasalar hakkƒ±nda mƒ±
2025-08-01 17:32:44,908 - __main__ - INFO - Gemini API call successful
2025-08-01 17:32:44,945 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:32:44,955 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:32:44] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:32:54,904 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:32:54,938 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:32:54,939 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:32:54] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:33:00,899 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:33:00,934 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:33:00,935 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:33:00] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:33:21,320 - __main__ - INFO - Received question: source d√ºƒü√ºm√ºn√º g√∂rm√ºyor musun
2025-08-01 17:33:21,320 - __main__ - INFO - Generating Cypher for question: source d√ºƒü√ºm√ºn√º g√∂rm√ºyor musun
2025-08-01 17:33:21,325 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 167.8s)
2025-08-01 17:33:21,326 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: source d√ºƒü√ºm√ºn√º g√∂rm√ºyor musun
2025-08-01 17:33:21,331 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-01 17:33:21,683 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:33:21,715 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:33:21,716 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:33:22,825 - __main__ - INFO - Gemini API call successful
2025-08-01 17:33:22,852 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n:Source) RETURN n
2025-08-01 17:33:22,852 - __main__ - INFO - Generated Cypher: MATCH (n:Source) RETURN n
2025-08-01 17:33:22,895 - __main__ - INFO - Query results: 9 rows
2025-08-01 17:33:22,895 - __main__ - INFO - Generating answer for question: source d√ºƒü√ºm√ºn√º g√∂rm√ºyor musun
2025-08-01 17:33:24,398 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:33:24,440 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:33:24,441 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:33:24] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:33:28,280 - __main__ - INFO - Gemini API call successful
2025-08-01 17:33:28,334 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:33:28,347 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:33:28] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:33:30,912 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:33:30,941 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:33:30,942 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:33:30] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:33:54,896 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:33:54,926 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:33:54,927 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:33:54] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:34:00,910 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:34:00,951 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:34:00,953 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:34:00] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:34:01,260 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:34:01] "GET / HTTP/1.1" 200 -
2025-08-01 17:34:01,289 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:34:01,294 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:34:01] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:34:01,349 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:34:01,350 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:34:01] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:34:01,365 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:34:01,397 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:34:01,400 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:34:01] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:34:04,058 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:34:04] "GET / HTTP/1.1" 200 -
2025-08-01 17:34:04,087 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:34:04,090 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:34:04] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:34:04,152 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:34:04,153 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:34:04] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:34:04,172 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:34:04,218 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:34:04,219 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:34:04] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:34:05,577 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 17:34:05,577 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 17:34:05,582 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 212.1s)
2025-08-01 17:34:05,583 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 17:34:05,589 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±nda']
2025-08-01 17:34:05,959 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:34:05,975 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 17:34:06,015 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:34:06,016 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:34:07,190 - __main__ - INFO - Gemini API call successful
2025-08-01 17:34:07,218 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH ()-[r]->() RETURN type(r), count(r) AS relationCount
2025-08-01 17:34:07,219 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN type(r), count(r) AS relationCount
2025-08-01 17:34:07,223 - __main__ - INFO - Query results: 9 rows
2025-08-01 17:34:07,224 - __main__ - INFO - Generating answer for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 17:34:10,476 - __main__ - INFO - Gemini API call successful
2025-08-01 17:34:10,524 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:34:10,534 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:34:10] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:34:33,513 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-01 17:34:33,514 - embeddings - INFO - Embedding manager initialized successfully
2025-08-01 17:34:33,514 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-01 17:34:35,612 - __main__ - WARNING - Neo4j connection attempt 1 failed: {code: Neo.ClientError.Security.Unauthorized} {message: The client is unauthorized due to authentication failure.}
2025-08-01 17:34:37,675 - __main__ - WARNING - Neo4j connection attempt 2 failed: {code: Neo.ClientError.Security.Unauthorized} {message: The client is unauthorized due to authentication failure.}
2025-08-01 17:34:39,710 - __main__ - WARNING - Neo4j connection attempt 3 failed: {code: Neo.ClientError.Security.Unauthorized} {message: The client is unauthorized due to authentication failure.}
2025-08-01 17:34:39,710 - __main__ - ERROR - Failed to connect to Neo4j after all retries
2025-08-01 17:34:39,713 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-01 17:34:39,713 - __main__ - INFO - Neo4j available: False
2025-08-01 17:34:39,713 - __main__ - INFO - Gemini API available: True
2025-08-01 17:34:39,713 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-01 17:34:39,855 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-01 17:34:39,856 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-01 17:34:47,534 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:34:47] "GET / HTTP/1.1" 200 -
2025-08-01 17:34:47,558 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:34:47] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:34:47,570 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:34:47] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:34:47,573 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:34:47] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:34:48,363 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 17:34:50,425 - __main__ - WARNING - Neo4j connection attempt 1 failed: {code: Neo.ClientError.Security.Unauthorized} {message: The client is unauthorized due to authentication failure.}
2025-08-01 17:34:52,454 - __main__ - WARNING - Neo4j connection attempt 2 failed: {code: Neo.ClientError.Security.Unauthorized} {message: The client is unauthorized due to authentication failure.}
2025-08-01 17:34:54,525 - __main__ - WARNING - Neo4j connection attempt 3 failed: {code: Neo.ClientError.Security.Unauthorized} {message: The client is unauthorized due to authentication failure.}
2025-08-01 17:34:54,526 - __main__ - ERROR - Failed to connect to Neo4j after all retries
2025-08-01 17:34:54,527 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:34:54] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:35:07,873 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-01 17:35:07,873 - embeddings - INFO - Embedding manager initialized successfully
2025-08-01 17:35:07,874 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-01 17:35:09,936 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-01 17:35:09,937 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-01 17:35:10,204 - embeddings - INFO - Semantic vector index created
2025-08-01 17:35:10,330 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-01 17:35:10,331 - __main__ - INFO - Neo4j available: True
2025-08-01 17:35:10,331 - __main__ - INFO - Gemini API available: True
2025-08-01 17:35:10,332 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-01 17:35:10,335 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-01 17:35:10,392 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-01 17:35:10,393 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-01 17:35:17,931 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:35:18,467 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:35:18,472 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:35:18] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:35:30,974 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:35:31,003 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:35:31,004 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:35:31] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:35:47,578 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:35:47,610 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:35:47,611 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:35:47] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:36:01,214 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:36:01,246 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:36:01,247 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:36:01] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:36:17,349 - __main__ - INFO - Received question: number: Madde 12 kime aittir
2025-08-01 17:36:17,349 - __main__ - INFO - Generating Cypher for question: number: Madde 12 kime aittir
2025-08-01 17:36:17,359 - __main__ - INFO - üìä Schema cache expired/missing, fetching fresh schema...
2025-08-01 17:36:17,359 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:36:17,390 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:36:17,424 - __main__ - INFO - üìä Fresh schema cached successfully
2025-08-01 17:36:17,424 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: number: Madde 12 kime aittir
2025-08-01 17:36:17,432 - graphrag_pipeline - INFO - Extracted entities: ['Madde']
2025-08-01 17:36:17,576 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:36:17,618 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:36:17,619 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:36:17] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:36:18,163 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:36:18,173 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 17:36:18,188 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:36:18,188 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:36:19,666 - __main__ - INFO - Gemini API call successful
2025-08-01 17:36:19,678 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (s:Section {number: 'Madde 12'})-[:HAS_TAG]->(t:Tag) RETURN s, t
2025-08-01 17:36:19,679 - __main__ - INFO - Generated Cypher: MATCH (s:Section {number: 'Madde 12'})-[:HAS_TAG]->(t:Tag) RETURN s, t
2025-08-01 17:36:19,826 - __main__ - INFO - Query results: 1 rows
2025-08-01 17:36:19,827 - __main__ - INFO - Generating answer for question: number: Madde 12 kime aittir
2025-08-01 17:36:22,921 - __main__ - INFO - Gemini API call successful
2025-08-01 17:36:22,938 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:36:22,948 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:36:22] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:36:31,200 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:36:31,229 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:36:31,230 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:36:31] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:36:47,564 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:36:47,594 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:36:47,595 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:36:47] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:37:01,674 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:37:01,743 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:37:01,752 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:37:01] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:37:17,893 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:37:17,921 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:37:17,921 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:37:17] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:37:30,910 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:37:31,048 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:37:31,050 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:37:31] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:37:47,911 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:37:47,939 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:37:47,940 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:37:47] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:38:00,925 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:38:00,970 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:38:00,972 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:38:00] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:38:17,896 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:38:17,922 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:38:17,924 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:38:17] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:38:30,965 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:38:31,013 - __main__ - INFO - COMPREHENSIVE schema detection completed: 7 node types, 9 relationship types, 10 connection patterns
2025-08-01 17:38:31,014 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:38:31] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:38:47,903 - neo4j.io - ERROR - [#D9CF]  _: <CONNECTION> error: Failed to read from defunct connection IPv4Address(('localhost', 7687)) (ResolvedIPv4Address(('127.0.0.1', 7687))): ConnectionAbortedError(10053, 'Kurulan bir baƒülantƒ±, ana makinenizdeki yazƒ±lƒ±m tarafƒ±ndan iptal edildi', None, 10053, None)
2025-08-01 17:38:47,904 - neo4j.pool - WARNING - Transaction failed and will be retried in 0.8121117218763396s (Failed to read from defunct connection IPv4Address(('localhost', 7687)) (ResolvedIPv4Address(('127.0.0.1', 7687))))
2025-08-01 17:38:52,793 - neo4j.pool - WARNING - Transaction failed and will be retried in 1.6286593108567256s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:38:58,461 - neo4j.pool - WARNING - Transaction failed and will be retried in 4.525700638286506s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:39:05,291 - neo4j.pool - WARNING - Transaction failed and will be retried in 1.1729837879269187s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:39:07,074 - neo4j.pool - WARNING - Transaction failed and will be retried in 7.7236032275773185s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:39:10,541 - neo4j.pool - WARNING - Transaction failed and will be retried in 1.8805288169478123s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:39:16,505 - neo4j.pool - WARNING - Transaction failed and will be retried in 3.5375043458027373s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:39:18,871 - __main__ - ERROR - Failed to execute query: MATCH (n) RETURN count(n) AS total LIMIT 1
2025-08-01 17:39:18,872 - __main__ - ERROR - Error: Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
2025-08-01 17:39:18,873 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:39:22,943 - neo4j.pool - WARNING - Transaction failed and will be retried in 1.1625834348085622s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:39:24,127 - neo4j.pool - WARNING - Transaction failed and will be retried in 8.472050654643583s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:39:28,155 - neo4j.pool - WARNING - Transaction failed and will be retried in 1.970542425542218s (Couldn't connect to localhost:7687 (resolved to ('[::1]:7687', '127.0.0.1:7687')):
Failed to establish connection to ResolvedIPv6Address(('::1', 7687, 0, 0)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±)
Failed to establish connection to ResolvedIPv4Address(('127.0.0.1', 7687)) (reason [WinError 10061] Hedef makine etkin olarak reddettiƒüinden baƒülantƒ± kurulamadƒ±))
2025-08-01 17:39:41,797 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:39:41,797 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:39:43,895 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:39:43,896 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:39:43,897 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:39:43,928 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:39:43,933 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:39:43,982 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:39:43,989 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:39:44,001 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:39:44,005 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:39:44,007 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:39:44,009 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:39:44,011 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:39:44,013 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:39:44] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:39:44,017 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:39:44] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:39:44,018 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:39:44] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:39:44,371 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:39:44,540 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:39:44,541 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:39:44,544 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:39:44,547 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:39:44,552 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:39:44] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:39:47,915 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:39:48,032 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:39:48,033 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:39:48,037 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:39:48,038 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:39:48,039 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:39:48] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:40:00,366 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:40:00] "GET / HTTP/1.1" 200 -
2025-08-01 17:40:00,422 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:40:00,441 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:40:00] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:40:00,593 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:40:00,601 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:40:00,605 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:40:00,606 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:40:00,607 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:40:00] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:40:00,638 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:40:00,752 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:40:00,753 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:40:00,755 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:40:00,756 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:40:00,757 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:40:00] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:40:01,229 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:40:01,305 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:40:01,306 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:40:01,307 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:40:01,308 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:40:01,309 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:40:01] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:40:01,442 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 17:40:01,442 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 17:40:01,448 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 224.1s)
2025-08-01 17:40:01,449 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 17:40:01,455 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±nda']
2025-08-01 17:40:01,967 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:40:02,459 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 17:40:02,492 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:40:02,492 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:40:03,769 - __main__ - INFO - Gemini API call successful
2025-08-01 17:40:03,810 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH ()-[r]->() RETURN type(r), count(r)
2025-08-01 17:40:03,812 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN type(r), count(r)
2025-08-01 17:40:04,037 - __main__ - INFO - Query results: 2 rows
2025-08-01 17:40:04,038 - __main__ - INFO - Generating answer for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-01 17:40:06,783 - __main__ - INFO - Gemini API call successful
2025-08-01 17:40:06,808 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:40:06,819 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:40:06] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:40:10,337 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-01 17:40:10,340 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:40:10,550 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:40:10,555 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:40:10,564 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:40:10,566 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:40:10,621 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 17:40:10
2025-08-01 17:40:16,653 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:40:16] "GET / HTTP/1.1" 200 -
2025-08-01 17:40:16,707 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:40:16,710 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:40:16] "GET /api/history HTTP/1.1" 200 -
2025-08-01 17:40:16,816 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:40:16,817 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:40:16,819 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:40:16,819 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:40:16,820 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:40:16] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:40:16,838 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:40:17,269 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:40:17,270 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:40:17,272 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:40:17,272 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:40:17,273 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:40:17] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:40:18,228 - __main__ - INFO - Received question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 17:40:18,228 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 17:40:18,232 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 7.7s)
2025-08-01 17:40:18,233 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 17:40:18,237 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±ndaki']
2025-08-01 17:40:18,622 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:40:18,638 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 17:40:18,668 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:40:18,668 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:40:19,615 - __main__ - INFO - Gemini API call successful
2025-08-01 17:40:19,643 - __main__ - INFO - Generated Cypher with GraphRAG: CALL db.labels()
2025-08-01 17:40:19,643 - __main__ - INFO - Generated Cypher: CALL db.labels()
2025-08-01 17:40:19,696 - __main__ - INFO - Query results: 4 rows
2025-08-01 17:40:19,697 - __main__ - INFO - Generating answer for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-01 17:40:23,475 - __main__ - INFO - Gemini API call successful
2025-08-01 17:40:23,509 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:40:23,522 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:40:23] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:40:31,201 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:40:31,258 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:40:31,259 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:40:31,260 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:40:31,260 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:40:31,261 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:40:31] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:40:46,633 - __main__ - INFO - Received question: Logitech markasƒ±nƒ±n ili≈ükilerini getir
2025-08-01 17:40:46,634 - __main__ - INFO - Generating Cypher for question: Logitech markasƒ±nƒ±n ili≈ükilerini getir
2025-08-01 17:40:46,639 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 36.1s)
2025-08-01 17:40:46,639 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Logitech markasƒ±nƒ±n ili≈ükilerini getir
2025-08-01 17:40:46,644 - graphrag_pipeline - INFO - Extracted entities: ['Logitech']
2025-08-01 17:40:46,729 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:40:46,804 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:40:46,805 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:40:46,807 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:40:46,808 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:40:46,809 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:40:46] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:40:47,014 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-01 17:40:47,031 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-01 17:40:47,077 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-01 17:40:47,077 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-01 17:40:48,225 - __main__ - INFO - Gemini API call successful
2025-08-01 17:40:48,259 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (b:Brand {name: 'Logitech'})-[r]-(n) RETURN b, r, n
2025-08-01 17:40:48,259 - __main__ - INFO - Generated Cypher: MATCH (b:Brand {name: 'Logitech'})-[r]-(n) RETURN b, r, n
2025-08-01 17:40:48,411 - __main__ - INFO - Query results: 1 rows
2025-08-01 17:40:48,412 - __main__ - INFO - Generating answer for question: Logitech markasƒ±nƒ±n ili≈ükilerini getir
2025-08-01 17:40:53,170 - __main__ - INFO - Gemini API call successful
2025-08-01 17:40:53,195 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-01 17:40:53,203 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:40:53] "POST /api/ask HTTP/1.1" 200 -
2025-08-01 17:41:00,894 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:41:00,935 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:41:00,935 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:41:00,936 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:41:00,937 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:41:00,937 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:41:00] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:41:16,705 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:41:16,752 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:41:16,753 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:41:16,754 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:41:16,755 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:41:16,755 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:41:16] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:41:46,697 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:41:46,739 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:41:46,740 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:41:46,741 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:41:46,742 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:41:46,743 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:41:46] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:42:16,733 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:42:16,767 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:42:16,767 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:42:16,768 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:42:16,768 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:42:16,769 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:42:16] "GET /api/health HTTP/1.1" 200 -
2025-08-01 17:42:30,094 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-01 17:42:30,177 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:42:30,184 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-01 17:42:30,190 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-01 17:42:30,191 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-01 17:42:30,193 - werkzeug - INFO - 127.0.0.1 - - [01/Aug/2025 17:42:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:10:54,203 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 11:10:54,203 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 11:10:54,203 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 11:10:56,316 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 11:10:56,316 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 11:10:56,324 - embeddings - INFO - Semantic vector index created
2025-08-04 11:10:56,325 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 11:10:56,329 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 11:10:56,330 - __main__ - INFO - Neo4j available: True
2025-08-04 11:10:56,330 - __main__ - INFO - Gemini API available: True
2025-08-04 11:10:56,330 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 11:10:56,331 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 11:10:56,398 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 11:10:56,398 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 11:11:00,569 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:00] "GET / HTTP/1.1" 200 -
2025-08-04 11:11:00,687 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:11:00,758 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:00,760 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:11:00,763 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:00,763 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:11:00,764 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:00] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:11:01,148 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:01] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:11:01,180 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:11:01,224 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:01,225 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:11:01,228 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:01,228 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:11:01,229 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:01] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:11:01,989 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:11:01,990 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:11:01,993 - __main__ - INFO - üìä Schema cache expired/missing, fetching fresh schema...
2025-08-04 11:11:01,993 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:11:02,025 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:02,027 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:11:02,029 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:02,029 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:11:02,043 - __main__ - INFO - üìä Fresh schema cached successfully
2025-08-04 11:11:02,044 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:11:02,049 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±nda']
2025-08-04 11:11:02,950 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:11:02,983 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 11:11:03,000 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:11:03,001 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:11:04,124 - __main__ - INFO - Gemini API call successful
2025-08-04 11:11:04,137 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH ()-[r]->() RETURN count(r) AS totalRelationships
2025-08-04 11:11:04,138 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN count(r) AS totalRelationships
2025-08-04 11:11:04,605 - __main__ - INFO - Query results: 1 rows
2025-08-04 11:11:04,605 - __main__ - INFO - Generating answer for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:11:06,364 - __main__ - INFO - Gemini API call successful
2025-08-04 11:11:06,375 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:11:06,387 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:06] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:11:17,265 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:11:17,285 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:17,285 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:11:17,286 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:17,286 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:11:17,287 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:11:23,587 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:11:23,631 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:23,634 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:11:23,643 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:23,645 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:11:23,650 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:11:26,260 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:11:26,299 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:26,301 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:11:26,305 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:26,306 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:11:26,307 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:11:28,271 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:11:28,313 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:28,315 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:11:28,322 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:28,325 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:11:28,329 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:11:28,569 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:11:28,608 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:28,611 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:11:28,614 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:28,615 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:11:28,617 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:11:28,849 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:11:28,895 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:28,896 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:11:28,916 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:28,927 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:11:28,930 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:11:31,283 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:11:31,326 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:31,329 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:11:31,344 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:31,346 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:11:31,348 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:11:38,444 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:11:38,496 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:38,498 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:11:38,503 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:38,505 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:11:38,507 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:38] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:11:42,274 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:11:42,364 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:42,395 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:11:42,503 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:42,547 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:11:42,554 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:11:45,497 - __main__ - INFO - Received question: Bile≈üen Bazlƒ± √ñneriler: ƒ∞sterseniz, veritabanƒ±mƒ±zdaki ekran kartƒ±, i≈ülemci, RAM gibi temel bile≈üenleri ayrƒ± ayrƒ± inceleyebilir ve GTA 5'in √∂nerilen sistem gereksinimlerine uygun bir sistem olu≈üturabiliriz. Bu yakla≈üƒ±m, b√ºt√ßenize ve tercihlerinize g√∂re daha √∂zelle≈ütirilmi≈ü bir √ß√∂z√ºm sunabilir. Bile≈üen Bazlƒ± √ñneriler: ƒ∞sterseniz, veritabanƒ±mƒ±zdaki ekran kartƒ±, i≈ülemci, RAM gibi temel bile≈üenleri ayrƒ± ayrƒ± inceleyebilir ve GTA 5'in √∂nerilen sistem gereksinimlerine uygun bir sistem olu≈üturabiliriz. Bu yakla≈üƒ±m, b√ºt√ßenize ve tercihlerinize g√∂re daha √∂zelle≈ütirilmi≈ü bir √ß√∂z√ºm sunabilir. bunu yapmanƒ± istiyorum.
2025-08-04 11:11:45,499 - __main__ - INFO - Generating Cypher for question: Bile≈üen Bazlƒ± √ñneriler: ƒ∞sterseniz, veritabanƒ±mƒ±zdaki ekran kartƒ±, i≈ülemci, RAM gibi temel bile≈üenleri ayrƒ± ayrƒ± inceleyebilir ve GTA 5'in √∂nerilen sistem gereksinimlerine uygun bir sistem olu≈üturabiliriz. Bu yakla≈üƒ±m, b√ºt√ßenize ve tercihlerinize g√∂re daha √∂zelle≈ütirilmi≈ü bir √ß√∂z√ºm sunabilir. Bile≈üen Bazlƒ± √ñneriler: ƒ∞sterseniz, veritabanƒ±mƒ±zdaki ekran kartƒ±, i≈ülemci, RAM gibi temel bile≈üenleri ayrƒ± ayrƒ± inceleyebilir ve GTA 5'in √∂nerilen sistem gereksinimlerine uygun bir sistem olu≈üturabiliriz. Bu yakla≈üƒ±m, b√ºt√ßenize ve tercihlerinize g√∂re daha √∂zelle≈ütirilmi≈ü bir √ß√∂z√ºm sunabilir. bunu yapmanƒ± istiyorum.
2025-08-04 11:11:45,504 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 43.5s)
2025-08-04 11:11:45,505 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Bile≈üen Bazlƒ± √ñneriler: ƒ∞sterseniz, veritabanƒ±mƒ±zdaki ekran kartƒ±, i≈ülemci, RAM gibi temel bile≈üenleri ayrƒ± ayrƒ± inceleyebilir ve GTA 5'in √∂nerilen sistem gereksinimlerine uygun bir sistem olu≈üturabiliriz. Bu yakla≈üƒ±m, b√ºt√ßenize ve tercihlerinize g√∂re daha √∂zelle≈ütirilmi≈ü bir √ß√∂z√ºm sunabilir. Bile≈üen Bazlƒ± √ñneriler: ƒ∞sterseniz, veritabanƒ±mƒ±zdaki ekran kartƒ±, i≈ülemci, RAM gibi temel bile≈üenleri ayrƒ± ayrƒ± inceleyebilir ve GTA 5'in √∂nerilen sistem gereksinimlerine uygun bir sistem olu≈üturabiliriz. Bu yakla≈üƒ±m, b√ºt√ßenize ve tercihlerinize g√∂re daha √∂zelle≈ütirilmi≈ü bir √ß√∂z√ºm sunabilir. bunu yapmanƒ± istiyorum.
2025-08-04 11:11:45,512 - graphrag_pipeline - INFO - Extracted entities: ['Bazlƒ±', '√ñneriler', 'GTA', 'Bile≈üen', 'RAM']
2025-08-04 11:11:45,897 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:11:45,921 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 11:11:45,949 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:11:45,951 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:11:46,639 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:11:46,661 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:46,662 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:11:46,663 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:46,664 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:11:46,665 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:46] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:11:47,641 - __main__ - INFO - Gemini API call successful
2025-08-04 11:11:47,662 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (gpu:Product) WHERE toLower(gpu.category) CONTAINS 'ekran kartƒ±' WITH gpu MATCH (cpu:Product) WHERE toLower(cpu.category) CONTAINS 'i≈ülemci' WITH gpu, cpu MATCH (ram:Product) WHERE toLower(ram.category) CONTAINS 'ram' OR toLower(ram.name) CONTAINS 'ram' RETURN gpu, cpu, ram
2025-08-04 11:11:47,663 - __main__ - INFO - Generated Cypher: MATCH (gpu:Product) WHERE toLower(gpu.category) CONTAINS 'ekran kartƒ±' WITH gpu MATCH (cpu:Product) WHERE toLower(cpu.category) CONTAINS 'i≈ülemci' WITH gpu, cpu MATCH (ram:Product) WHERE toLower(ram.category) CONTAINS 'ram' OR toLower(ram.name) CONTAINS 'ram' RETURN gpu, cpu, ram
2025-08-04 11:11:49,380 - __main__ - INFO - Query results: 8 rows
2025-08-04 11:11:49,382 - __main__ - INFO - Generating answer for question: Bile≈üen Bazlƒ± √ñneriler: ƒ∞sterseniz, veritabanƒ±mƒ±zdaki ekran kartƒ±, i≈ülemci, RAM gibi temel bile≈üenleri ayrƒ± ayrƒ± inceleyebilir ve GTA 5'in √∂nerilen sistem gereksinimlerine uygun bir sistem olu≈üturabiliriz. Bu yakla≈üƒ±m, b√ºt√ßenize ve tercihlerinize g√∂re daha √∂zelle≈ütirilmi≈ü bir √ß√∂z√ºm sunabilir. Bile≈üen Bazlƒ± √ñneriler: ƒ∞sterseniz, veritabanƒ±mƒ±zdaki ekran kartƒ±, i≈ülemci, RAM gibi temel bile≈üenleri ayrƒ± ayrƒ± inceleyebilir ve GTA 5'in √∂nerilen sistem gereksinimlerine uygun bir sistem olu≈üturabiliriz. Bu yakla≈üƒ±m, b√ºt√ßenize ve tercihlerinize g√∂re daha √∂zelle≈ütirilmi≈ü bir √ß√∂z√ºm sunabilir. bunu yapmanƒ± istiyorum.
2025-08-04 11:11:52,347 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:11:52,386 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:52,387 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:11:52,390 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:11:52,391 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:11:52,392 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:52] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:11:56,413 - __main__ - INFO - Gemini API call successful
2025-08-04 11:11:56,427 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:11:56,438 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:11:56] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:12:08,580 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:12:08,620 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:08,621 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:12:08,625 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:08,625 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:12:08,628 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:12:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:12:11,990 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:12:12,023 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:12,025 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:12:12,026 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:12,027 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:12:12,028 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:12:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:12:13,003 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:12:13,004 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:12:13,010 - __main__ - INFO - Using cached Cypher query
2025-08-04 11:12:13,011 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN count(r) AS totalRelationships
2025-08-04 11:12:13,020 - __main__ - INFO - Query results: 1 rows
2025-08-04 11:12:13,021 - __main__ - INFO - Generating answer for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:12:13,029 - __main__ - INFO - Using cached answer
2025-08-04 11:12:13,048 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:12:13] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:12:14,572 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:12:14,615 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:14,617 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:12:14,620 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:14,621 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:12:14,623 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:12:14] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:12:17,038 - __main__ - INFO - Received question: ka√ß d√ºƒü√ºm var
2025-08-04 11:12:17,039 - __main__ - INFO - Generating Cypher for question: ka√ß d√ºƒü√ºm var
2025-08-04 11:12:17,043 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 75.0s)
2025-08-04 11:12:17,043 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: ka√ß d√ºƒü√ºm var
2025-08-04 11:12:17,049 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 11:12:17,261 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:12:17,297 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:17,298 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:12:17,300 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:17,301 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:12:17,302 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:12:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:12:18,061 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:12:18,085 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:12:18,086 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:12:18,254 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:12:18,283 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:18,283 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:12:18,285 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:18,286 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:12:18,287 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:12:18] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:12:19,024 - __main__ - INFO - Gemini API call successful
2025-08-04 11:12:19,045 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) RETURN count(n) AS totalNodes
2025-08-04 11:12:19,046 - __main__ - INFO - Generated Cypher: MATCH (n) RETURN count(n) AS totalNodes
2025-08-04 11:12:19,154 - __main__ - INFO - Query results: 1 rows
2025-08-04 11:12:19,154 - __main__ - INFO - Generating answer for question: ka√ß d√ºƒü√ºm var
2025-08-04 11:12:20,770 - __main__ - INFO - Gemini API call successful
2025-08-04 11:12:20,788 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:12:20,800 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:12:20] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:12:22,563 - __main__ - INFO - Received question: ka√ß √∂zellik var
2025-08-04 11:12:22,564 - __main__ - INFO - Generating Cypher for question: ka√ß √∂zellik var
2025-08-04 11:12:22,568 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 80.5s)
2025-08-04 11:12:22,568 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: ka√ß √∂zellik var
2025-08-04 11:12:22,574 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 11:12:22,934 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:12:22,963 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:12:22,964 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:12:24,114 - __main__ - INFO - Gemini API call successful
2025-08-04 11:12:24,141 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) UNWIND keys(n) AS property RETURN count(DISTINCT property) AS totalProperties
2025-08-04 11:12:24,141 - __main__ - INFO - Generated Cypher: MATCH (n) UNWIND keys(n) AS property RETURN count(DISTINCT property) AS totalProperties
2025-08-04 11:12:24,434 - __main__ - INFO - Query results: 1 rows
2025-08-04 11:12:24,434 - __main__ - INFO - Generating answer for question: ka√ß √∂zellik var
2025-08-04 11:12:27,570 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:12:27,612 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:27,614 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:12:27,615 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:27,616 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:12:27,617 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:12:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:12:33,994 - __main__ - INFO - Gemini API call successful
2025-08-04 11:12:34,035 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:12:34,053 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:12:34] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:12:38,577 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:12:38,616 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:38,617 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:12:38,622 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:38,625 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:12:38,626 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:12:38] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:12:41,988 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:12:42,028 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:42,029 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:12:42,030 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:42,032 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:12:42,033 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:12:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:12:44,584 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:12:44,637 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:44,638 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:12:44,640 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:44,641 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:12:44,643 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:12:44] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:12:47,263 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:12:47,284 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:47,285 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:12:47,286 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:47,286 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:12:47,287 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:12:47] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:12:51,513 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:12:51,553 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:51,555 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:12:51,559 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:51,559 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:12:51,561 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:12:51] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:12:53,591 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:12:53,614 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:53,615 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:12:53,617 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:12:53,617 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:12:53,618 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:12:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:13:11,566 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:13:11,604 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:11,604 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:13:11,606 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:11,607 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:13:11,607 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:13:11] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:13:12,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:13:12,287 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:12,289 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:13:12,292 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:12,292 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:13:12,293 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:13:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:13:14,268 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:13:14,296 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:14,297 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:13:14,299 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:14,300 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:13:14,301 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:13:14] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:13:15,265 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:13:15,297 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:15,298 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:13:15,299 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:15,302 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:13:15,305 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:13:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:13:16,947 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:13:16,998 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:16,999 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:13:17,000 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:17,001 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:13:17,002 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:13:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:13:17,479 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:13:17,524 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:17,525 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:13:17,528 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:17,529 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:13:17,530 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:13:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:13:38,566 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:13:38,594 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:38,595 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:13:38,596 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:38,597 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:13:38,598 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:13:38] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:13:41,565 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:13:41,589 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:41,590 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:13:41,591 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:41,592 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:13:41,592 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:13:41] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:13:42,265 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:13:42,297 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:42,298 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:13:42,300 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:42,300 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:13:42,301 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:13:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:13:44,276 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:13:44,296 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:44,297 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:13:44,297 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:44,298 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:13:44,298 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:13:44] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:13:45,263 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:13:45,292 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:45,293 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:13:45,295 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:45,295 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:13:45,296 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:13:45] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:13:47,590 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:13:47,609 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:47,609 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:13:47,611 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:13:47,612 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:13:47,612 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:13:47] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:14:08,572 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:14:08,600 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:14:08,602 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:14:08,604 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:14:08,605 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:14:08,606 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:14:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:14:11,568 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:14:11,594 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:14:11,595 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:14:11,598 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:14:11,599 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:14:11,600 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:14:11] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:14:12,266 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:14:12,312 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:14:12,313 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:14:12,315 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:14:12,316 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:14:12,317 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:14:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:14:14,252 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:14:14,273 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:14:14,274 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:14:14,275 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:14:14,276 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:14:14,277 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:14:14] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:14:17,567 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:14:17,584 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:14:17,584 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:14:17,585 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:14:17,586 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:14:17,586 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:14:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:14:28,268 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:14:28,292 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:14:28,292 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:14:28,295 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:14:28,297 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:14:28,300 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:15:09,254 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:15:09,271 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:15:09,271 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:15:09,273 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:15:09,273 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:15:09,274 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:15:09] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:15:12,569 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:15:12,586 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:15:12,586 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:15:12,587 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:15:12,588 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:15:12,589 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:15:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:15:13,251 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:15:13,268 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:15:13,268 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:15:13,270 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:15:13,270 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:15:13,271 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:15:13] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:15:15,256 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:15:15,300 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:15:15,301 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:15:15,302 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:15:15,303 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:15:15,304 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:15:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:15:18,566 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:15:18,603 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:15:18,603 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:15:18,604 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:15:18,605 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:15:18,605 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:15:18] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:15:28,254 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:15:28,298 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:15:28,299 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:15:28,300 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:15:28,300 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:15:28,301 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:15:56,330 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 11:15:56,331 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:15:56,383 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:15:56,384 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:15:56,385 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:15:56,386 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:15:56,403 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 11:15:56
2025-08-04 11:16:10,282 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:16:10,305 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:16:10,305 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:16:10,307 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:16:10,307 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:16:10,309 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:16:10] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:16:13,582 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:16:13,603 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:16:13,604 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:16:13,605 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:16:13,606 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:16:13,606 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:16:13] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:16:14,263 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:16:14,300 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:16:14,301 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:16:14,305 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:16:14,307 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:16:14,309 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:16:14] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:16:16,278 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:16:16,297 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:16:16,297 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:16:16,298 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:16:16,299 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:16:16,299 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:16:16] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:16:19,584 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:16:19,601 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:16:19,601 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:16:19,602 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:16:19,603 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:16:19,604 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:16:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:16:28,263 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:16:28,282 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:16:28,283 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:16:28,284 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:16:28,285 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:16:28,285 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:17:11,260 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:17:11,312 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:17:11,313 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:17:11,315 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:17:11,315 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:17:11,316 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:17:11] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:17:14,573 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:17:14,592 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:17:14,593 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:17:14,594 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:17:14,594 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:17:14,594 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:17:14] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:17:15,266 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:17:15,286 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:17:15,287 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:17:15,288 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:17:15,289 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:17:15,290 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:17:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:17:17,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:17:17,270 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:17:17,270 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:17:17,272 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:17:17,273 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:17:17,274 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:17:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:17:20,577 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:17:20,595 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:17:20,596 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:17:20,597 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:17:20,597 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:17:20,598 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:17:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:17:28,264 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:17:28,292 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:17:28,292 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:17:28,294 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:17:28,294 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:17:28,295 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:18:12,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:18:12,284 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:18:12,285 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:18:12,287 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:18:12,287 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:18:12,288 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:18:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:18:15,593 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:18:15,632 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:18:15,634 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:18:15,644 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:18:15,645 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:18:15,649 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:18:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:18:16,267 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:18:16,297 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:18:16,298 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:18:16,299 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:18:16,300 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:18:16,301 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:18:16] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:18:18,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:18:18,285 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:18:18,285 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:18:18,287 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:18:18,288 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:18:18,289 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:18:18] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:18:21,559 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:18:21,578 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:18:21,579 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:18:21,580 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:18:21,580 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:18:21,581 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:18:21] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:18:28,263 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:18:28,280 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:18:28,281 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:18:28,282 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:18:28,282 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:18:28,283 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:19:13,554 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:19:13,573 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:19:13,573 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:19:13,574 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:19:13,575 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:19:13,575 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:19:13] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:19:16,259 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:19:16,278 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:19:16,279 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:19:16,280 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:19:16,281 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:19:16,281 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:19:16] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:19:17,251 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:19:17,271 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:19:17,272 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:19:17,273 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:19:17,273 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:19:17,274 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:19:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:19:19,583 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:19:19,606 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:19:19,606 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:19:19,608 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:19:19,609 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:19:19,609 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:19:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:19:22,275 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:19:22,292 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:19:22,292 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:19:22,295 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:19:22,295 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:19:22,296 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:19:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:19:28,252 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:19:28,271 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:19:28,271 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:19:28,272 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:19:28,273 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:19:28,273 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:20:14,560 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:20:14,602 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:20:14,602 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:20:14,604 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:20:14,604 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:20:14,605 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:20:14] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:20:17,252 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:20:17,268 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:20:17,268 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:20:17,269 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:20:17,269 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:20:17,270 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:20:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:20:18,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:20:18,264 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:20:18,264 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:20:18,265 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:20:18,265 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:20:18,265 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:20:18] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:20:20,579 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:20:20,607 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:20:20,607 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:20:20,608 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:20:20,609 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:20:20,609 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:20:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:20:23,261 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:20:23,275 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:20:23,276 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:20:23,277 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:20:23,278 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:20:23,278 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:20:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:20:28,264 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:20:28,278 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:20:28,278 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:20:28,279 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:20:28,280 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:20:28,280 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:20:56,403 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 11:20:56,404 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:20:56,422 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:20:56,423 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:20:56,424 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:20:56,424 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:20:56,450 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 11:20:56
2025-08-04 11:21:15,570 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:21:15,585 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:21:15,586 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:21:15,586 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:21:15,587 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:21:15,587 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:21:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:21:18,256 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:21:18,276 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:21:18,277 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:21:18,278 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:21:18,278 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:21:18,279 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:21:18] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:21:19,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:21:19,289 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:21:19,290 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:21:19,291 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:21:19,291 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:21:19,291 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:21:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:21:21,556 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:21:21,570 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:21:21,570 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:21:21,571 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:21:21,571 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:21:21,572 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:21:21] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:21:24,249 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:21:24,292 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:21:24,293 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:21:24,294 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:21:24,294 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:21:24,295 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:21:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:21:28,252 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:21:28,267 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:21:28,268 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:21:28,269 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:21:28,269 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:21:28,270 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:22:16,575 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:22:16,589 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:22:16,590 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:22:16,591 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:22:16,591 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:22:16,592 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:22:16] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:22:19,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:22:19,294 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:22:19,294 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:22:19,295 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:22:19,296 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:22:19,296 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:22:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:22:20,259 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:22:20,272 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:22:20,272 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:22:20,273 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:22:20,273 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:22:20,274 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:22:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:22:22,561 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:22:22,581 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:22:22,581 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:22:22,582 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:22:22,582 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:22:22,583 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:22:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:22:25,259 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:22:25,276 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:22:25,276 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:22:25,277 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:22:25,277 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:22:25,278 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:22:25] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:22:28,255 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:22:28,273 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:22:28,273 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:22:28,274 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:22:28,274 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:22:28,275 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:23:17,566 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:23:17,581 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:23:17,581 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:23:17,582 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:23:17,583 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:23:17,583 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:23:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:23:20,261 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:23:20,277 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:23:20,278 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:23:20,278 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:23:20,279 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:23:20,279 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:23:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:23:21,262 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:23:21,276 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:23:21,277 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:23:21,278 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:23:21,278 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:23:21,279 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:23:21] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:23:23,570 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:23:23,592 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:23:23,592 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:23:23,593 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:23:23,593 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:23:23,594 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:23:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:23:26,576 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:23:26,599 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:23:26,600 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:23:26,602 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:23:26,602 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:23:26,605 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:23:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:23:28,262 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:23:28,283 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:23:28,284 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:23:28,285 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:23:28,286 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:23:28,287 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:24:18,581 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:24:18,596 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:24:18,597 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:24:18,598 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:24:18,598 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:24:18,599 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:24:18] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:24:21,266 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:24:21,288 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:24:21,289 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:24:21,291 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:24:21,291 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:24:21,292 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:24:21] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:24:22,262 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:24:22,287 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:24:22,287 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:24:22,289 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:24:22,290 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:24:22,291 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:24:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:24:24,567 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:24:24,599 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:24:24,601 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:24:24,604 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:24:24,605 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:24:24,606 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:24:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:24:25,743 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 11:24:25,743 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 11:24:25,744 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 11:24:27,586 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:24:27,607 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:24:27,608 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:24:27,609 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:24:27,609 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:24:27,610 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:24:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:24:28,050 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 11:24:28,050 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 11:24:28,073 - embeddings - INFO - Semantic vector index created
2025-08-04 11:24:28,075 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 11:24:28,083 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 11:24:28,084 - __main__ - INFO - Neo4j available: True
2025-08-04 11:24:28,085 - __main__ - INFO - Gemini API available: True
2025-08-04 11:24:28,086 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 11:24:28,087 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 11:24:28,268 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:24:28,293 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 11:24:28,294 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 11:24:28,296 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:24:28,296 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:24:28,297 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:24:28,298 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:24:28,299 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:25:19,556 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:25:19,583 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:25:19,584 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:25:19,585 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:25:19,585 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:25:19,586 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:25:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:25:22,254 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:25:22,297 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:25:22,297 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:25:22,298 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:25:22,299 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:25:22,299 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:25:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:25:23,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:25:23,292 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:25:23,292 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:25:23,295 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:25:23,295 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:25:23,296 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:25:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:25:25,607 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:25:25,623 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:25:25,624 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:25:25,625 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:25:25,625 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:25:25,626 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:25:25] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:25:28,266 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:25:28,267 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:25:28,285 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:25:28,286 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:25:28,286 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:25:28,287 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:25:28,287 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:25:28,288 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:25:28,288 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:25:28,289 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:25:28,289 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:25:28,290 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:25:56,450 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 11:25:56,451 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:25:56,475 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:25:56,475 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:25:56,477 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:25:56,478 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:25:56,506 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 11:25:56
2025-08-04 11:26:19,240 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:26:19,276 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:26:19,277 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:26:19,278 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:26:19,279 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:26:19,280 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:26:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:26:20,568 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:26:20,587 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:26:20,588 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:26:20,588 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:26:20,589 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:26:20,589 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:26:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:26:23,254 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:26:23,272 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:26:23,272 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:26:23,273 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:26:23,274 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:26:23,274 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:26:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:26:26,572 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:26:26,589 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:26:26,589 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:26:26,590 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:26:26,590 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:26:26,591 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:26:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:26:28,258 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:26:28,259 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:26:28,292 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:26:28,293 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:26:28,294 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:26:28,300 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:26:28,301 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:26:28,301 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:26:28,303 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:26:28,304 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:26:28,304 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:26:28,306 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:26:42,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:26:42,271 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:26:42,271 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:26:42,272 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:26:42,272 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:26:42,273 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:26:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:27:12,291 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:27:12,310 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:27:12,311 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:27:12,311 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:27:12,312 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:27:12,312 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:27:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:27:21,559 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:27:21,585 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:27:21,586 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:27:21,587 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:27:21,588 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:27:21,589 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:27:21] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:27:24,256 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:27:24,280 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:27:24,280 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:27:24,281 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:27:24,282 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:27:24,284 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:27:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:27:27,565 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:27:27,596 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:27:27,597 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:27:27,598 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:27:27,600 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:27:27,601 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:27:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:27:28,263 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:27:28,265 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:27:28,294 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:27:28,294 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:27:28,295 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:27:28,295 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:27:28,296 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:27:28,298 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:27:28,299 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:27:28,299 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:27:28,300 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:27:28,302 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:27:42,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:27:42,280 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:27:42,282 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:27:42,285 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:27:42,287 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:27:42,290 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:27:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:28:22,572 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:28:22,602 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:28:22,602 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:28:22,604 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:28:22,605 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:28:22,606 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:28:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:28:25,260 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:28:25,287 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:28:25,287 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:28:25,289 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:28:25,289 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:28:25,291 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:28:25] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:28:40,489 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 11:28:40,490 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 11:28:40,490 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 11:28:42,554 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 11:28:42,554 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 11:28:42,560 - embeddings - INFO - Semantic vector index created
2025-08-04 11:28:42,561 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 11:28:42,567 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 11:28:42,567 - __main__ - INFO - Neo4j available: True
2025-08-04 11:28:42,568 - __main__ - INFO - Gemini API available: True
2025-08-04 11:28:42,568 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 11:28:42,569 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 11:28:42,627 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 11:28:42,627 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 11:28:45,125 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:28:45] "GET / HTTP/1.1" 200 -
2025-08-04 11:28:45,743 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:28:45,750 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:28:45] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:28:45,793 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:28:45,793 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:28:45,795 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:28:45,795 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:28:45,798 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:28:45] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:28:45,958 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:28:45,999 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:28:46,001 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:28:46,002 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:28:46,003 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:28:46,004 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:28:46] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:28:46,674 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:28:46,675 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:28:46,681 - __main__ - INFO - Using cached Cypher query
2025-08-04 11:28:46,682 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN count(r) AS totalRelationships
2025-08-04 11:28:46,690 - __main__ - INFO - Query results: 1 rows
2025-08-04 11:28:46,690 - __main__ - INFO - Generating answer for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:28:46,695 - __main__ - INFO - Using cached answer
2025-08-04 11:28:46,708 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:28:46] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:28:51,488 - __main__ - INFO - Received question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:28:51,489 - __main__ - INFO - Generating Cypher for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:28:51,493 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 13.0s)
2025-08-04 11:28:51,494 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:28:51,505 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:28:51] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:28:53,108 - __main__ - INFO - Received question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:28:53,109 - __main__ - INFO - Generating Cypher for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:28:53,114 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 14.6s)
2025-08-04 11:28:53,115 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:28:53,121 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:28:53] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:28:54,192 - __main__ - INFO - Received question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:28:54,193 - __main__ - INFO - Generating Cypher for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:28:54,198 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 15.7s)
2025-08-04 11:28:54,199 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:28:54,204 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:28:54] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:28:54,498 - __main__ - INFO - Received question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:28:54,499 - __main__ - INFO - Generating Cypher for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:28:54,504 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 16.0s)
2025-08-04 11:28:54,505 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:28:54,509 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:28:54] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:28:54,672 - __main__ - INFO - Received question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:28:54,673 - __main__ - INFO - Generating Cypher for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:28:54,677 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 16.2s)
2025-08-04 11:28:54,678 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:28:54,686 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:28:54] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:29:42,106 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 11:29:42,107 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 11:29:42,107 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 11:29:44,181 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 11:29:44,181 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 11:29:44,194 - embeddings - INFO - Semantic vector index created
2025-08-04 11:29:44,195 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 11:29:44,202 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 11:29:44,203 - __main__ - INFO - Neo4j available: True
2025-08-04 11:29:44,204 - __main__ - INFO - Gemini API available: True
2025-08-04 11:29:44,204 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 11:29:44,205 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 11:29:44,257 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 11:29:44,257 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 11:29:45,969 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:29:46,010 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:29:46,011 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:29:46,020 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:29:46,021 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:29:46,023 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:29:46] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:29:48,404 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:29:48,404 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:29:48,413 - __main__ - INFO - Using cached Cypher query
2025-08-04 11:29:48,414 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN count(r) AS totalRelationships
2025-08-04 11:29:48,421 - __main__ - INFO - Query results: 1 rows
2025-08-04 11:29:48,422 - __main__ - INFO - Generating answer for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:29:48,428 - __main__ - INFO - Using cached answer
2025-08-04 11:29:48,441 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:29:48] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:29:50,809 - __main__ - INFO - Received question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-04 11:29:50,809 - __main__ - INFO - Generating Cypher for question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-04 11:29:50,813 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 10.2s)
2025-08-04 11:29:50,813 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:29:50,822 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:29:50] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:29:54,251 - __main__ - INFO - Received question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:29:54,252 - __main__ - INFO - Generating Cypher for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:29:54,256 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 13.7s)
2025-08-04 11:29:54,256 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:29:54,260 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:29:54] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:29:54,939 - __main__ - INFO - Received question: En b√ºy√ºk baƒülƒ± bile≈üen nedir?
2025-08-04 11:29:54,940 - __main__ - INFO - Generating Cypher for question: En b√ºy√ºk baƒülƒ± bile≈üen nedir?
2025-08-04 11:29:54,946 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 14.4s)
2025-08-04 11:29:54,946 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:29:54,952 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:29:54] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:29:55,443 - __main__ - INFO - Received question: Orphan nodelarƒ± listele
2025-08-04 11:29:55,443 - __main__ - INFO - Generating Cypher for question: Orphan nodelarƒ± listele
2025-08-04 11:29:55,449 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 14.9s)
2025-08-04 11:29:55,449 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:29:55,455 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:29:55] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:30:08,045 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:30:08] "GET / HTTP/1.1" 200 -
2025-08-04 11:30:08,085 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:30:08,100 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:30:08] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:30:08,124 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:08,127 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:30:08,133 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:08,137 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:30:08,138 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:30:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:30:08,153 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:30:08,185 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:08,186 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:30:08,187 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:08,188 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:30:08,189 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:30:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:30:09,231 - __main__ - INFO - Received question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-04 11:30:09,232 - __main__ - INFO - Generating Cypher for question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-04 11:30:09,235 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 28.7s)
2025-08-04 11:30:09,235 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:30:09,239 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:30:09] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:30:10,287 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:30:10,287 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:30:10,290 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 29.7s)
2025-08-04 11:30:10,290 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:30:10,293 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:30:10] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:30:10,789 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:30:10,789 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:30:10,791 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 30.2s)
2025-08-04 11:30:10,792 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:30:10,797 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:30:10] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:30:11,109 - __main__ - INFO - Received question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:30:11,109 - __main__ - INFO - Generating Cypher for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:30:11,113 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 30.5s)
2025-08-04 11:30:11,114 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:30:11,122 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:30:11] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:30:24,569 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:30:24,586 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:24,587 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:30:24,588 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:24,589 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:30:24,590 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:30:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:30:27,251 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:30:27,268 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:27,269 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:30:27,270 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:27,270 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:30:27,271 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:30:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:30:28,261 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:30:28,275 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:28,275 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:30:28,276 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:28,276 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:30:28,277 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:30:28,286 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:30:28,302 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:28,302 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:30:28,303 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:28,303 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:30:28,304 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:30:28,562 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:30:28,579 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:28,580 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:30:28,581 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:28,581 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:30:28,581 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:30:28,827 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:30:28,846 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:28,846 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:30:28,847 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:28,847 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:30:28,848 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:30:38,264 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:30:38,284 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:38,285 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:30:38,285 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:30:38,286 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:30:38,286 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:30:38] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:30:49,761 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 11:30:49,762 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 11:30:49,762 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 11:30:51,849 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 11:30:51,849 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 11:30:51,855 - embeddings - INFO - Semantic vector index created
2025-08-04 11:30:51,856 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 11:30:51,863 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 11:30:51,863 - __main__ - INFO - Neo4j available: True
2025-08-04 11:30:51,864 - __main__ - INFO - Gemini API available: True
2025-08-04 11:30:51,864 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 11:30:51,866 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 11:30:51,946 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 11:30:51,947 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 11:31:08,259 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:31:08,275 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:08,276 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:31:08,276 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:08,277 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:31:08,277 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:31:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:31:25,563 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:31:25,578 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:25,579 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:31:25,580 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:25,581 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:31:25,581 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:31:25] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:31:28,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:31:28,267 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:28,268 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:31:28,269 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:28,269 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:31:28,270 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:31:28,583 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:31:28,638 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:28,639 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:31:28,640 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:28,641 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:31:28,642 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:31:28,839 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:31:28,863 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:28,864 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:31:28,865 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:28,865 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:31:28,866 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:31:30,285 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:31:30,300 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:30,301 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:31:30,302 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:30,302 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:31:30,303 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:31:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:31:30,313 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:31:30,329 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:30,330 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:31:30,331 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:30,331 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:31:30,332 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:31:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:31:38,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:31:38,277 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:38,277 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:31:38,278 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:38,279 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:31:38,279 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:31:38] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:31:49,940 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:31:49] "GET /?id=a0a44379-47f4-4fc5-8f37-b2d99c9852df&vscodeBrowserReqId=1754296309910 HTTP/1.1" 200 -
2025-08-04 11:31:50,629 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:31:50,638 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:31:50] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:31:50,667 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:50,669 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:31:50,673 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:50,675 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:31:50,677 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:31:50] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:31:50,885 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:31:50,919 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:50,920 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:31:50,924 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:31:50,926 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:31:50,927 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:31:50] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:31:52,869 - __main__ - INFO - Received question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:31:52,870 - __main__ - INFO - Generating Cypher for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:31:52,874 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 132.3s)
2025-08-04 11:31:52,875 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:31:52,882 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:31:52] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:32:08,263 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:32:08,288 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:08,289 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:32:08,291 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:08,291 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:32:08,292 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:32:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:32:20,609 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:32:20,654 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:20,656 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:32:20,669 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:20,672 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:32:20,673 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:32:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:32:26,576 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:32:26,614 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:26,615 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:32:26,622 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:26,624 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:32:26,625 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:32:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:32:28,260 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:32:28,261 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:32:28,300 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:28,302 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:32:28,305 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:28,307 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:32:28,308 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:28,311 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:32:28,313 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:32:28,322 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:28,324 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:32:28,327 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:32:28,346 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:32:28,382 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:28,383 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:32:28,387 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:28,388 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:32:28,390 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:32:28,635 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:32:28,657 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:28,658 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:32:28,660 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:28,661 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:32:28,662 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:32:28,888 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:32:28,916 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:28,917 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:32:28,919 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:28,920 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:32:28,921 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:32:38,260 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:32:38,298 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:38,309 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:32:38,316 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:38,319 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:32:38,324 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:32:38] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:32:41,957 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:32:41] "GET / HTTP/1.1" 200 -
2025-08-04 11:32:42,070 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:32:42,140 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:32:42] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:32:42,175 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:42,183 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:32:42,185 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:42,186 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:32:42,188 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:32:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:32:42,219 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:32:42,281 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:42,283 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:32:42,285 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:42,287 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:32:42,288 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:32:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:32:43,483 - __main__ - INFO - Received question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-04 11:32:43,484 - __main__ - INFO - Generating Cypher for question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-04 11:32:43,489 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 182.9s)
2025-08-04 11:32:43,490 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:32:43,505 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:32:43] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:32:50,618 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:32:50,642 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:50,643 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:32:50,645 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:32:50,645 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:32:50,646 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:32:50] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:33:12,259 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:33:12,279 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:12,280 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:33:12,281 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:12,282 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:33:12,283 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:33:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:33:20,611 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:33:20,653 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:20,654 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:33:20,655 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:20,656 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:33:20,657 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:33:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:33:27,568 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:33:27,597 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:27,597 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:33:27,599 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:27,600 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:33:27,601 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:33:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:33:28,265 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:33:28,269 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:33:28,304 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:28,306 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:28,306 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:33:28,308 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:33:28,311 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:28,314 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:28,318 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:33:28,319 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:33:28,324 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:33:28,326 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:33:28,347 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:33:28,386 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:28,387 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:33:28,392 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:28,393 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:33:28,395 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:33:28,641 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:33:28,664 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:28,665 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:33:28,667 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:28,668 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:33:28,669 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:33:28,892 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:33:28,922 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:28,923 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:33:28,925 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:28,925 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:33:28,926 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:33:42,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:33:42,295 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:42,296 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:33:42,298 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:42,299 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:33:42,300 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:33:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:33:50,619 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:33:50,637 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:50,638 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:33:50,639 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:33:50,639 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:33:50,640 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:33:50] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:34:02,042 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:02] "GET /?id=a0a44379-47f4-4fc5-8f37-b2d99c9852df&vscodeBrowserReqId=1754296441978 HTTP/1.1" 200 -
2025-08-04 11:34:02,135 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:34:02,153 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:02] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:34:02,179 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:02,180 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:34:02,182 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:02,183 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:34:02,185 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:02] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:34:02,200 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:34:02,232 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:02,233 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:34:02,235 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:02,236 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:34:02,237 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:02] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:34:05,621 - __main__ - INFO - Received question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:34:05,622 - __main__ - INFO - Generating Cypher for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:34:05,626 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 265.1s)
2025-08-04 11:34:05,627 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:34:05,633 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:05] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:34:12,265 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:34:12,285 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:12,285 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:34:12,287 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:12,287 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:34:12,288 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:34:18,996 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:18] "GET / HTTP/1.1" 200 -
2025-08-04 11:34:19,040 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:34:19,079 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:19] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:34:19,082 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:19,083 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:34:19,086 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:19,090 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:34:19,091 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:34:19,118 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:34:19,150 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:19,150 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:34:19,151 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:19,152 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:34:19,153 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:34:20,579 - __main__ - INFO - Received question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:34:20,579 - __main__ - INFO - Generating Cypher for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:34:20,582 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 280.0s)
2025-08-04 11:34:20,583 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:34:20,595 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:20] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:34:21,402 - __main__ - INFO - Received question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:34:21,402 - __main__ - INFO - Generating Cypher for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:34:21,410 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 280.8s)
2025-08-04 11:34:21,412 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:34:21,417 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:21] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:34:21,698 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:34:21,699 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:34:21,701 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 281.1s)
2025-08-04 11:34:21,702 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:34:21,709 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:21] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:34:22,166 - __main__ - INFO - Received question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-04 11:34:22,167 - __main__ - INFO - Generating Cypher for question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-04 11:34:22,171 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 281.6s)
2025-08-04 11:34:22,172 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:34:22,181 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:22] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:34:22,482 - __main__ - INFO - Received question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-04 11:34:22,483 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-04 11:34:22,485 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 281.9s)
2025-08-04 11:34:22,485 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:34:22,492 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:22] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:34:22,935 - __main__ - INFO - Received question: En b√ºy√ºk baƒülƒ± bile≈üen nedir?
2025-08-04 11:34:22,935 - __main__ - INFO - Generating Cypher for question: En b√ºy√ºk baƒülƒ± bile≈üen nedir?
2025-08-04 11:34:22,941 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 282.4s)
2025-08-04 11:34:22,942 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:34:22,948 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:22] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:34:23,325 - __main__ - INFO - Received question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-04 11:34:23,327 - __main__ - INFO - Generating Cypher for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-04 11:34:23,330 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 282.8s)
2025-08-04 11:34:23,331 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:34:23,335 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:23] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:34:23,680 - __main__ - INFO - Received question: Orphan nodelarƒ± listele
2025-08-04 11:34:23,680 - __main__ - INFO - Generating Cypher for question: Orphan nodelarƒ± listele
2025-08-04 11:34:23,683 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 283.1s)
2025-08-04 11:34:23,683 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:34:23,692 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:23] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:34:23,927 - __main__ - INFO - Received question: En sƒ±k kullanƒ±lan property'ler nelerdir?
2025-08-04 11:34:23,928 - __main__ - INFO - Generating Cypher for question: En sƒ±k kullanƒ±lan property'ler nelerdir?
2025-08-04 11:34:23,931 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 283.4s)
2025-08-04 11:34:23,931 - __main__ - ERROR - Error in api_ask: 'nodes'
Traceback (most recent call last):
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 1045, in api_ask
    json_data = ask_cypher_json(question)
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 784, in ask_cypher_json
    dynamic_schema = generate_dynamic_schema()
  File "C:\Users\oedebali\Desktop\neo4j_chat_rag\neo4j_chat-main\app.py", line 356, in generate_dynamic_schema
    for node_info in schema_info["nodes"]:
                     ~~~~~~~~~~~^^^^^^^^^
KeyError: 'nodes'
2025-08-04 11:34:23,938 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:23] "[35m[1mPOST /api/ask HTTP/1.1[0m" 500 -
2025-08-04 11:34:28,256 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:34:28,288 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:28,289 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:34:28,290 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:28,291 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:34:28,292 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:34:28,308 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:34:28,344 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:28,345 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:34:28,347 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:28,348 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:34:28,349 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:34:28,559 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:34:28,593 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:28,594 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:34:28,595 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:28,596 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:34:28,597 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:34:28,826 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:34:28,850 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:28,852 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:34:28,855 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:28,856 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:34:28,857 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:34:28,925 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:34:28,949 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:28,949 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:34:28,951 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:28,952 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:34:28,955 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:34:29,174 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:34:29,198 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:29,199 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:34:29,200 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:29,201 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:34:29,202 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:34:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:34:44,205 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 11:34:44,205 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:34:44,226 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:44,226 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:34:44,228 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:34:44,228 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:34:44,240 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 11:34:44
2025-08-04 11:34:55,393 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 11:34:55,393 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 11:34:55,393 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 11:34:57,473 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 11:34:57,473 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 11:34:57,479 - embeddings - INFO - Semantic vector index created
2025-08-04 11:34:57,480 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 11:34:57,486 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 11:34:57,487 - __main__ - INFO - Neo4j available: True
2025-08-04 11:34:57,487 - __main__ - INFO - Gemini API available: True
2025-08-04 11:34:57,488 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 11:34:57,490 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 11:34:57,547 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 11:34:57,547 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 11:35:01,305 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:35:01] "GET / HTTP/1.1" 200 -
2025-08-04 11:35:01,335 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:35:01,356 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:35:01] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:35:01,379 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:01,381 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:35:01,384 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:01,385 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:35:01,386 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:35:01] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:35:01,402 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:35:01,437 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:01,437 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:35:01,438 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:01,439 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:35:01,439 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:35:01] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:35:02,821 - __main__ - INFO - Received question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-04 11:35:02,821 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-04 11:35:02,823 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 9.1s)
2025-08-04 11:35:02,824 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-04 11:35:02,826 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±ndaki']
2025-08-04 11:35:03,772 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:35:03,807 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 11:35:03,822 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:35:03,822 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:35:04,566 - __main__ - INFO - Gemini API call successful
2025-08-04 11:35:04,583 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) RETURN labels(n), count(n)
2025-08-04 11:35:04,584 - __main__ - INFO - Generated Cypher: MATCH (n) RETURN labels(n), count(n)
2025-08-04 11:35:05,146 - __main__ - INFO - Query results: 3 rows
2025-08-04 11:35:05,146 - __main__ - INFO - Generating answer for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-04 11:35:09,368 - __main__ - INFO - Gemini API call successful
2025-08-04 11:35:09,381 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:35:09,390 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:35:09] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:35:14,569 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:35:14,570 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:35:14,572 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 20.9s)
2025-08-04 11:35:14,573 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:35:14,577 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±nda']
2025-08-04 11:35:14,946 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:35:14,962 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 11:35:14,978 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:35:14,979 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:35:15,877 - __main__ - INFO - Gemini API call successful
2025-08-04 11:35:15,894 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH ()-[r]->() RETURN type(r) AS relationshipType, count(r) AS relationshipCount
2025-08-04 11:35:15,895 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN type(r) AS relationshipType, count(r) AS relationshipCount
2025-08-04 11:35:16,080 - __main__ - INFO - Query results: 2 rows
2025-08-04 11:35:16,081 - __main__ - INFO - Generating answer for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:35:18,932 - __main__ - INFO - Gemini API call successful
2025-08-04 11:35:18,947 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:35:18,955 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:35:18] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:35:23,568 - __main__ - INFO - Received question: Orphan nodelarƒ± listele
2025-08-04 11:35:23,569 - __main__ - INFO - Generating Cypher for question: Orphan nodelarƒ± listele
2025-08-04 11:35:23,571 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 29.9s)
2025-08-04 11:35:23,572 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Orphan nodelarƒ± listele
2025-08-04 11:35:23,578 - graphrag_pipeline - INFO - Extracted entities: ['Orphan']
2025-08-04 11:35:23,964 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:35:23,982 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 11:35:24,003 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:35:24,003 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:35:24,857 - __main__ - INFO - Gemini API call successful
2025-08-04 11:35:24,872 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) WHERE any(label in labels(n) WHERE label = 'Orphan') RETURN n
2025-08-04 11:35:24,874 - __main__ - INFO - Generated Cypher: MATCH (n) WHERE any(label in labels(n) WHERE label = 'Orphan') RETURN n
2025-08-04 11:35:25,192 - __main__ - INFO - Query results: 0 rows
2025-08-04 11:35:25,193 - __main__ - INFO - Generating answer for question: Orphan nodelarƒ± listele
2025-08-04 11:35:27,858 - __main__ - INFO - Gemini API call successful
2025-08-04 11:35:27,880 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:35:27,891 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:35:27] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:35:28,267 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:35:28,297 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:28,298 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:35:28,299 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:28,300 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:35:28,301 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:35:28,318 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:35:28,361 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:28,364 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:35:28,367 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:28,367 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:35:28,368 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:35:28,580 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:35:28,602 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:28,603 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:35:28,605 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:28,606 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:35:28,609 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:35:28,858 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:35:28,894 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:28,894 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:35:28,895 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:28,896 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:35:28,896 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:35:28,933 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:35:28,960 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:28,961 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:35:28,964 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:28,965 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:35:28,966 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:35:29,259 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:35:29,278 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:29,279 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:35:29,280 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:29,280 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:35:29,280 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:35:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:35:31,363 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:35:31,384 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:31,384 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:35:31,385 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:31,385 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:35:31,386 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:35:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:35:38,927 - __main__ - INFO - Received question: En sƒ±k kullanƒ±lan property'ler nelerdir?
2025-08-04 11:35:38,928 - __main__ - INFO - Generating Cypher for question: En sƒ±k kullanƒ±lan property'ler nelerdir?
2025-08-04 11:35:38,931 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 45.2s)
2025-08-04 11:35:38,931 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: En sƒ±k kullanƒ±lan property'ler nelerdir?
2025-08-04 11:35:38,934 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 11:35:39,301 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:35:39,326 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:35:39,327 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:35:40,254 - __main__ - INFO - Gemini API call successful
2025-08-04 11:35:40,273 - __main__ - INFO - Generated Cypher with GraphRAG: CALL db.schema.visualization()
2025-08-04 11:35:40,274 - __main__ - INFO - Generated Cypher: CALL db.schema.visualization()
2025-08-04 11:35:40,625 - __main__ - INFO - Query results: 1 rows
2025-08-04 11:35:40,626 - __main__ - INFO - Generating answer for question: En sƒ±k kullanƒ±lan property'ler nelerdir?
2025-08-04 11:35:44,877 - __main__ - INFO - Gemini API call successful
2025-08-04 11:35:44,897 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:35:44,908 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:35:44] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:35:55,641 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:35:55,670 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:55,670 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:35:55,672 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:35:55,673 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:35:55,674 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:35:55] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:36:01,339 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:36:01,404 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:01,404 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:36:01,405 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:01,406 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:36:01,406 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:36:01] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:36:02,865 - __main__ - INFO - Received question: ka√ß √ºr√ºn var sadece kategori sayƒ±sƒ± s√∂yle.
2025-08-04 11:36:02,866 - __main__ - INFO - Generating Cypher for question: ka√ß √ºr√ºn var sadece kategori sayƒ±sƒ± s√∂yle.
2025-08-04 11:36:02,871 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 69.2s)
2025-08-04 11:36:02,872 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: ka√ß √ºr√ºn var sadece kategori sayƒ±sƒ± s√∂yle.
2025-08-04 11:36:02,878 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 11:36:03,225 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:36:03,253 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:36:03,254 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:36:03,977 - __main__ - INFO - Gemini API call successful
2025-08-04 11:36:03,998 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) RETURN count(p)
2025-08-04 11:36:03,999 - __main__ - INFO - Generated Cypher: MATCH (p:Product) RETURN count(p)
2025-08-04 11:36:04,075 - __main__ - INFO - Query results: 1 rows
2025-08-04 11:36:04,076 - __main__ - INFO - Generating answer for question: ka√ß √ºr√ºn var sadece kategori sayƒ±sƒ± s√∂yle.
2025-08-04 11:36:06,854 - __main__ - INFO - Gemini API call successful
2025-08-04 11:36:06,875 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:36:06,886 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:36:06] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:36:11,568 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:36:11,610 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:11,611 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:36:11,613 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:11,613 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:36:11,614 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:36:11] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:36:28,266 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:36:28,273 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:36:28,304 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:28,304 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:36:28,306 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:28,307 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:36:28,309 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:36:28,326 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:36:28,367 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:28,368 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:36:28,369 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:28,370 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:36:28,371 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:36:30,341 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:30,342 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:36:30,342 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:30,343 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:36:30,343 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:36:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:36:30,665 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:36:30,732 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:30,733 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:36:30,734 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:30,734 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:36:30,735 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:36:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:36:30,910 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:36:30,928 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:30,929 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:36:30,930 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:30,930 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:36:30,930 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:36:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:36:32,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:36:32,271 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:32,271 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:36:32,272 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:32,273 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:36:32,274 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:36:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:36:41,256 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:36:41,296 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:41,297 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:36:41,298 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:36:41,298 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:36:41,299 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:36:41] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:37:01,376 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:37:01,398 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:01,398 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:37:01,401 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:01,403 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:37:01,404 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:37:01] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:37:24,317 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:37:24,349 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:24,349 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:37:24,351 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:24,352 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:37:24,353 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:37:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:37:28,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:37:28,281 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:28,282 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:37:28,284 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:28,284 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:37:28,285 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:37:28,567 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:37:28,602 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:28,605 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:37:28,607 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:28,608 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:37:28,609 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:37:28,818 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:37:28,841 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:28,842 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:37:28,843 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:28,844 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:37:28,845 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:37:28,933 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:37:28,951 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:28,952 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:37:28,953 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:28,953 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:37:28,954 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:37:29,165 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:37:29,182 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:29,182 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:37:29,183 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:29,183 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:37:29,184 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:37:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:37:32,223 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:37:32,247 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:32,247 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:37:32,248 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:32,249 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:37:32,250 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:37:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:37:42,247 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:37:42,263 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:42,263 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:37:42,264 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:37:42,264 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:37:42,265 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:37:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:38:01,333 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:38:01,351 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:01,352 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:38:01,354 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:01,355 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:38:01,356 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:38:01] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:38:12,259 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:38:12,313 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:12,314 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:38:12,315 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:12,315 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:38:12,316 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:38:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:38:28,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:38:28,274 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:28,275 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:38:28,276 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:28,276 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:38:28,277 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:38:28,292 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:38:28,323 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:28,323 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:38:28,325 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:28,326 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:38:28,327 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:38:28,637 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:38:28,654 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:28,655 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:38:28,656 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:28,657 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:38:28,657 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:38:28,904 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:38:28,920 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:28,920 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:38:28,921 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:28,922 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:38:28,923 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:38:28,968 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:38:28,987 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:28,988 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:38:28,989 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:28,990 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:38:28,990 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:38:32,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:38:32,271 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:32,272 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:38:32,273 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:32,273 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:38:32,273 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:38:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:38:41,978 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:38:42,000 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:42,001 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:38:42,002 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:38:42,003 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:38:42,004 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:38:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:39:02,255 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:39:02,292 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:02,293 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:39:02,294 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:02,294 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:39:02,295 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:02] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:39:12,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:39:12,307 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:12,308 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:39:12,309 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:12,309 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:39:12,310 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:39:16,765 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 11:39:16,765 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 11:39:16,765 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 11:39:18,825 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 11:39:18,826 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 11:39:18,830 - embeddings - INFO - Semantic vector index created
2025-08-04 11:39:18,830 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 11:39:18,835 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 11:39:18,835 - __main__ - INFO - Neo4j available: True
2025-08-04 11:39:18,836 - __main__ - INFO - Gemini API available: True
2025-08-04 11:39:18,836 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 11:39:18,837 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 11:39:18,890 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 11:39:18,891 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 11:39:28,294 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:39:28,295 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:39:28,328 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:28,329 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:28,329 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:39:28,330 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:39:28,331 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:28,333 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:28,333 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:39:28,334 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:39:28,336 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:39:28,337 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:39:28,655 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:39:28,672 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:28,673 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:39:28,674 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:28,674 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:39:28,675 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:39:28,907 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:39:28,931 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:28,931 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:39:28,933 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:28,934 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:39:28,935 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:39:28,989 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:39:29,010 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:29,010 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:39:29,011 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:29,012 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:39:29,013 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:39:32,254 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:39:32,269 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:32,269 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:39:32,270 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:32,271 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:39:32,271 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:39:40,529 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:40] "GET / HTTP/1.1" 200 -
2025-08-04 11:39:40,573 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:39:40,596 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:40] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:39:40,611 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:40,616 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:39:40,623 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:40,624 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:39:40,625 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:40] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:39:40,640 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:39:40,674 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:40,675 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:39:40,676 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:40,676 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:39:40,677 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:40] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:39:41,306 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:41] "GET / HTTP/1.1" 200 -
2025-08-04 11:39:41,336 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:39:41,353 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:41] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:39:41,373 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:41,374 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:39:41,375 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:41,375 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:39:41,376 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:41] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:39:41,387 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:39:41,406 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:41,406 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:39:41,408 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:41,408 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:39:41,409 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:41] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:39:42,284 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:39:42,304 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:42,304 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:39:42,305 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:42,305 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:39:42,306 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:39:54,935 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 11:39:54,935 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 11:39:54,935 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 11:39:57,011 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 11:39:57,012 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 11:39:57,015 - embeddings - INFO - Semantic vector index created
2025-08-04 11:39:57,016 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 11:39:57,021 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 11:39:57,022 - __main__ - INFO - Neo4j available: True
2025-08-04 11:39:57,022 - __main__ - INFO - Gemini API available: True
2025-08-04 11:39:57,022 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 11:39:57,023 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 11:39:57,070 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 11:39:57,071 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 11:39:58,140 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:58] "GET / HTTP/1.1" 200 -
2025-08-04 11:39:58,190 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:58] "GET /static/incehesap.jpg HTTP/1.1" 200 -
2025-08-04 11:39:58,677 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:39:58,680 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:58] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:39:58,710 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:58,711 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:39:58,716 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:58,717 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:39:58,718 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:58] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:39:58,794 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:39:58,833 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:58,834 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:39:58,835 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:39:58,836 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:39:58,836 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:39:58] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:40:11,346 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:40:11,398 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:11,399 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:40:11,400 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:11,400 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:40:11,401 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:40:11] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:40:28,227 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:40:28,249 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:28,250 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:40:28,251 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:28,251 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:40:28,252 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:40:28,264 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:40:28,284 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:28,284 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:40:28,287 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:28,288 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:40:28,292 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:40:28,301 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:40:28,327 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:28,328 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:40:28,330 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:28,331 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:40:28,332 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:40:28,562 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:40:28,587 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:28,588 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:40:28,592 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:28,592 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:40:28,593 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:40:28,826 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:40:28,851 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:28,852 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:40:28,856 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:28,858 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:40:28,859 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:40:28,912 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:40:28,934 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:28,934 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:40:28,937 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:28,938 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:40:28,942 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:40:29,177 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:40:29,197 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:29,198 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:40:29,199 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:29,199 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:40:29,200 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:40:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:40:41,381 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:40:41,420 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:41,420 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:40:41,423 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:41,423 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:40:41,424 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:40:41] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:40:42,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:40:42,276 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:42,276 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:40:42,277 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:42,278 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:40:42,278 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:40:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:40:58,225 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:40:58,252 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:58,253 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:40:58,256 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:40:58,256 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:40:58,257 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:40:58] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:41:12,255 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:41:12,272 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:12,272 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:41:12,273 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:12,274 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:41:12,274 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:41:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:41:12,283 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:41:12,302 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:12,303 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:41:12,304 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:12,304 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:41:12,305 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:41:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:41:28,265 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:41:28,283 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:28,284 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:41:28,286 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:28,286 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:41:28,287 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:41:28,608 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:41:28,638 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:28,639 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:41:28,640 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:28,641 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:41:28,642 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:41:28,856 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:41:28,879 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:28,880 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:41:28,880 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:28,881 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:41:28,881 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:41:28,961 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:41:28,978 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:28,978 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:41:28,979 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:28,980 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:41:28,980 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:41:30,351 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:41:30,366 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:30,366 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:41:30,367 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:30,368 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:41:30,368 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:41:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:41:30,379 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:41:30,397 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:30,398 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:41:30,399 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:30,399 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:41:30,400 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:41:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:41:42,260 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:41:42,279 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:42,280 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:41:42,281 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:42,281 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:41:42,282 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:41:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:41:54,206 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:41:54,240 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:54,241 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:41:54,243 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:54,244 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:41:54,245 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:41:54] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:41:58,223 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:41:58,241 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:58,242 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:41:58,242 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:41:58,242 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:41:58,243 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:41:58] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:42:12,254 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:42:12,272 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:12,272 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:42:12,273 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:12,274 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:42:12,274 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:42:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:42:12,286 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:42:12,305 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:12,306 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:42:12,306 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:12,307 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:42:12,307 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:42:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:42:17,158 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:42:17,182 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:17,183 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:42:17,184 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:17,185 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:42:17,186 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:42:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:42:27,420 - __main__ - INFO - Received question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-04 11:42:27,420 - __main__ - INFO - Generating Cypher for question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-04 11:42:27,424 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 154.1s)
2025-08-04 11:42:27,424 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-04 11:42:27,433 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 11:42:28,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:42:28,255 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:42:28,296 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:28,300 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:42:28,303 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:28,303 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:28,305 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:42:28,310 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:42:28,314 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:28,318 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:42:28,319 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:42:28,327 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:42:28,383 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:42:28,420 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:42:28,420 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:42:28,667 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:42:28,686 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:28,686 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:42:28,687 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:28,687 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:42:28,688 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:42:28,934 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:42:28,954 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:28,955 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:42:28,956 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:28,956 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:42:28,957 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:42:29,016 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:42:29,040 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:29,042 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:42:29,046 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:29,046 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:42:29,047 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:42:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:42:29,668 - __main__ - INFO - Gemini API call successful
2025-08-04 11:42:29,688 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) WITH n, size((n)--()) AS degree ORDER BY degree DESC RETURN n, degree
2025-08-04 11:42:29,688 - __main__ - INFO - Generated Cypher: MATCH (n) WITH n, size((n)--()) AS degree ORDER BY degree DESC RETURN n, degree
2025-08-04 11:42:29,787 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.SyntaxError} {message: A pattern expression should only be used in order to test the existence of a pattern. It can no longer be used inside the function size(), an alternative is to replace size() with COUNT {}. (line 1, column 24 (offset: 23))
"MATCH (n) WITH n, size((n)--()) AS degree ORDER BY degree DESC RETURN n, degree"
                        ^}
2025-08-04 11:42:29,788 - __main__ - ERROR - Failed to execute query: MATCH (n) WITH n, size((n)--()) AS degree ORDER BY degree DESC RETURN n, degree
2025-08-04 11:42:29,788 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.SyntaxError} {message: A pattern expression should only be used in order to test the existence of a pattern. It can no longer be used inside the function size(), an alternative is to replace size() with COUNT {}. (line 1, column 24 (offset: 23))
"MATCH (n) WITH n, size((n)--()) AS degree ORDER BY degree DESC RETURN n, degree"
                        ^}
2025-08-04 11:42:29,789 - __main__ - INFO - Query results: 0 rows
2025-08-04 11:42:29,789 - __main__ - INFO - Generating answer for question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-04 11:42:32,687 - __main__ - INFO - Gemini API call successful
2025-08-04 11:42:32,711 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:42:32,720 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:42:32] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:42:33,703 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:42:33,704 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:42:33,713 - __main__ - INFO - Using cached Cypher query
2025-08-04 11:42:33,714 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN type(r) AS relationshipType, count(r) AS relationshipCount
2025-08-04 11:42:33,718 - __main__ - INFO - Query results: 2 rows
2025-08-04 11:42:33,718 - __main__ - INFO - Generating answer for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:42:33,723 - __main__ - INFO - Using cached answer
2025-08-04 11:42:33,737 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:42:33] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:42:42,264 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:42:42,303 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:42,304 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:42:42,309 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:42,310 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:42:42,311 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:42:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:42:45,262 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:42:45,318 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:45,318 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:42:45,319 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:45,319 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:42:45,320 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:42:45] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:42:58,258 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:42:58,276 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:58,277 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:42:58,278 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:42:58,278 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:42:58,279 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:42:58] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:43:15,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:43:15,268 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:15,268 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:43:15,269 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:15,270 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:43:15,270 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:43:24,274 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:43:24,316 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:24,318 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:43:24,320 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:24,321 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:43:24,322 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:43:27,484 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:43:27,507 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:27,507 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:43:27,508 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:27,509 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:43:27,509 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:43:28,259 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:43:28,267 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:43:28,316 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:28,341 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:28,342 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:43:28,360 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:43:28,363 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:28,415 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:28,421 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:43:28,422 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:43:28,423 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:43:28,425 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:43:28,445 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:43:28,491 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:28,492 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:43:28,495 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:28,498 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:43:28,499 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:43:28,752 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:43:28,778 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:28,779 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:43:28,782 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:28,784 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:43:28,785 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:43:38,249 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:43:38,265 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:38,266 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:43:38,267 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:38,267 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:43:38,267 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:38] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:43:41,560 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:43:41,578 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:41,579 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:43:41,580 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:41,580 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:43:41,580 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:41] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:43:42,248 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:43:42,272 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:42,273 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:43:42,274 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:42,274 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:43:42,275 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:43:45,829 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:45] "GET / HTTP/1.1" 200 -
2025-08-04 11:43:45,849 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:45] "[36mGET /static/incehesap.jpg HTTP/1.1[0m" 304 -
2025-08-04 11:43:45,863 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:43:45,880 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:45] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:43:45,902 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:45,903 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:43:45,905 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:45,906 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:43:45,908 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:45] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:43:45,927 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:43:45,955 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:45,956 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:43:45,961 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:45,963 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:43:45,964 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:45] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:43:46,844 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:46] "GET / HTTP/1.1" 200 -
2025-08-04 11:43:46,880 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:46] "[36mGET /static/incehesap.jpg HTTP/1.1[0m" 304 -
2025-08-04 11:43:46,881 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:43:46,896 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:46] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:43:46,932 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:46,934 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:43:46,936 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:46,937 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:43:46,937 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:46] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:43:46,953 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:43:46,981 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:46,981 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:43:46,983 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:46,984 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:43:46,985 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:46] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:43:47,248 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:43:47,268 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:47,269 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:43:47,270 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:43:47,270 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:43:47,270 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:43:47] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:44:02,730 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 11:44:02,731 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 11:44:02,731 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 11:44:04,828 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 11:44:04,828 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 11:44:04,832 - embeddings - INFO - Semantic vector index created
2025-08-04 11:44:04,832 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 11:44:04,836 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 11:44:04,837 - __main__ - INFO - Neo4j available: True
2025-08-04 11:44:04,837 - __main__ - INFO - Gemini API available: True
2025-08-04 11:44:04,837 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 11:44:04,838 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 11:44:04,887 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 11:44:04,888 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 11:44:06,158 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:44:06] "GET / HTTP/1.1" 200 -
2025-08-04 11:44:06,193 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:44:06] "[36mGET /static/incehesap.jpg HTTP/1.1[0m" 304 -
2025-08-04 11:44:06,447 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:44:06,494 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:06,496 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:44:06,498 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:06,499 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:44:06,500 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:44:06] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:44:06,541 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:44:06] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:44:06,553 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:44:06,593 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:06,594 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:44:06,595 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:06,596 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:44:06,597 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:44:06] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:44:08,575 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:44:08,594 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:08,595 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:44:08,595 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:08,596 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:44:08,596 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:44:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:44:11,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:44:11,279 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:11,281 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:44:11,281 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:11,282 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:44:11,282 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:44:11] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:44:12,261 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:44:12,282 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:12,283 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:44:12,283 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:12,284 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:44:12,286 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:44:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:44:16,262 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:44:16,293 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:16,294 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:44:16,295 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:16,296 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:44:16,296 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:44:16] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:44:17,575 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:44:17,596 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:17,597 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:44:17,597 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:17,598 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:44:17,598 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:44:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:44:26,035 - __main__ - INFO - Received question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-04 11:44:26,036 - __main__ - INFO - Generating Cypher for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-04 11:44:26,042 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 24.8s)
2025-08-04 11:44:26,042 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-04 11:44:26,051 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±']
2025-08-04 11:44:26,552 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:44:26,565 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 11:44:26,597 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:44:26,598 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:44:27,317 - __main__ - INFO - Gemini API call successful
2025-08-04 11:44:27,342 - __main__ - INFO - Generated Cypher with GraphRAG: CALL db.schema.visualization()
2025-08-04 11:44:27,343 - __main__ - INFO - Generated Cypher: CALL db.schema.visualization()
2025-08-04 11:44:27,393 - __main__ - INFO - Query results: 1 rows
2025-08-04 11:44:27,394 - __main__ - INFO - Generating answer for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-04 11:44:31,989 - __main__ - INFO - Gemini API call successful
2025-08-04 11:44:32,023 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:44:32,033 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:44:32] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:44:36,407 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:44:36,440 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:36,441 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:44:36,443 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:36,444 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:44:36,445 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:44:36] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:44:41,252 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:44:41,272 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:41,272 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:44:41,273 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:44:41,273 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:44:41,274 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:44:41] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:45:07,258 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:45:07,277 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:45:07,277 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:45:07,278 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:45:07,279 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:45:07,279 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:45:07] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:45:09,556 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:45:09,570 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:45:09,571 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:45:09,572 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:45:09,573 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:45:09,573 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:45:09] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:45:13,245 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:45:13,260 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:45:13,260 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:45:13,261 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:45:13,262 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:45:13,262 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:45:13] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:45:17,268 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:45:17,286 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:45:17,287 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:45:17,288 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:45:17,289 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:45:17,290 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:45:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:45:18,260 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:45:18,286 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:45:18,321 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:45:18,322 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:45:18,323 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:45:18,324 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:45:18] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:45:28,561 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:45:28,582 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:45:28,582 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:45:28,583 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:45:28,584 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:45:28,585 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:45:37,255 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:45:37,270 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:45:37,270 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:45:37,271 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:45:37,271 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:45:37,272 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:45:37] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:46:12,816 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 11:46:12,817 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 11:46:12,817 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 11:46:14,887 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 11:46:14,888 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 11:46:14,898 - embeddings - INFO - Semantic vector index created
2025-08-04 11:46:14,899 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 11:46:14,906 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 11:46:14,907 - __main__ - INFO - Neo4j available: True
2025-08-04 11:46:14,908 - __main__ - INFO - Gemini API available: True
2025-08-04 11:46:14,909 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 11:46:14,910 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 11:46:14,968 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 11:46:14,969 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 11:46:15,071 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:46:15,105 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:46:15,106 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:46:15,108 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:46:15,109 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:46:15,111 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:46:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:46:18,276 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:46:18,292 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:46:18,292 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:46:18,293 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:46:18,294 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:46:18,294 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:46:18] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:46:19,556 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:46:19,568 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:46:19,568 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:46:19,569 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:46:19,570 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:46:19,570 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:46:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:46:28,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:46:28,271 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:46:28,271 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:46:28,272 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:46:28,272 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:46:28,273 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:46:30,631 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:46:30] "GET / HTTP/1.1" 200 -
2025-08-04 11:46:30,669 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:46:30] "[36mGET /static/incehesap.jpg HTTP/1.1[0m" 304 -
2025-08-04 11:46:30,688 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:46:30,717 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:46:30,718 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:46:30,723 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:46:30,726 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:46:30,727 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:46:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:46:30,901 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:46:30] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:46:31,092 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:46:31,127 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:46:31,128 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:46:31,130 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:46:31,130 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:46:31,131 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:46:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:46:34,033 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:46:34,034 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:46:34,044 - __main__ - INFO - Using cached Cypher query
2025-08-04 11:46:34,044 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN type(r) AS relationshipType, count(r) AS relationshipCount
2025-08-04 11:46:34,048 - __main__ - INFO - Query results: 2 rows
2025-08-04 11:46:34,049 - __main__ - INFO - Generating answer for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:46:34,059 - __main__ - INFO - Using cached answer
2025-08-04 11:46:34,071 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:46:34] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:46:35,329 - __main__ - INFO - Received question: En b√ºy√ºk baƒülƒ± bile≈üen nedir?
2025-08-04 11:46:35,329 - __main__ - INFO - Generating Cypher for question: En b√ºy√ºk baƒülƒ± bile≈üen nedir?
2025-08-04 11:46:35,334 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 24.1s)
2025-08-04 11:46:35,334 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: En b√ºy√ºk baƒülƒ± bile≈üen nedir?
2025-08-04 11:46:35,343 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 11:46:35,910 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:46:35,944 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:46:35,945 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:46:37,260 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:46:37,274 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:46:37,274 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:46:37,275 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:46:37,275 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:46:37,276 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:46:37] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:46:37,289 - __main__ - INFO - Gemini API call successful
2025-08-04 11:46:37,316 - __main__ - INFO - Generated Cypher with GraphRAG: CALL gds.wcc.stats() YIELD componentId, nodeCount RETURN componentId, nodeCount ORDER BY nodeCount DESC
2025-08-04 11:46:37,316 - __main__ - INFO - Generated Cypher: CALL gds.wcc.stats() YIELD componentId, nodeCount RETURN componentId, nodeCount ORDER BY nodeCount DESC
2025-08-04 11:46:37,347 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Procedure.ProcedureNotFound} {message: There is no procedure with the name `gds.wcc.stats` registered for this database instance. Please ensure you've spelled the procedure name correctly and that the procedure is properly deployed.}
2025-08-04 11:46:37,348 - __main__ - ERROR - Failed to execute query: CALL gds.wcc.stats() YIELD componentId, nodeCount RETURN componentId, nodeCount ORDER BY nodeCount DESC
2025-08-04 11:46:37,348 - __main__ - ERROR - Error: {code: Neo.ClientError.Procedure.ProcedureNotFound} {message: There is no procedure with the name `gds.wcc.stats` registered for this database instance. Please ensure you've spelled the procedure name correctly and that the procedure is properly deployed.}
2025-08-04 11:46:37,348 - __main__ - INFO - Query results: 0 rows
2025-08-04 11:46:37,348 - __main__ - INFO - Generating answer for question: En b√ºy√ºk baƒülƒ± bile≈üen nedir?
2025-08-04 11:46:39,897 - __main__ - INFO - Gemini API call successful
2025-08-04 11:46:39,932 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:46:39,945 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:46:39] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:46:50,785 - __main__ - INFO - Received question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-04 11:46:50,786 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-04 11:46:50,795 - __main__ - INFO - Using cached Cypher query
2025-08-04 11:46:50,795 - __main__ - INFO - Generated Cypher: MATCH (n) RETURN labels(n), count(n)
2025-08-04 11:46:50,802 - __main__ - INFO - Query results: 3 rows
2025-08-04 11:46:50,803 - __main__ - INFO - Generating answer for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-04 11:46:50,812 - __main__ - INFO - Using cached answer
2025-08-04 11:46:50,828 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:46:50] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:47:00,704 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:47:00,723 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:00,724 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:47:00,725 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:00,726 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:47:00,727 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:47:00] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:47:00,774 - __main__ - INFO - Received question: MSI √ºr√ºnlerini getir
2025-08-04 11:47:00,774 - __main__ - INFO - Generating Cypher for question: MSI √ºr√ºnlerini getir
2025-08-04 11:47:00,782 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 49.5s)
2025-08-04 11:47:00,783 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: MSI √ºr√ºnlerini getir
2025-08-04 11:47:00,792 - graphrag_pipeline - INFO - Extracted entities: ['MSI']
2025-08-04 11:47:01,294 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:47:01,304 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 11:47:01,341 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:47:01,342 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:47:02,209 - __main__ - INFO - Gemini API call successful
2025-08-04 11:47:02,255 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product {brand: 'MSI'}) RETURN p
2025-08-04 11:47:02,255 - __main__ - INFO - Generated Cypher: MATCH (p:Product {brand: 'MSI'}) RETURN p
2025-08-04 11:47:02,372 - __main__ - INFO - Query results: 3 rows
2025-08-04 11:47:02,372 - __main__ - INFO - Generating answer for question: MSI √ºr√ºnlerini getir
2025-08-04 11:47:07,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:47:07,272 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:07,273 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:47:07,274 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:07,275 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:47:07,276 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:47:07] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:47:11,567 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:47:11,583 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:11,583 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:47:11,584 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:11,585 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:47:11,585 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:47:11] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:47:14,534 - __main__ - INFO - Gemini API call successful
2025-08-04 11:47:14,566 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:47:14,581 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:47:14] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:47:15,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:47:15,272 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:15,272 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:47:15,274 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:15,274 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:47:15,275 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:47:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:47:19,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:47:19,301 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:19,302 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:47:19,303 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:19,303 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:47:19,304 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:47:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:47:20,248 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:47:20,264 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:20,265 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:47:20,266 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:20,266 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:47:20,267 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:47:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:47:28,562 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:47:28,610 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:28,611 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:47:28,613 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:28,615 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:47:28,616 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:47:30,701 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:47:30,719 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:30,720 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:47:30,722 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:30,723 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:47:30,725 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:47:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:47:37,264 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:47:37,283 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:37,284 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:47:37,285 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:37,286 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:47:37,286 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:47:37] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:47:47,254 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:47:47,272 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:47,273 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:47:47,274 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:47:47,275 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:47:47,276 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:47:47] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:48:01,252 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:48:01,308 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:01,309 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:48:01,310 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:01,310 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:48:01,311 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:48:01] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:48:12,568 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:48:12,585 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:12,585 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:48:12,586 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:12,587 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:48:12,588 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:48:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:48:16,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:48:16,274 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:16,274 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:48:16,276 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:16,276 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:48:16,277 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:48:16] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:48:17,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:48:17,268 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:17,268 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:48:17,270 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:17,270 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:48:17,271 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:48:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:48:20,252 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:48:20,266 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:20,266 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:48:20,267 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:20,268 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:48:20,268 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:48:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:48:28,247 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:48:28,263 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:28,263 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:48:28,265 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:28,266 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:48:28,268 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:48:28,555 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:48:28,568 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:28,568 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:48:28,570 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:28,570 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:48:28,571 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:48:31,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:48:31,295 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:31,295 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:48:31,296 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:31,296 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:48:31,297 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:48:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:48:42,246 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:48:42,262 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:42,263 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:48:42,264 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:48:42,264 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:48:42,264 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:48:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:49:00,694 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:49:00,714 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:00,715 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:49:00,716 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:00,716 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:49:00,717 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:49:00] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:49:12,244 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:49:12,255 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:12,255 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:49:12,256 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:12,257 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:49:12,257 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:49:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:49:13,245 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:49:13,258 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:13,258 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:49:13,259 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:13,260 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:49:13,260 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:49:13] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:49:27,575 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 11:49:27,575 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 11:49:27,576 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 11:49:29,635 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 11:49:29,636 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 11:49:29,640 - embeddings - INFO - Semantic vector index created
2025-08-04 11:49:29,641 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 11:49:29,649 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 11:49:29,650 - __main__ - INFO - Neo4j available: True
2025-08-04 11:49:29,650 - __main__ - INFO - Gemini API available: True
2025-08-04 11:49:29,650 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 11:49:29,651 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 11:49:29,707 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 11:49:29,708 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 11:49:29,786 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:49:29,804 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:29,804 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:49:29,805 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:29,806 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:49:29,808 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:49:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:49:29,823 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:49:29,843 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:29,843 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:49:29,845 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:29,846 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:49:29,847 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:49:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:49:31,251 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:49:31,301 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:31,302 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:49:31,304 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:31,304 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:49:31,305 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:49:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:49:35,192 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:49:35] "GET / HTTP/1.1" 200 -
2025-08-04 11:49:35,219 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:49:35] "[36mGET /static/incehesap.jpg HTTP/1.1[0m" 304 -
2025-08-04 11:49:35,230 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:49:35,256 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:49:35] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:49:35,271 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:35,276 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:49:35,285 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:35,291 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:49:35,292 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:49:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:49:35,317 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:49:35,353 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:35,354 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:49:35,355 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:35,356 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:49:35,357 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:49:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:49:37,353 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:49:37,353 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:49:37,355 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 12.0s)
2025-08-04 11:49:37,355 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:49:37,357 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±nda']
2025-08-04 11:49:37,838 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:49:37,852 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 11:49:37,867 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:49:37,867 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:49:38,861 - __main__ - INFO - Gemini API call successful
2025-08-04 11:49:38,873 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH ()-[r]->() RETURN type(r) AS relationshipType, count(r) AS relationshipCount
2025-08-04 11:49:38,874 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN type(r) AS relationshipType, count(r) AS relationshipCount
2025-08-04 11:49:38,880 - __main__ - INFO - Query results: 2 rows
2025-08-04 11:49:38,880 - __main__ - INFO - Generating answer for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:49:40,506 - __main__ - INFO - Gemini API call successful
2025-08-04 11:49:40,521 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:49:40,533 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:49:40] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:49:42,288 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:49:42,337 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:42,338 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:49:42,339 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:49:42,340 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:49:42,340 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:49:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:50:05,246 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:50:05,263 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:50:05,264 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:50:05,264 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:50:05,265 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:50:05,266 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:50:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:50:14,561 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:50:14,580 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:50:14,581 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:50:14,581 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:50:14,582 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:50:14,582 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:50:14] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:50:19,288 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:50:19,298 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:50:19,298 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:50:19,299 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:50:19,300 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:50:19,301 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:50:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:50:22,262 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:50:22,280 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:50:22,280 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:50:22,281 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:50:22,281 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:50:22,282 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:50:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:50:28,268 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:50:28,310 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:50:28,311 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:50:28,314 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:50:28,318 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:50:28,323 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:50:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:50:28,569 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:50:28,601 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:50:28,603 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:50:28,605 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:50:28,606 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:50:28,608 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:50:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:50:35,245 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:50:35,294 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:50:35,295 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:50:35,305 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:50:35,307 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:50:35,313 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:50:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:51:05,247 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:51:05,264 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:51:05,265 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:51:05,266 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:51:05,266 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:51:05,267 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:51:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:51:15,561 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:51:15,608 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:51:15,608 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:51:15,609 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:51:15,609 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:51:15,610 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:51:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:51:20,245 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:51:20,297 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:51:20,298 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:51:20,299 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:51:20,299 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:51:20,300 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:51:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:51:23,254 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:51:23,268 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:51:23,268 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:51:23,270 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:51:23,271 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:51:23,272 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:51:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:51:28,247 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:51:28,263 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:51:28,263 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:51:28,264 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:51:28,264 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:51:28,265 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:52:53,531 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 11:52:53,532 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 11:52:53,532 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 11:52:55,589 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 11:52:55,589 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 11:52:55,593 - embeddings - INFO - Semantic vector index created
2025-08-04 11:52:55,594 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 11:52:55,602 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 11:52:55,603 - __main__ - INFO - Neo4j available: True
2025-08-04 11:52:55,603 - __main__ - INFO - Gemini API available: True
2025-08-04 11:52:55,603 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 11:52:55,605 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 11:52:55,674 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 11:52:55,675 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 11:53:00,562 - __main__ - INFO - Received question: ka√ß √∂zellik var
2025-08-04 11:53:00,562 - __main__ - INFO - Generating Cypher for question: ka√ß √∂zellik var
2025-08-04 11:53:00,567 - __main__ - INFO - üìä Schema cache expired/missing, fetching fresh schema...
2025-08-04 11:53:00,567 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:53:00,609 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:00,609 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:53:00,610 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:00,610 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:53:00,633 - __main__ - INFO - üìä Fresh schema cached successfully
2025-08-04 11:53:00,634 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: ka√ß √∂zellik var
2025-08-04 11:53:00,638 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 11:53:01,195 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:53:01,217 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:53:01,218 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:53:02,487 - __main__ - INFO - Gemini API call successful
2025-08-04 11:53:02,510 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) WITH labels(n)[0] AS node_type, keys(n) AS props UNWIND props AS prop RETURN node_type, count(DISTINCT prop) AS property_count
2025-08-04 11:53:02,510 - __main__ - INFO - Generated Cypher: MATCH (n) WITH labels(n)[0] AS node_type, keys(n) AS props UNWIND props AS prop RETURN node_type, count(DISTINCT prop) AS property_count
2025-08-04 11:53:02,670 - __main__ - INFO - Query results: 3 rows
2025-08-04 11:53:02,671 - __main__ - INFO - Generating answer for question: ka√ß √∂zellik var
2025-08-04 11:53:05,237 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:53:05,269 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:05,269 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:53:05,270 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:05,270 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:53:05,271 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:53:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:53:05,977 - __main__ - INFO - Gemini API call successful
2025-08-04 11:53:05,997 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:53:06,005 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:53:06] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:53:12,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:53:12,275 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:12,276 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:53:12,278 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:12,279 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:53:12,281 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:53:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:53:17,567 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:53:17,586 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:17,587 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:53:17,589 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:17,589 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:53:17,590 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:53:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:53:22,252 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:53:22,271 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:22,272 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:53:22,273 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:22,274 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:53:22,275 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:53:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:53:25,290 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:53:25,307 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:25,308 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:53:25,311 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:25,311 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:53:25,312 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:53:25] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:53:28,079 - __main__ - INFO - Received question: ka√ß adet √ºr√ºn var
2025-08-04 11:53:28,079 - __main__ - INFO - Generating Cypher for question: ka√ß adet √ºr√ºn var
2025-08-04 11:53:28,085 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 27.5s)
2025-08-04 11:53:28,086 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: ka√ß adet √ºr√ºn var
2025-08-04 11:53:28,091 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 11:53:28,523 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:53:28,558 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:53:28,559 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:53:28,566 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:53:28,583 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:28,584 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:53:28,585 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:28,585 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:53:28,586 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:53:29,469 - __main__ - INFO - Gemini API call successful
2025-08-04 11:53:29,501 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) RETURN count(p)
2025-08-04 11:53:29,502 - __main__ - INFO - Generated Cypher: MATCH (p:Product) RETURN count(p)
2025-08-04 11:53:29,505 - __main__ - INFO - Query results: 1 rows
2025-08-04 11:53:29,505 - __main__ - INFO - Generating answer for question: ka√ß adet √ºr√ºn var
2025-08-04 11:53:35,232 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:53:35,251 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:35,252 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:53:35,252 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:35,253 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:53:35,253 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:53:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:53:37,008 - __main__ - INFO - Gemini API call successful
2025-08-04 11:53:37,032 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:53:37,042 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:53:37] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:53:47,546 - __main__ - INFO - Received question: √ºr√ºnlerin ka√ß adet √∂zelliƒüi var
2025-08-04 11:53:47,547 - __main__ - INFO - Generating Cypher for question: √ºr√ºnlerin ka√ß adet √∂zelliƒüi var
2025-08-04 11:53:47,550 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 46.9s)
2025-08-04 11:53:47,550 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: √ºr√ºnlerin ka√ß adet √∂zelliƒüi var
2025-08-04 11:53:47,555 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 11:53:47,913 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:53:47,947 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:53:47,947 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:53:48,978 - __main__ - INFO - Gemini API call successful
2025-08-04 11:53:49,007 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) RETURN keys(p), count(p)
2025-08-04 11:53:49,007 - __main__ - INFO - Generated Cypher: MATCH (p:Product) RETURN keys(p), count(p)
2025-08-04 11:53:49,081 - __main__ - INFO - Query results: 20 rows
2025-08-04 11:53:49,082 - __main__ - INFO - Generating answer for question: √ºr√ºnlerin ka√ß adet √∂zelliƒüi var
2025-08-04 11:53:56,477 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:53:56,525 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:56,526 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:53:56,527 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:53:56,527 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:53:56,527 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:53:56] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:54:05,256 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:54:05,313 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:54:05,313 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:54:05,315 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:54:05,316 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:54:05,317 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:54:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:54:13,262 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:54:13,290 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:54:13,292 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:54:13,294 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:54:13,295 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:54:13,296 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:54:13] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:54:17,570 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:54:17,589 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:54:17,590 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:54:17,591 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:54:17,591 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:54:17,592 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:54:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:54:18,255 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:54:18,275 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:54:18,275 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:54:18,276 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:54:18,277 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:54:18,277 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:54:18] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:54:18,619 - __main__ - INFO - Gemini API call successful
2025-08-04 11:54:18,661 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:54:18,674 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:54:18] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:54:26,254 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:54:26,303 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:54:26,304 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:54:26,304 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:54:26,305 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:54:26,305 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:54:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:54:28,559 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:54:28,583 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:54:28,584 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:54:28,585 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:54:28,586 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:54:28,588 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:54:35,234 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:54:35,252 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:54:35,252 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:54:35,253 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:54:35,254 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:54:35,254 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:54:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:54:44,050 - __main__ - INFO - Received question: veritabanƒ±nda toplam ka√ß adet √∂zellik var
2025-08-04 11:54:44,050 - __main__ - INFO - Generating Cypher for question: veritabanƒ±nda toplam ka√ß adet √∂zellik var
2025-08-04 11:54:44,054 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 103.4s)
2025-08-04 11:54:44,055 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: veritabanƒ±nda toplam ka√ß adet √∂zellik var
2025-08-04 11:54:44,060 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 11:54:44,399 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:54:44,430 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:54:44,430 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:54:45,793 - __main__ - INFO - Gemini API call successful
2025-08-04 11:54:45,849 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) UNWIND keys(n) AS property RETURN count(DISTINCT property) AS totalProperties
2025-08-04 11:54:45,849 - __main__ - INFO - Generated Cypher: MATCH (n) UNWIND keys(n) AS property RETURN count(DISTINCT property) AS totalProperties
2025-08-04 11:54:45,852 - __main__ - INFO - Query results: 1 rows
2025-08-04 11:54:45,852 - __main__ - INFO - Generating answer for question: veritabanƒ±nda toplam ka√ß adet √∂zellik var
2025-08-04 11:54:47,249 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:54:47,268 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:54:47,269 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:54:47,269 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:54:47,270 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:54:47,270 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:54:47] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:54:54,092 - __main__ - INFO - Gemini API call successful
2025-08-04 11:54:54,121 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:54:54,131 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:54:54] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:55:05,247 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:55:05,265 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:55:05,266 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:55:05,267 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:55:05,267 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:55:05,268 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:55:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:55:14,252 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:55:14,265 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:55:14,265 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:55:14,267 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:55:14,267 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:55:14,268 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:55:14] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:55:19,567 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:55:19,585 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:55:19,585 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:55:19,587 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:55:19,587 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:55:19,588 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:55:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:55:27,255 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:55:27,269 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:55:27,270 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:55:27,271 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:55:27,271 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:55:27,272 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:55:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:55:28,258 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:55:28,284 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:55:28,285 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:55:28,288 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:55:28,289 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:55:28,290 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:55:28,605 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:55:28,632 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:55:28,633 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:55:28,637 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:55:28,638 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:55:28,639 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:55:35,240 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:55:35,268 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:55:35,268 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:55:35,270 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:55:35,271 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:55:35,272 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:55:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:55:39,029 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:55:39,060 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:55:39,067 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:55:39,072 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:55:39,073 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:55:39,074 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:55:39] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:56:04,758 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:56:04,787 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:04,789 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:56:04,791 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:04,792 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:56:04,793 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:56:04] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:56:05,246 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:56:05,263 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:05,263 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:56:05,264 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:05,265 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:56:05,265 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:56:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:56:08,260 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:56:08,274 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:08,275 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:56:08,275 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:08,276 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:56:08,276 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:56:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:56:12,107 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:56:12,134 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:12,135 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:56:12,138 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:12,139 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:56:12,140 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:56:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:56:15,475 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:56:15,495 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:15,496 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:56:15,497 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:15,497 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:56:15,498 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:56:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:56:17,259 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:56:17,279 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:17,280 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:56:17,281 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:17,281 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:56:17,282 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:56:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:56:28,263 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:56:28,291 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:28,292 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:56:28,293 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:28,294 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:56:28,295 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:56:35,242 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:56:35,261 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:35,261 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:56:35,263 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:35,264 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:56:35,265 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:56:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:56:38,569 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:56:38,584 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:38,585 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:56:38,586 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:38,586 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:56:38,586 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:56:38] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:56:41,256 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:56:41,286 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:41,287 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:56:41,289 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:41,290 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:56:41,291 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:56:41] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:56:47,567 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:56:47,610 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:47,611 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:56:47,612 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:56:47,613 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:56:47,613 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:56:47] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:57:05,247 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:57:05,261 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:57:05,262 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:57:05,262 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:57:05,263 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:57:05,263 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:57:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:57:08,569 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:57:08,596 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:57:08,597 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:57:08,599 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:57:08,599 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:57:08,600 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:57:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:57:11,249 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:57:11,274 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:57:11,277 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:57:11,279 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:57:11,279 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:57:11,280 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:57:11] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:57:18,820 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 11:57:18,821 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 11:57:18,821 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 11:57:20,913 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 11:57:20,914 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 11:57:20,917 - embeddings - INFO - Semantic vector index created
2025-08-04 11:57:20,918 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 11:57:20,924 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 11:57:20,925 - __main__ - INFO - Neo4j available: True
2025-08-04 11:57:20,925 - __main__ - INFO - Gemini API available: True
2025-08-04 11:57:20,925 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 11:57:20,926 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 11:57:20,977 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 11:57:20,978 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 11:57:28,254 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:57:28,269 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:57:28,269 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:57:28,270 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:57:28,271 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:57:28,271 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:57:28,560 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:57:28,574 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:57:28,575 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:57:28,576 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:57:28,576 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:57:28,577 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:57:35,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:57:35,272 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:57:35,272 - __main__ - ERROR - Failed to execute query: MATCH (n) 
        WITH labels(n)[0] AS node_type, keys(n) AS props, n
        UNWIND props AS prop_name
        WITH node_type, prop_name, n[prop_name] AS prop_value
        WHERE prop_value IS NOT NULL
        WITH node_type, prop_name, 
             collect(DISTINCT CASE 
                       WHEN prop_value IS NULL THEN null
                       ELSE coalesce(toString(prop_value), '[Complex Type]')
                     END)[0..3] AS sample_values, count(*) AS total_count
        RETURN node_type, prop_name, sample_values, total_count
        ORDER BY node_type, prop_name
2025-08-04 11:57:35,273 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.TypeError} {message: Invalid input for function 'toString()': Expected a String, Float, Integer, Boolean, Temporal or Duration, got: StringArray[HDMI, DisplayPort]}
2025-08-04 11:57:35,273 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:57:35,274 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:57:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:57:48,059 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 11:57:48,060 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 11:57:48,060 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 11:57:50,137 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 11:57:50,137 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 11:57:50,142 - embeddings - INFO - Semantic vector index created
2025-08-04 11:57:50,143 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 11:57:50,147 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 11:57:50,148 - __main__ - INFO - Neo4j available: True
2025-08-04 11:57:50,148 - __main__ - INFO - Gemini API available: True
2025-08-04 11:57:50,149 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 11:57:50,150 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 11:57:50,204 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 11:57:50,205 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 11:57:52,892 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:57:52] "GET / HTTP/1.1" 200 -
2025-08-04 11:57:52,969 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:57:52] "[36mGET /static/incehesap.jpg HTTP/1.1[0m" 304 -
2025-08-04 11:57:53,591 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:57:53,597 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:57:53] "GET /api/history HTTP/1.1" 200 -
2025-08-04 11:57:54,095 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:57:54,096 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:57:54] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:57:54,109 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:57:54,189 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:57:54,190 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:57:54] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:57:56,357 - __main__ - INFO - Received question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-04 11:57:56,358 - __main__ - INFO - Generating Cypher for question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-04 11:57:56,366 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 10.0s)
2025-08-04 11:57:56,367 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-04 11:57:56,378 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 11:57:57,536 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:57:57,573 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:57:57,573 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:57:58,638 - __main__ - INFO - Gemini API call successful
2025-08-04 11:57:58,670 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) WITH n, size((n)--()) AS degree ORDER BY degree DESC RETURN n, degree
2025-08-04 11:57:58,671 - __main__ - INFO - Generated Cypher: MATCH (n) WITH n, size((n)--()) AS degree ORDER BY degree DESC RETURN n, degree
2025-08-04 11:57:58,687 - __main__ - ERROR - Neo4j query error: {code: Neo.ClientError.Statement.SyntaxError} {message: A pattern expression should only be used in order to test the existence of a pattern. It can no longer be used inside the function size(), an alternative is to replace size() with COUNT {}. (line 1, column 24 (offset: 23))
"MATCH (n) WITH n, size((n)--()) AS degree ORDER BY degree DESC RETURN n, degree"
                        ^}
2025-08-04 11:57:58,688 - __main__ - ERROR - Failed to execute query: MATCH (n) WITH n, size((n)--()) AS degree ORDER BY degree DESC RETURN n, degree
2025-08-04 11:57:58,688 - __main__ - ERROR - Error: {code: Neo.ClientError.Statement.SyntaxError} {message: A pattern expression should only be used in order to test the existence of a pattern. It can no longer be used inside the function size(), an alternative is to replace size() with COUNT {}. (line 1, column 24 (offset: 23))
"MATCH (n) WITH n, size((n)--()) AS degree ORDER BY degree DESC RETURN n, degree"
                        ^}
2025-08-04 11:57:58,688 - __main__ - INFO - Query results: 0 rows
2025-08-04 11:57:58,689 - __main__ - INFO - Generating answer for question: En √ßok baƒülantƒ±sƒ± olan node hangisidir?
2025-08-04 11:58:00,617 - __main__ - INFO - Gemini API call successful
2025-08-04 11:58:00,651 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:58:00,658 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:58:00] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:58:07,193 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:58:07,194 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:58:07,202 - __main__ - INFO - Using cached Cypher query
2025-08-04 11:58:07,202 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN type(r) AS relationshipType, count(r) AS relationshipCount
2025-08-04 11:58:07,206 - __main__ - INFO - Query results: 2 rows
2025-08-04 11:58:07,207 - __main__ - INFO - Generating answer for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 11:58:07,218 - __main__ - INFO - Using cached answer
2025-08-04 11:58:07,228 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:58:07] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:58:09,548 - __main__ - INFO - Received question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:58:09,548 - __main__ - INFO - Generating Cypher for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:58:09,555 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 23.2s)
2025-08-04 11:58:09,556 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:58:09,566 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:58:09,566 - graphrag_pipeline - INFO - Extracted entities: ['Node']
2025-08-04 11:58:09,628 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:58:09,631 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:58:09] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:58:09,970 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:58:09,983 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 11:58:10,051 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:58:10,052 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:58:11,034 - __main__ - INFO - Gemini API call successful
2025-08-04 11:58:11,121 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH ()-[r]->() RETURN type(r), count(r)
2025-08-04 11:58:11,121 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN type(r), count(r)
2025-08-04 11:58:11,125 - __main__ - INFO - Query results: 2 rows
2025-08-04 11:58:11,126 - __main__ - INFO - Generating answer for question: Node'lar arasƒ±ndaki ili≈üki t√ºrleri nelerdir?
2025-08-04 11:58:12,249 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:58:12,289 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:58:12,290 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:58:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:58:13,969 - __main__ - INFO - Gemini API call successful
2025-08-04 11:58:14,005 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:58:14,016 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:58:14] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:58:23,249 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:58:23,306 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:58:23,307 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:58:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:58:28,248 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:58:28,305 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:58:28,307 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:58:28,319 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:58:28,390 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:58:28,392 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:58:28,553 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:58:28,596 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:58:28,597 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:58:38,871 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:58:38,945 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:58:38,946 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:58:38] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:58:42,258 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:58:42,322 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:58:42,323 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:58:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:58:47,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:58:47,361 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:58:47,363 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:58:47] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:58:53,260 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:58:53,319 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:58:53,320 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:58:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:59:05,255 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:59:05,307 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:59:05,308 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:59:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:59:08,570 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:59:08,620 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:59:08,620 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:59:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:59:12,866 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:59:12,940 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:59:12,942 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:59:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:59:13,203 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:59:13,270 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:59:13,272 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:59:13] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:59:15,050 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:59:15,087 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:59:15,088 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:59:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:59:17,607 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:59:17,656 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:59:17,657 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:59:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:59:22,983 - __main__ - INFO - Received question: √ºr√ºnleri Eklenme Tarihine g√∂re sƒ±rala
2025-08-04 11:59:22,984 - __main__ - INFO - Generating Cypher for question: √ºr√ºnleri Eklenme Tarihine g√∂re sƒ±rala
2025-08-04 11:59:22,995 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 96.6s)
2025-08-04 11:59:22,996 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: √ºr√ºnleri Eklenme Tarihine g√∂re sƒ±rala
2025-08-04 11:59:22,999 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:59:23,006 - graphrag_pipeline - INFO - Extracted entities: ['Eklenme', 'Tarihine']
2025-08-04 11:59:23,052 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:59:23,053 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:59:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:59:23,417 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 11:59:23,425 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 11:59:23,471 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 11:59:23,471 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 11:59:24,500 - __main__ - INFO - Gemini API call successful
2025-08-04 11:59:24,539 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) RETURN p ORDER BY p.createdAt
2025-08-04 11:59:24,539 - __main__ - INFO - Generated Cypher: MATCH (p:Product) RETURN p ORDER BY p.createdAt
2025-08-04 11:59:24,668 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: createdAt)} {position: line: 1, column: 39, offset: 38} for query: 'MATCH (p:Product) RETURN p ORDER BY p.createdAt'
2025-08-04 11:59:24,669 - __main__ - INFO - Query results: 20 rows
2025-08-04 11:59:24,669 - __main__ - INFO - Generating answer for question: √ºr√ºnleri Eklenme Tarihine g√∂re sƒ±rala
2025-08-04 11:59:35,248 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:59:35,314 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:59:35,315 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:59:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:59:38,563 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:59:38,599 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:59:38,600 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:59:38] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:59:41,245 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:59:41,313 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:59:41,314 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:59:41] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:59:44,550 - __main__ - INFO - Gemini API call successful
2025-08-04 11:59:44,595 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 11:59:44,603 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:59:44] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 11:59:45,245 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:59:45,317 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:59:45,319 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:59:45] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:59:47,561 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:59:47,595 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:59:47,596 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:59:47] "GET /api/health HTTP/1.1" 200 -
2025-08-04 11:59:52,994 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 11:59:53,074 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 11:59:53,075 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 11:59:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:00:05,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:00:05,303 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:00:05,304 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:00:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:00:08,575 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:00:08,648 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:00:08,649 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:00:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:00:11,280 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:00:11,316 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:00:11,317 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:00:11] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:00:15,265 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:00:15,340 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:00:15,343 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:00:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:00:23,267 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:00:23,313 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:00:23,314 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:00:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:00:28,561 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:00:28,603 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:00:28,604 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:00:53,260 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:00:53,323 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:00:53,326 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:00:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:01:06,248 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:01:06,279 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:01:06,280 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:01:06] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:01:09,559 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:01:09,596 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:01:09,597 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:01:09] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:01:12,246 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:01:12,297 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:01:12,299 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:01:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:01:16,248 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:01:16,290 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:01:16,291 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:01:16] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:01:23,252 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:01:23,283 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:01:23,284 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:01:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:01:28,564 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:01:28,631 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:01:28,632 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:02:07,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:02:07,292 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:02:07,293 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:02:07] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:02:10,565 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:02:10,603 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:02:10,604 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:02:10] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:02:13,246 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:02:13,283 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:02:13,284 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:02:13] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:02:17,252 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:02:17,300 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:02:17,302 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:02:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:02:24,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:02:24,305 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:02:24,307 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:02:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:02:28,558 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:02:28,721 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:02:28,734 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:02:50,149 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 12:02:50,150 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:02:50,189 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:02:50,267 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 12:02:50
2025-08-04 12:03:08,245 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:03:08,286 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:03:08,287 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:03:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:03:11,555 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:03:11,593 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:03:11,594 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:03:11] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:03:14,247 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:03:14,290 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:03:14,291 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:03:14] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:03:18,249 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:03:18,280 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:03:18,281 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:03:18] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:03:25,245 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:03:25,279 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:03:25,280 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:03:25] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:03:28,574 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:03:28,620 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:03:28,622 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:04:09,246 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:04:09,280 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:04:09,281 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:04:09] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:04:12,569 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:04:12,599 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:04:12,600 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:04:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:04:15,241 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:04:15,280 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:04:15,281 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:04:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:04:19,251 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:04:19,293 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:04:19,294 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:04:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:04:26,247 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:04:26,285 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:04:26,286 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:04:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:04:28,562 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:04:28,610 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:04:28,611 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:05:10,246 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:05:10,275 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:05:10,276 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:05:10] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:05:13,559 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:05:13,588 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:05:13,588 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:05:13] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:05:16,245 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:05:16,288 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:05:16,288 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:05:16] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:05:20,247 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:05:20,282 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:05:20,282 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:05:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:05:27,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:05:27,283 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:05:27,283 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:05:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:05:28,554 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:05:28,594 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:05:28,595 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:06:11,249 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:06:11,398 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:06:11,399 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:06:11] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:06:14,560 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:06:14,603 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:06:14,604 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:06:14] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:06:17,247 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:06:17,296 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:06:17,297 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:06:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:06:21,248 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:06:21,287 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:06:21,289 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:06:21] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:06:28,251 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:06:28,320 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:06:28,321 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:06:28,560 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:06:28,624 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:06:28,625 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:07:12,252 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:07:12,297 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:07:12,298 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:07:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:07:15,561 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:07:15,588 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:07:15,589 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:07:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:07:18,254 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:07:18,293 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:07:18,294 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:07:18] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:07:22,256 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:07:22,294 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:07:22,295 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:07:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:07:28,247 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:07:28,292 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:07:28,294 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:07:28,554 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:07:28,611 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:07:28,612 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:07:50,267 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 12:07:50,267 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:07:50,306 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:07:50,347 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 12:07:50
2025-08-04 12:08:13,245 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:08:13,273 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:08:13,273 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:08:13] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:08:16,244 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:08:16,279 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:08:16,280 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:08:16] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:08:19,555 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:08:19,586 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:08:19,587 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:08:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:08:23,242 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:08:23,271 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:08:23,271 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:08:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:08:28,247 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:08:28,276 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:08:28,277 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:08:30,307 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:08:30,339 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:08:30,340 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:08:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:09:14,254 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:09:14,287 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:09:14,288 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:09:14] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:09:17,564 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:09:17,607 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:09:17,608 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:09:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:09:20,242 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:09:20,286 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:09:20,287 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:09:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:09:24,244 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:09:24,311 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:09:24,312 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:09:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:09:28,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:09:28,297 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:09:28,298 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:09:28,568 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:09:28,608 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:09:28,609 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:10:15,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:10:15,283 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:10:15,284 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:10:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:10:18,248 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:10:18,285 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:10:18,286 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:10:18] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:10:21,567 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:10:21,595 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:10:21,596 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:10:21] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:10:25,255 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:10:25,284 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:10:25,284 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:10:25] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:10:28,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:10:28,278 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:10:28,321 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:10:28,322 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:10:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:10:28,332 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:10:28,333 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:10:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:11:16,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:11:16,292 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:11:16,293 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:11:16] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:11:19,550 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:11:19,577 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:11:19,578 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:11:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:11:22,242 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:11:22,282 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:11:22,283 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:11:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:11:26,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:11:26,285 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:11:26,286 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:11:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:11:28,256 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:11:28,312 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:11:28,313 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:11:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:11:28,558 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:11:28,609 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:11:28,611 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:11:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:12:17,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:12:17,279 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:12:17,279 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:12:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:12:20,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:12:20,294 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:12:20,295 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:12:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:12:23,558 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:12:23,589 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:12:23,590 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:12:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:12:27,243 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:12:27,281 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:12:27,282 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:12:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:12:28,248 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:12:28,251 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:12:28,386 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:12:28,387 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:12:28,389 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:12:28,391 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:12:50,347 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 12:12:50,347 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:12:50,390 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:12:50,466 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 12:12:50
2025-08-04 12:13:18,249 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:13:18,277 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:13:18,278 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:13:18] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:13:21,561 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:13:21,603 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:13:21,604 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:13:21] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:13:24,248 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:13:24,287 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:13:24,288 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:13:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:13:28,251 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:13:28,286 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:13:28,287 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:13:28,297 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:13:28,344 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:13:28,345 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:13:28,560 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:13:28,834 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:13:28,835 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:14:19,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:14:19,278 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:14:19,278 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:14:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:14:22,249 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:14:22,282 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:14:22,283 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:14:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:14:25,561 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:14:25,595 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:14:25,596 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:14:25] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:14:28,253 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:14:28,255 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:14:28,339 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:14:28,341 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:14:28,344 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:14:28,347 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:14:28,352 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:14:28,396 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:14:28,397 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:15:20,251 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:15:20,279 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:15:20,280 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:15:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:15:23,561 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:15:23,592 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:15:23,593 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:15:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:15:26,248 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:15:26,289 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:15:26,290 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:15:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:15:28,255 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:15:28,300 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:15:28,301 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:15:28,312 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:15:28,371 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:15:28,372 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:15:28,567 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:15:28,611 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:15:28,612 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:16:21,252 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:16:21,283 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:16:21,283 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:16:21] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:16:24,251 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:16:24,284 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:16:24,284 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:16:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:16:27,557 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:16:27,588 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:16:27,589 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:16:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:16:28,249 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:16:28,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:16:28,338 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:16:28,339 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:16:28,348 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:16:28,351 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:16:28,352 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:16:28,512 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:16:28,513 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:17:22,241 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:17:22,281 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:17:22,282 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:17:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:17:25,552 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:17:25,600 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:17:25,601 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:17:25] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:17:28,244 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:17:28,244 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:17:28,349 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:17:28,351 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:17:28,362 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:17:28,363 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:17:28,483 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:17:28,570 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:17:28,571 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:17:28,667 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:17:28,720 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:17:28,721 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:17:50,466 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 12:17:50,467 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:17:50,525 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:17:50,983 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 12:17:50
2025-08-04 12:18:23,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:18:23,279 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:18:23,280 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:18:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:18:26,238 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:18:26,297 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:18:26,298 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:18:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:18:28,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:18:28,319 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:18:28,320 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:18:28,331 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:18:28,393 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:18:28,395 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:18:28,562 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:18:28,619 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:18:28,620 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:18:28,828 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:18:28,881 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:18:28,882 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:19:24,243 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:19:24,278 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:19:24,279 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:19:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:19:27,245 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:19:27,274 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:19:27,275 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:19:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:19:28,249 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:19:28,291 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:19:28,293 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:19:28,303 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:19:28,350 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:19:28,351 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:19:28,559 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:19:28,595 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:19:28,596 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:19:28,826 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:19:28,864 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:19:28,865 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:20:25,249 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:20:25,276 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:20:25,277 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:20:25] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:20:28,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:20:28,251 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:20:28,321 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:20:28,321 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:20:28,322 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:20:28,323 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:20:28,335 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:20:28,383 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:20:28,384 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:20:28,634 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:20:28,661 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:20:28,661 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:20:28,899 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:20:28,928 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:20:28,929 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:21:26,248 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:21:26,298 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:21:26,299 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:21:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:21:28,252 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:21:28,308 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:21:28,310 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:21:28,323 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:21:28,481 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:21:28,483 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:21:28,553 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:21:28,618 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:21:28,619 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:21:28,805 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:21:28,862 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:21:28,864 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:21:28,932 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:21:29,001 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:21:29,002 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:21:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:22:27,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:22:27,297 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:22:27,298 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:22:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:22:28,256 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:22:28,333 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:22:28,335 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:22:28,348 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:22:28,417 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:22:28,419 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:22:28,561 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:22:28,627 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:22:28,629 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:22:28,811 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:22:28,866 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:22:28,867 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:22:28,952 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:22:29,010 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:22:29,011 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:22:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:22:50,983 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 12:22:50,984 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:22:51,034 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:22:51,095 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 12:22:51
2025-08-04 12:23:28,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:23:28,303 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:23:28,304 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:23:28,317 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:23:28,366 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:23:28,367 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:23:28,377 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:23:28,432 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:23:28,434 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:23:28,567 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:23:28,608 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:23:28,609 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:23:28,832 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:23:28,871 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:23:28,873 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:23:28,926 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:23:28,965 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:23:28,966 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:24:28,255 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:24:28,312 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:24:28,313 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:24:28,327 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:24:28,390 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:24:28,391 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:24:28,402 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:24:28,458 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:24:28,460 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:24:28,553 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:24:28,608 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:24:28,610 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:24:28,826 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:24:28,868 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:24:28,869 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:24:28,922 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:24:28,962 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:24:28,963 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:25:28,255 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:25:28,320 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:25:28,321 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:25:28,333 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:25:28,398 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:25:28,400 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:25:28,412 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:25:28,472 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:25:28,473 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:25:28,570 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:25:28,622 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:25:28,624 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:25:28,820 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:25:28,867 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:25:28,869 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:25:28,946 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:25:28,995 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:25:28,996 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:26:28,251 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:26:28,301 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:26:28,303 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:26:28,315 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:26:28,374 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:26:28,375 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:26:28,387 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:26:28,452 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:26:28,454 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:26:28,565 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:26:28,614 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:26:28,615 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:26:28,815 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:26:28,861 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:26:28,862 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:26:28,923 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:26:28,967 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:26:28,968 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:27:28,245 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:27:28,321 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:27:28,323 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:27:28,337 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:27:28,410 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:27:28,412 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:27:28,428 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:27:28,502 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:27:28,509 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:27:28,552 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:27:28,622 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:27:28,623 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:27:28,816 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:27:28,875 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:27:28,876 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:27:28,942 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:27:29,003 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:27:29,005 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:27:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:27:51,092 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 12:27:51,092 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:27:51,134 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:27:51,206 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 12:27:51
2025-08-04 12:28:28,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:28:28,283 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:28:28,283 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:28:28,292 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:28:28,333 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:28:28,334 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:28:28,343 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:28:28,388 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:28:28,389 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:28:28,557 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:28:28,635 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:28:28,637 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:28:28,823 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:28:28,868 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:28:28,869 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:28:28,948 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:28:28,998 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:28:28,999 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:29:28,248 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:29:28,324 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:29:28,327 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:29:28,343 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:29:28,421 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:29:28,422 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:29:28,437 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:29:28,513 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:29:28,515 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:29:28,554 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:29:28,639 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:29:28,641 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:29:28,807 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:29:28,873 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:29:28,874 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:29:28,961 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:29:29,019 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:29:29,021 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:29:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:30:28,251 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:30:28,316 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:30:28,318 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:30:28,331 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:30:28,398 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:30:28,400 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:30:28,411 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:30:28,473 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:30:28,475 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:30:28,558 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:30:28,619 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:30:28,621 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:30:28,824 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:30:28,879 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:30:28,880 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:30:28,931 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:30:28,988 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:30:28,989 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:31:28,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:31:28,331 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:31:28,333 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:31:28,346 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:31:28,414 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:31:28,415 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:31:28,425 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:31:28,481 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:31:28,482 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:31:28,545 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:31:28,607 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:31:28,608 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:31:28,793 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:31:28,827 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:31:28,828 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:31:28,919 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:31:28,957 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:31:28,957 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:32:28,251 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:32:28,326 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:32:28,329 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:32:28,342 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:32:28,422 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:32:28,424 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:32:28,455 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:32:28,534 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:32:28,535 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:32:28,550 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:32:28,624 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:32:28,625 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:32:28,814 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:32:28,890 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:32:28,891 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:32:28,964 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:32:29,047 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:32:29,049 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:32:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:32:51,197 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 12:32:51,198 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:32:51,261 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:32:51,337 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 12:32:51
2025-08-04 12:33:28,241 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:33:28,290 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:33:28,291 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:33:28,303 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:33:28,364 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:33:28,365 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:33:28,377 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:33:28,431 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:33:28,433 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:33:28,549 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:33:28,599 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:33:28,600 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:33:28,817 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:33:28,878 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:33:28,879 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:33:28,918 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:33:28,971 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:33:28,972 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:34:28,245 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:34:28,328 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:34:28,330 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:34:28,342 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:34:28,415 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:34:28,416 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:34:28,428 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:34:28,482 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:34:28,484 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:34:28,547 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:34:28,600 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:34:28,601 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:34:28,815 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:34:28,861 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:34:28,862 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:34:28,925 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:34:28,977 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:34:28,978 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:35:28,242 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:35:28,318 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:35:28,320 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:35:28,333 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:35:28,411 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:35:28,412 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:35:28,426 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:35:28,493 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:35:28,495 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:35:28,539 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:35:28,618 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:35:28,620 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:35:28,802 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:35:28,867 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:35:28,868 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:35:28,943 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:35:29,005 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:35:29,006 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:35:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:36:28,240 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:36:28,300 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:36:28,302 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:36:28,324 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:36:28,394 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:36:28,396 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:36:28,409 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:36:28,474 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:36:28,476 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:36:28,548 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:36:28,619 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:36:28,621 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:36:28,817 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:36:28,893 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:36:28,894 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:36:28,941 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:36:29,008 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:36:29,010 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:36:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:37:28,236 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:37:28,317 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:37:28,319 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:37:28,332 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:37:28,406 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:37:28,408 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:37:28,420 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:37:28,497 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:37:28,498 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:37:28,545 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:37:28,605 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:37:28,607 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:37:28,809 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:37:28,865 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:37:28,866 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:37:28,918 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:37:28,965 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:37:28,967 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:37:51,329 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 12:37:51,330 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:37:51,369 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:37:51,422 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 12:37:51
2025-08-04 12:38:28,220 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:38:28,269 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:38:28,271 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:38:28,292 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:38:28,347 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:38:28,348 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:38:28,358 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:38:28,406 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:38:28,408 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:38:28,523 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:38:28,571 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:38:28,572 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:38:28,789 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:38:28,834 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:38:28,835 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:38:28,882 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:38:28,926 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:38:28,927 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:39:28,231 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:39:28,266 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:39:28,268 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:39:28,278 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:39:28,333 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:39:28,335 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:39:28,344 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:39:28,381 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:39:28,383 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:39:28,545 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:39:28,582 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:39:28,582 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:39:28,794 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:39:28,833 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:39:28,834 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:39:28,904 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:39:28,934 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:39:28,935 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:40:28,224 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:40:28,288 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:40:28,289 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:40:28,312 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:40:28,380 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:40:28,381 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:40:28,391 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:40:28,461 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:40:28,463 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:40:28,538 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:40:28,607 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:40:28,609 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:40:28,786 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:40:28,828 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:40:28,829 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:40:28,926 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:40:28,978 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:40:28,979 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:41:28,223 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:41:28,292 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:41:28,294 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:41:28,307 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:41:28,375 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:41:28,377 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:41:28,389 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:41:28,447 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:41:28,448 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:41:28,521 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:41:28,565 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:41:28,566 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:41:28,781 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:41:28,943 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:41:28,945 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:41:28,950 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:41:28,994 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:41:28,996 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:42:28,215 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:42:28,267 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:42:28,269 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:42:28,280 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:42:28,344 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:42:28,346 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:42:28,358 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:42:28,417 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:42:28,419 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:42:28,523 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:42:28,574 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:42:28,575 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:42:28,788 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:42:28,826 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:42:28,827 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:42:28,898 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:42:28,934 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:42:28,935 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:42:51,414 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 12:42:51,415 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:42:51,441 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:42:51,482 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 12:42:51
2025-08-04 12:43:28,214 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:43:28,261 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:43:28,262 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:43:28,273 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:43:28,334 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:43:28,335 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:43:28,345 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:43:28,396 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:43:28,398 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:43:28,523 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:43:28,566 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:43:28,567 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:43:28,787 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:43:28,827 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:43:28,828 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:43:28,879 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:43:28,941 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:43:28,942 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:44:28,212 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:44:28,262 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:44:28,263 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:44:28,272 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:44:28,338 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:44:28,339 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:44:28,351 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:44:28,410 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:44:28,412 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:44:28,521 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:44:28,585 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:44:28,587 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:44:28,773 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:44:28,818 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:44:28,820 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:44:28,898 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:44:28,933 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:44:28,934 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:45:28,217 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:45:28,275 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:45:28,277 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:45:28,293 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:45:28,358 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:45:28,360 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:45:28,373 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:45:28,437 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:45:28,439 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:45:28,514 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:45:28,560 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:45:28,561 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:45:28,773 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:45:28,810 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:45:28,812 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:45:28,882 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:45:28,913 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:45:28,914 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:46:28,216 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:46:28,252 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:46:28,253 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:46:28,261 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:46:28,315 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:46:28,316 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:46:28,326 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:46:28,373 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:46:28,374 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:46:28,527 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:46:28,565 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:46:28,566 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:46:28,793 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:46:28,828 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:46:28,829 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:46:28,886 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:46:28,917 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:46:28,918 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:47:28,203 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:47:28,212 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:47:28,320 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:47:28,321 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:47:28,321 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:47:28,323 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:47:28,336 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:47:28,384 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:47:28,385 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:47:28,394 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:47:28,440 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:47:28,441 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:47:28,650 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:47:28,693 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:47:28,694 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:47:28,898 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:47:28,924 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:47:28,924 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:47:51,474 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 12:47:51,475 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:47:51,516 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:47:51,571 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 12:47:51
2025-08-04 12:48:28,218 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:48:28,278 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:48:28,279 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:48:28,291 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:48:28,355 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:48:28,357 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:48:28,370 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:48:28,435 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:48:28,437 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:48:28,518 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:48:28,579 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:48:28,581 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:48:28,783 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:48:28,823 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:48:28,825 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:48:28,892 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:48:28,929 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:48:28,930 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:49:28,218 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:49:28,273 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:49:28,274 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:49:28,286 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:49:28,338 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:49:28,339 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:49:28,349 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:49:28,401 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:49:28,402 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:49:28,523 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:49:28,577 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:49:28,578 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:49:28,789 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:49:28,832 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:49:28,833 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:49:28,897 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:49:28,937 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:49:28,937 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:50:28,865 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:50:28,865 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:50:28,990 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:50:28,993 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:50:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:50:29,004 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:50:29,006 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:50:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:50:29,007 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:50:29,018 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:50:29,144 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:50:29,146 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:50:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:50:29,158 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:50:29,159 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:50:29,161 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:50:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:50:29,223 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:50:29,225 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:50:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:50:29,475 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:50:29,526 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:50:29,527 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:50:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:51:28,210 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:51:28,259 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:51:28,260 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:51:28,276 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:51:28,327 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:51:28,328 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:51:28,338 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:51:28,376 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:51:28,377 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:51:28,513 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:51:28,549 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:51:28,550 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:51:28,779 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:51:28,821 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:51:28,822 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:51:28,872 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:51:28,915 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:51:28,916 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:52:28,212 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:52:28,263 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:52:28,266 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:52:28,280 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:52:28,341 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:52:28,342 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:52:28,353 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:52:28,403 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:52:28,405 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:52:28,518 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:52:28,566 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:52:28,568 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:52:28,782 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:52:28,816 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:52:28,817 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:52:28,876 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:52:28,908 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:52:28,909 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:52:51,563 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 12:52:51,564 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:52:51,595 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:52:51,635 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 12:52:51
2025-08-04 12:53:28,198 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:53:28,259 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:53:28,260 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:53:28,271 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:53:28,320 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:53:28,321 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:53:28,331 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:53:28,384 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:53:28,385 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:53:28,509 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:53:28,545 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:53:28,546 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:53:28,767 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:53:28,803 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:53:28,804 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:53:28,858 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:53:28,883 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:53:28,883 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:54:28,207 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:54:28,266 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:54:28,268 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:54:28,279 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:54:28,333 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:54:28,335 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:54:28,345 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:54:28,394 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:54:28,395 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:54:28,517 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:54:28,570 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:54:28,571 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:54:28,767 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:54:28,807 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:54:28,808 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:54:28,891 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:54:28,920 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:54:28,920 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:55:28,192 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:55:28,241 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:55:28,242 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:55:28,252 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:55:28,294 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:55:28,295 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:55:28,305 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:55:28,360 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:55:28,361 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:55:28,497 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:55:28,541 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:55:28,542 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:55:28,748 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:55:28,789 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:55:28,790 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:55:28,856 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:55:28,897 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:55:28,899 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:56:28,190 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:56:28,231 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:56:28,232 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:56:28,244 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:56:28,288 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:56:28,289 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:56:28,300 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:56:28,354 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:56:28,356 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:56:28,498 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:56:28,529 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:56:28,530 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:56:28,765 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:56:28,804 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:56:28,805 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:56:28,843 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:56:28,899 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:56:28,900 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:57:28,196 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:57:28,251 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:57:28,252 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:57:28,271 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:57:28,326 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:57:28,327 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:57:28,338 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:57:28,403 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:57:28,404 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:57:28,494 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:57:28,537 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:57:28,538 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:57:28,760 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:57:28,800 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:57:28,801 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:57:28,852 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:57:28,876 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:57:28,877 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:57:51,628 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 12:57:51,628 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:57:51,657 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:57:51,699 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 12:57:51
2025-08-04 12:58:28,194 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:58:28,250 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:58:28,251 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:58:28,263 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:58:28,318 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:58:28,319 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:58:28,330 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:58:28,386 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:58:28,387 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:58:28,491 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:58:28,550 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:58:28,551 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:58:28,757 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:58:28,792 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:58:28,793 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:58:28,866 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:58:28,906 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:58:28,907 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:59:28,193 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:59:28,238 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:59:28,239 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:59:28,251 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:59:28,304 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:59:28,305 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:59:28,503 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:59:28,540 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:59:28,541 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:59:28,772 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:59:28,804 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:59:28,805 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 12:59:28,862 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 12:59:28,891 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 12:59:28,892 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 12:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:00:28,492 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:00:28,532 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:00:28,533 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:00:28,757 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:00:28,791 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:00:28,792 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:00:28,850 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:00:28,883 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:00:28,884 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:01:28,524 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:01:28,587 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:01:28,588 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:01:28,772 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:01:28,817 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:01:28,819 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:01:28,914 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:01:28,965 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:01:28,966 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:02:28,504 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:02:28,548 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:02:28,550 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:02:28,768 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:02:28,801 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:02:28,802 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:02:28,861 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:02:28,895 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:02:28,896 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:02:51,692 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 13:02:51,693 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:02:51,737 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:02:51,799 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 13:02:51
2025-08-04 13:03:28,483 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:03:28,514 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:03:28,515 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:03:28,749 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:03:28,800 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:03:28,801 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:03:28,827 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:03:28,872 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:03:28,873 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:04:28,495 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:04:28,545 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:04:28,546 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:04:28,760 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:04:28,792 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:04:28,793 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:04:28,867 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:04:28,894 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:04:28,895 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:05:28,485 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:05:28,522 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:05:28,523 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:05:28,753 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:05:28,794 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:05:28,795 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:05:28,845 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:05:28,891 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:05:28,892 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:06:28,491 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:06:28,528 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:06:28,529 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:06:28,741 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:06:28,785 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:06:28,786 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:06:28,851 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:06:28,896 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:06:28,897 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:07:28,488 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:07:28,514 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:07:28,515 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:07:28,753 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:07:28,786 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:07:28,786 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:07:28,832 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:07:28,864 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:07:28,865 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:07:51,792 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 13:07:51,793 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:07:51,823 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:07:51,864 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 13:07:51
2025-08-04 13:08:28,482 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:08:28,507 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:08:28,508 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:08:28,746 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:08:28,778 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:08:28,779 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:08:28,824 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:08:28,856 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:08:28,857 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:09:30,561 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:09:30,589 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:09:30,590 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:09:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:09:30,596 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:09:30,625 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:09:30,626 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:09:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:09:30,941 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:09:30,965 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:09:30,966 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:09:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:10:28,479 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:10:28,520 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:10:28,521 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:10:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:10:28,744 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:10:28,774 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:10:28,775 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:10:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:10:28,837 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:10:28,869 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:10:28,869 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:10:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:11:28,487 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:11:28,524 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:11:28,525 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:11:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:11:28,753 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:11:28,789 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:11:28,790 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:11:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:11:28,845 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:11:28,875 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:11:28,876 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:11:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:11:50,971 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:11:51,098 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:11:51,125 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:11:51] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:11:52,920 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:11:52,954 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:11:52,955 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:11:52] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:12:23,173 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:12:23,214 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:12:23,215 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:12:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:12:28,472 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:12:28,501 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:12:28,503 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:12:28,727 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:12:28,767 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:12:28,768 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:12:28,811 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:12:28,852 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:12:28,853 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:12:51,858 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 13:12:51,858 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:12:51,899 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:12:51,951 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 13:12:51
2025-08-04 13:12:53,164 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:12:53,199 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:12:53,200 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:12:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:13:22,905 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:13:22,945 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:13:22,946 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:13:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:13:28,476 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:13:28,508 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:13:28,509 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:13:28,742 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:13:28,783 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:13:28,784 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:13:28,826 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:13:28,867 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:13:28,868 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:13:40,397 - __main__ - INFO - Received question: Samsung markasƒ±ndaki √ºr√ºnleri listele
2025-08-04 13:13:40,397 - __main__ - INFO - Generating Cypher for question: Samsung markasƒ±ndaki √ºr√ºnleri listele
2025-08-04 13:13:40,409 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 48.5s)
2025-08-04 13:13:40,412 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Samsung markasƒ±ndaki √ºr√ºnleri listele
2025-08-04 13:13:40,427 - graphrag_pipeline - INFO - Extracted entities: ['Samsung']
2025-08-04 13:13:40,943 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 13:13:40,952 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 13:13:41,008 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 13:13:41,009 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 13:13:42,414 - __main__ - INFO - Gemini API call successful
2025-08-04 13:13:42,475 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (b:Brand {name: 'Samsung'})<-[r:BRAND]-(p:Product) RETURN p, b
2025-08-04 13:13:42,476 - __main__ - INFO - Generated Cypher: MATCH (b:Brand {name: 'Samsung'})<-[r:BRAND]-(p:Product) RETURN p, b
2025-08-04 13:13:42,636 - __main__ - INFO - Query results: 2 rows
2025-08-04 13:13:42,637 - __main__ - INFO - Generating answer for question: Samsung markasƒ±ndaki √ºr√ºnleri listele
2025-08-04 13:13:51,026 - __main__ - INFO - Gemini API call successful
2025-08-04 13:13:51,072 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 13:13:51,079 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:13:51] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 13:13:52,906 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:13:52,943 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:13:52,944 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:13:52] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:13:55,753 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:13:55,839 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:13:55,847 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:13:55] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:14:05,172 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:14:05,223 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:14:05,224 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:14:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:14:23,165 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:14:23,205 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:14:23,206 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:14:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:14:28,474 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:14:28,521 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:14:28,522 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:14:28,738 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:14:28,771 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:14:28,772 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:14:28,831 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:14:28,864 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:14:28,865 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:14:35,159 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:14:35,187 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:14:35,188 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:14:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:14:49,815 - __main__ - INFO - Received question: MSI ekran kartlarƒ± hangileri?
2025-08-04 13:14:49,815 - __main__ - INFO - Generating Cypher for question: MSI ekran kartlarƒ± hangileri?
2025-08-04 13:14:49,831 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 117.9s)
2025-08-04 13:14:49,832 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: MSI ekran kartlarƒ± hangileri?
2025-08-04 13:14:49,844 - graphrag_pipeline - INFO - Extracted entities: ['MSI']
2025-08-04 13:14:50,232 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 13:14:50,240 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 13:14:50,303 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 13:14:50,303 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 13:14:51,774 - __main__ - INFO - Gemini API call successful
2025-08-04 13:14:51,828 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (b:Brand {name: 'MSI'})<-[:BRAND]-(p:Product)-[:TYPE]->(c:Category) WHERE c.name = 'Ekran Kartƒ±' RETURN p
2025-08-04 13:14:51,829 - __main__ - INFO - Generated Cypher: MATCH (b:Brand {name: 'MSI'})<-[:BRAND]-(p:Product)-[:TYPE]->(c:Category) WHERE c.name = 'Ekran Kartƒ±' RETURN p
2025-08-04 13:14:52,064 - __main__ - INFO - Query results: 1 rows
2025-08-04 13:14:52,065 - __main__ - INFO - Generating answer for question: MSI ekran kartlarƒ± hangileri?
2025-08-04 13:14:52,910 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:14:52,963 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:14:52,964 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:14:52] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:14:56,818 - __main__ - INFO - Gemini API call successful
2025-08-04 13:14:56,865 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 13:14:56,874 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:14:56] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 13:15:23,165 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:15:23,215 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:15:23,216 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:15:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:15:28,167 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:15:28,221 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:15:28,223 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:15:28,467 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:15:28,516 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:15:28,517 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:15:28,722 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:15:28,766 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:15:28,767 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:15:28,827 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:15:28,886 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:15:28,887 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:15:53,170 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:15:53,201 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:15:53,202 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:15:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:16:28,168 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:16:28,212 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:16:28,213 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:16:28,223 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:16:28,283 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:16:28,284 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:16:28,477 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:16:28,523 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:16:28,524 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:16:28,728 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:16:28,771 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:16:28,772 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:16:28,837 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:16:28,878 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:16:28,880 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:17:28,161 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:17:28,208 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:17:28,209 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:17:28,222 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:17:28,269 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:17:28,270 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:17:28,470 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:17:28,514 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:17:28,515 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:17:28,734 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:17:28,765 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:17:28,766 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:17:28,828 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:17:28,862 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:17:28,863 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:17:51,944 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 13:17:51,945 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:17:51,990 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:17:52,064 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 13:17:52
2025-08-04 13:18:28,158 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:18:28,207 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:18:28,209 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:18:28,226 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:18:28,289 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:18:28,290 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:18:28,468 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:18:28,505 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:18:28,506 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:18:28,732 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:18:28,765 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:18:28,766 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:18:28,826 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:18:28,860 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:18:28,861 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:19:28,166 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:19:28,223 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:19:28,225 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:19:28,245 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:19:28,307 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:19:28,309 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:19:28,469 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:19:28,523 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:19:28,524 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:19:28,732 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:19:28,766 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:19:28,767 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:19:28,842 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:19:28,882 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:19:28,883 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:20:28,165 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:20:28,213 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:20:28,214 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:20:28,531 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:20:28,580 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:20:28,581 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:20:28,797 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:20:28,837 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:20:28,838 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:20:30,224 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:20:30,267 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:20:30,268 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:20:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:20:30,278 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:20:30,317 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:20:30,318 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:20:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:21:28,155 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:21:28,191 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:21:28,276 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:21:28,278 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:21:28,325 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:21:28,327 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:21:28,340 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:21:28,409 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:21:28,411 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:21:28,589 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:21:28,652 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:21:28,653 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:21:28,861 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:21:28,897 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:21:28,898 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:22:28,154 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:22:28,159 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:22:28,239 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:22:28,241 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:22:28,250 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:22:28,252 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:22:28,261 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:22:28,305 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:22:28,306 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:22:28,553 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:22:28,588 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:22:28,589 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:22:28,818 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:22:28,856 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:22:28,857 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:22:52,058 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 13:22:52,058 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:22:52,086 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:22:52,151 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 13:22:52
2025-08-04 13:23:28,153 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:23:28,156 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:23:28,269 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:23:28,270 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:23:28,272 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:23:28,273 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:23:28,291 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:23:28,343 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:23:28,344 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:23:28,591 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:23:28,623 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:23:28,624 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:23:28,858 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:23:28,897 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:23:28,899 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:24:23,530 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:24:23,609 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:24:23,611 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:24:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:24:28,151 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:24:28,153 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:24:28,224 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:24:28,227 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:24:28,229 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:24:28,230 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:24:28,549 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:24:28,601 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:24:28,602 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:24:28,815 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:24:28,882 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:24:28,883 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:24:52,892 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:24:52,926 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:24:52,927 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:24:52] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:25:22,901 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:25:22,945 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:25:22,947 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:25:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:25:28,152 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:25:28,154 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:25:28,238 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:25:28,239 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:25:28,240 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:25:28,243 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:25:28,564 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:25:28,605 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:25:28,606 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:25:28,816 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:25:28,869 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:25:28,870 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:25:52,893 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:25:52,928 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:25:52,928 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:25:52] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:26:22,903 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:26:22,941 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:26:22,942 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:26:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:26:28,154 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:26:28,156 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:26:28,238 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:26:28,239 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:26:28,242 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:26:28,249 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:26:28,566 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:26:28,607 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:26:28,608 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:26:28,818 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:26:28,870 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:26:28,871 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:26:52,897 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:26:52,961 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:26:52,962 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:26:52] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:27:23,155 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:27:23,204 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:27:23,205 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:27:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:27:28,145 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:27:28,147 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:27:28,240 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:27:28,240 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:27:28,242 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:27:28,242 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:27:28,553 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:27:28,596 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:27:28,597 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:27:28,810 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:27:28,865 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:27:28,866 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:27:52,145 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 13:27:52,146 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:27:52,181 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:27:52,233 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 13:27:52
2025-08-04 13:27:53,151 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:27:53,199 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:27:53,200 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:27:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:28:23,155 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:28:23,193 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:28:23,194 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:28:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:28:28,158 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:28:28,159 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:28:28,286 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:28:28,287 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:28:28,288 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:28:28,288 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:28:28,622 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:28:28,676 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:28:28,678 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:28:28,977 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:28:29,017 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:28:29,018 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:28:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:28:41,737 - __main__ - INFO - Received question: connection Interface √∂zelliƒüi USB olan √ºr√ºnleri getir.
2025-08-04 13:28:41,737 - __main__ - INFO - Generating Cypher for question: connection Interface √∂zelliƒüi USB olan √ºr√ºnleri getir.
2025-08-04 13:28:41,754 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 49.6s)
2025-08-04 13:28:41,756 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: connection Interface √∂zelliƒüi USB olan √ºr√ºnleri getir.
2025-08-04 13:28:41,774 - graphrag_pipeline - INFO - Extracted entities: ['USB', 'Interface']
2025-08-04 13:28:42,309 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 13:28:42,321 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 13:28:42,402 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 13:28:42,402 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 13:28:43,596 - __main__ - INFO - Gemini API call successful
2025-08-04 13:28:43,657 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) WHERE p.connectionInterface CONTAINS 'USB' RETURN p
2025-08-04 13:28:43,657 - __main__ - INFO - Generated Cypher: MATCH (p:Product) WHERE p.connectionInterface CONTAINS 'USB' RETURN p
2025-08-04 13:28:43,757 - __main__ - INFO - Query results: 1 rows
2025-08-04 13:28:43,757 - __main__ - INFO - Generating answer for question: connection Interface √∂zelliƒüi USB olan √ºr√ºnleri getir.
2025-08-04 13:28:46,588 - __main__ - INFO - Gemini API call successful
2025-08-04 13:28:46,649 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 13:28:46,656 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:28:46] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 13:28:52,885 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:28:52,947 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:28:52,950 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:28:52] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:29:23,154 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:29:23,192 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:29:23,193 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:29:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:29:28,151 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:29:28,187 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:29:28,188 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:29:28,452 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:29:28,508 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:29:28,509 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:29:28,715 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:29:28,764 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:29:28,766 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:29:28,830 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:29:28,874 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:29:28,877 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:29:53,147 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:29:53,184 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:29:53,185 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:29:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:30:18,763 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:30:18] "GET / HTTP/1.1" 200 -
2025-08-04 13:30:19,316 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:30:19] "GET /static/incehesap.jpg HTTP/1.1" 200 -
2025-08-04 13:30:19,750 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:30:19,754 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:30:19] "GET /api/history HTTP/1.1" 200 -
2025-08-04 13:30:19,828 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:30:19,830 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:30:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:30:20,001 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:30:20,079 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:30:20,080 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:30:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:30:23,143 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:30:23,199 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:30:23,200 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:30:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:30:28,142 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:30:28,143 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:30:28,205 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:30:28,209 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:30:28,215 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:30:28,217 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:30:28,520 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:30:28,553 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:30:28,554 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:30:28,787 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:30:28,830 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:30:28,832 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:30:49,468 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:30:49,503 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:30:49,504 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:30:49] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:30:53,162 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:30:53,235 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:30:53,237 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:30:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:31:19,447 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:31:19,482 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:31:19,483 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:31:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:31:28,157 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:31:28,163 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:31:28,413 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:31:28,415 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:31:28,430 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:31:28,431 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:31:28,446 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:31:28,525 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:31:28,528 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:31:28,736 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:31:29,248 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:31:29,250 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:31:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:31:29,265 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:31:29,329 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:31:29,331 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:31:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:31:49,457 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:31:49,526 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:31:49,528 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:31:49] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:32:19,459 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:32:19,502 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:32:19,503 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:32:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:32:28,150 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:32:28,151 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:32:28,317 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:32:28,319 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:32:28,333 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:32:28,335 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:32:28,348 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:32:28,443 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:32:28,448 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:32:28,636 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:32:28,796 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:32:28,802 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:32:28,891 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:32:28,976 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:32:28,978 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:32:49,454 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:32:49,500 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:32:49,501 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:32:49] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:32:52,228 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 13:32:52,229 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:32:52,265 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:32:52,331 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 13:32:52
2025-08-04 13:33:19,439 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:33:19,478 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:33:19,480 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:33:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:33:28,164 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:33:28,248 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:33:28,249 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:33:28,264 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:33:28,338 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:33:28,339 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:33:28,464 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:33:28,531 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:33:28,533 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:33:28,723 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:33:28,784 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:33:28,786 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:33:28,844 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:33:28,923 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:33:28,967 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:33:49,447 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:33:49,491 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:33:49,492 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:33:49] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:34:28,141 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:34:28,180 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:34:28,182 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:34:28,198 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:34:28,260 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:34:28,261 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:34:28,444 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:34:28,503 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:34:28,504 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:34:28,695 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:34:28,735 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:34:28,737 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:34:28,826 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:34:28,859 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:34:28,860 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:34:29,066 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:34:29,113 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:34:29,114 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:34:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:35:26,385 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:35:26,425 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:35:26,426 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:35:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:35:28,147 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:35:28,152 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:35:28,301 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:35:28,302 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:35:28,306 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:35:28,311 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:35:28,320 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:35:28,388 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:35:28,389 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:35:28,636 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:35:28,697 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:35:28,698 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:35:28,886 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:35:28,937 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:35:28,938 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:35:49,460 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:35:49,525 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:35:49,526 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:35:49] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:36:00,212 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:36:00,290 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:36:00,292 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:36:00] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:36:19,445 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:36:19,494 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:36:19,495 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:36:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:36:22,890 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:36:22,940 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:36:22,942 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:36:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:36:28,146 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:36:28,214 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:36:28,216 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:36:28,453 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:36:28,508 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:36:28,509 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:36:28,703 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:36:28,749 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:36:28,751 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:36:28,835 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:36:28,881 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:36:28,883 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:36:29,197 - __main__ - INFO - Received question: id: category_TavsiyeSistemler bu id ye sahip node nedir?
2025-08-04 13:36:29,197 - __main__ - INFO - Generating Cypher for question: id: category_TavsiyeSistemler bu id ye sahip node nedir?
2025-08-04 13:36:29,220 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 217.0s)
2025-08-04 13:36:29,222 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: id: category_TavsiyeSistemler bu id ye sahip node nedir?
2025-08-04 13:36:29,237 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 13:36:29,761 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 13:36:29,825 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 13:36:29,826 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 13:36:30,963 - __main__ - INFO - Gemini API call successful
2025-08-04 13:36:31,041 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n:Category {id: 'category_TavsiyeSistemler'}) RETURN n
2025-08-04 13:36:31,042 - __main__ - INFO - Generated Cypher: MATCH (n:Category {id: 'category_TavsiyeSistemler'}) RETURN n
2025-08-04 13:36:31,106 - __main__ - INFO - Query results: 1 rows
2025-08-04 13:36:31,107 - __main__ - INFO - Generating answer for question: id: category_TavsiyeSistemler bu id ye sahip node nedir?
2025-08-04 13:36:33,129 - __main__ - INFO - Gemini API call successful
2025-08-04 13:36:33,181 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 13:36:33,188 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:36:33] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 13:36:52,880 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:36:52,915 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:36:52,916 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:36:52] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:37:06,064 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:37:06,132 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:37:06,133 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:37:06] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:37:19,435 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:37:19,468 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:37:19,469 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:37:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:37:23,136 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:37:23,170 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:37:23,172 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:37:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:37:28,135 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:37:28,181 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:37:28,182 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:37:28,443 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:37:28,492 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:37:28,493 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:37:28,697 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:37:28,741 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:37:28,743 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:37:28,805 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:37:28,843 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:37:28,844 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:37:45,571 - __main__ - INFO - Received question: Degistirilebilir Switch √∂zelliƒüi olmayan √ºr√ºnleri getir.
2025-08-04 13:37:45,571 - __main__ - INFO - Generating Cypher for question: Degistirilebilir Switch √∂zelliƒüi olmayan √ºr√ºnleri getir.
2025-08-04 13:37:45,591 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 293.3s)
2025-08-04 13:37:45,594 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Degistirilebilir Switch √∂zelliƒüi olmayan √ºr√ºnleri getir.
2025-08-04 13:37:45,613 - graphrag_pipeline - INFO - Extracted entities: ['Switch', 'Degistirilebilir']
2025-08-04 13:37:46,008 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 13:37:46,017 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 13:37:46,100 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 13:37:46,100 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 13:37:47,594 - __main__ - INFO - Gemini API call successful
2025-08-04 13:37:47,673 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) WHERE NOT EXISTS { MATCH (p) WHERE p.`Degistirilebilir Switch` IS NOT NULL } RETURN p
2025-08-04 13:37:47,674 - __main__ - INFO - Generated Cypher: MATCH (p:Product) WHERE NOT EXISTS { MATCH (p) WHERE p.`Degistirilebilir Switch` IS NOT NULL } RETURN p
2025-08-04 13:37:47,966 - __main__ - INFO - Query results: 19 rows
2025-08-04 13:37:47,966 - __main__ - INFO - Generating answer for question: Degistirilebilir Switch √∂zelliƒüi olmayan √ºr√ºnleri getir.
2025-08-04 13:37:49,433 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:37:49,471 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:37:49,472 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:37:49] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:37:52,326 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 13:37:52,327 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:37:52,367 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:37:52,433 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 13:37:52
2025-08-04 13:37:52,887 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:37:52,945 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:37:52,946 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:37:52] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:38:05,222 - __main__ - INFO - Gemini API call successful
2025-08-04 13:38:05,317 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 13:38:05,328 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:38:05] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 13:38:19,459 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:38:19,500 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:38:19,502 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:38:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:38:22,875 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:38:22,909 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:38:22,910 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:38:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:38:27,415 - __main__ - INFO - Received question: olan √ºr√ºn hangisi?
2025-08-04 13:38:27,416 - __main__ - INFO - Generating Cypher for question: olan √ºr√ºn hangisi?
2025-08-04 13:38:27,436 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 35.1s)
2025-08-04 13:38:27,437 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: olan √ºr√ºn hangisi?
2025-08-04 13:38:27,456 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 13:38:27,920 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 13:38:28,053 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 13:38:28,054 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 13:38:28,150 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:38:28,229 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:38:28,231 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:38:28,454 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:38:28,488 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:38:28,489 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:38:28,709 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:38:28,753 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:38:28,754 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:38:28,807 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:38:28,861 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:38:28,862 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:38:29,171 - __main__ - INFO - Gemini API call successful
2025-08-04 13:38:29,252 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) RETURN p
2025-08-04 13:38:29,253 - __main__ - INFO - Generated Cypher: MATCH (p:Product) RETURN p
2025-08-04 13:38:29,266 - __main__ - INFO - Query results: 20 rows
2025-08-04 13:38:29,267 - __main__ - INFO - Generating answer for question: olan √ºr√ºn hangisi?
2025-08-04 13:38:52,874 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:38:52,912 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:38:52,913 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:38:52] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:38:59,295 - __main__ - INFO - Gemini API call successful
2025-08-04 13:38:59,355 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 13:38:59,364 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:38:59] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 13:39:20,440 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:39:20,478 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:39:20,479 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:39:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:39:23,141 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:39:23,176 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:39:23,177 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:39:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:39:28,141 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:39:28,143 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:39:28,233 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:39:28,235 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:39:28,237 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:39:28,238 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:39:28,558 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:39:28,638 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:39:28,640 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:39:28,814 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:39:28,864 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:39:28,865 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:39:49,452 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:39:49,492 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:39:49,493 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:39:49] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:39:49,854 - __main__ - INFO - Received question: Kingston markasƒ±na ait olan √ºr√ºnleri getir.
2025-08-04 13:39:49,854 - __main__ - INFO - Generating Cypher for question: Kingston markasƒ±na ait olan √ºr√ºnleri getir.
2025-08-04 13:39:49,885 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 117.5s)
2025-08-04 13:39:49,887 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Kingston markasƒ±na ait olan √ºr√ºnleri getir.
2025-08-04 13:39:49,911 - graphrag_pipeline - INFO - Extracted entities: ['Kingston']
2025-08-04 13:39:50,367 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 13:39:50,375 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 13:39:50,485 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 13:39:50,486 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 13:39:52,099 - __main__ - INFO - Gemini API call successful
2025-08-04 13:39:52,174 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (b:Brand) WHERE b.name = 'Kingston' MATCH (p:Product)-[r:BRAND]->(b) RETURN p
2025-08-04 13:39:52,175 - __main__ - INFO - Generated Cypher: MATCH (b:Brand) WHERE b.name = 'Kingston' MATCH (p:Product)-[r:BRAND]->(b) RETURN p
2025-08-04 13:39:52,299 - __main__ - INFO - Query results: 1 rows
2025-08-04 13:39:52,300 - __main__ - INFO - Generating answer for question: Kingston markasƒ±na ait olan √ºr√ºnleri getir.
2025-08-04 13:39:52,870 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:39:52,913 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:39:52,915 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:39:52] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:39:55,406 - __main__ - INFO - Gemini API call successful
2025-08-04 13:39:55,541 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 13:39:55,560 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:39:55] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 13:40:19,451 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:40:19,516 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:40:19,517 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:40:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:40:23,130 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:40:23,163 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:40:23,164 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:40:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:40:28,135 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:40:28,189 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:40:28,190 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:40:28,441 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:40:28,468 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:40:28,469 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:40:28,706 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:40:28,733 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:40:28,734 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:40:28,781 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:40:28,809 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:40:28,810 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:40:53,131 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:40:53,169 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:40:53,170 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:40:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:41:20,442 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:41:20,479 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:41:20,480 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:41:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:41:28,131 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:41:28,184 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:41:28,185 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:41:28,197 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:41:28,249 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:41:28,250 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:41:28,445 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:41:28,489 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:41:28,490 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:41:28,695 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:41:28,743 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:41:28,743 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:41:28,802 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:41:28,845 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:41:28,846 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:42:21,435 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:42:21,509 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:42:21,511 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:42:21] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:42:28,129 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:42:28,200 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:42:28,202 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:42:28,220 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:42:28,293 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:42:28,295 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:42:28,438 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:42:28,497 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:42:28,498 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:42:28,693 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:42:28,746 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:42:28,747 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:42:28,819 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:42:28,866 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:42:28,867 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:42:52,429 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 13:42:52,429 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:42:52,475 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:42:52,579 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 13:42:52
2025-08-04 13:42:52,871 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:42:52,912 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:42:52,913 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:42:52] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:43:22,449 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:43:22,500 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:43:22,501 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:43:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:43:22,868 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:43:22,923 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:43:22,924 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:43:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:43:28,146 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:43:28,248 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:43:28,251 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:43:28,454 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:43:28,520 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:43:28,521 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:43:28,715 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:43:28,766 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:43:28,767 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:43:28,838 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:43:28,911 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:43:28,913 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:43:53,134 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:43:53,166 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:43:53,167 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:43:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:44:23,134 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:44:23,171 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:44:23,172 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:44:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:44:23,428 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:44:23,467 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:44:23,468 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:44:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:44:28,125 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:44:28,155 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:44:28,156 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:44:28,430 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:44:28,465 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:44:28,466 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:44:28,690 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:44:28,722 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:44:28,723 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:44:28,784 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:44:28,821 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:44:28,822 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:45:24,121 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:45:24,149 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:45:24,150 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:45:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:45:24,434 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:45:24,463 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:45:24,464 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:45:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:45:28,140 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:45:28,185 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:45:28,186 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:45:28,451 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:45:28,508 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:45:28,509 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:45:28,703 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:45:28,752 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:45:28,753 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:45:28,820 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:45:28,870 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:45:28,871 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:46:25,123 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:46:25,153 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:46:25,154 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:46:25] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:46:25,427 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:46:25,468 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:46:25,469 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:46:25] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:46:28,125 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:46:28,183 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:46:28,184 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:46:28,425 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:46:28,477 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:46:28,478 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:46:28,677 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:46:28,734 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:46:28,736 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:46:28,799 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:46:28,834 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:46:28,835 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:47:26,118 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:47:26,146 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:47:26,146 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:47:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:47:26,421 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:47:26,450 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:47:26,451 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:47:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:47:28,121 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:47:28,154 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:47:28,184 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:47:28,186 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:47:28,229 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:47:28,231 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:47:28,509 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:47:28,557 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:47:28,558 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:47:28,767 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:47:28,806 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:47:28,806 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:47:52,574 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 13:47:52,575 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:47:52,624 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:47:52,705 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 13:47:52
2025-08-04 13:48:27,169 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:48:27,210 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:48:27,211 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:48:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:48:27,438 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:48:27,475 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:48:27,476 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:48:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:48:28,127 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:48:28,127 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:48:28,241 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:48:28,252 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:48:28,254 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:48:28,261 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:48:28,600 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:48:28,652 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:48:28,653 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:48:28,875 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:48:28,912 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:48:28,913 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:49:28,129 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:49:28,165 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:49:28,166 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:49:28,177 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:49:28,233 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:49:28,234 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:49:28,429 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:49:28,480 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:49:28,481 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:49:28,694 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:49:28,740 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:49:28,741 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:49:28,793 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:49:28,846 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:49:28,847 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:49:29,058 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:49:29,092 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:49:29,093 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:49:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:50:28,122 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:50:28,168 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:50:28,169 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:50:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:50:28,180 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:50:28,227 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:50:28,228 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:50:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:50:28,430 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:50:28,484 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:50:28,485 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:50:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:50:28,695 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:50:28,744 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:50:28,745 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:50:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:50:28,804 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:50:28,844 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:50:28,845 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:50:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:50:29,054 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:50:29,093 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:50:29,094 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:50:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:51:28,136 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:51:28,233 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:51:28,236 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:51:28,255 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:51:28,347 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:51:28,351 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:51:28,437 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:51:28,586 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:51:28,588 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:51:28,685 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:51:28,786 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:51:28,788 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:51:28,914 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:51:28,973 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:51:28,977 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:51:29,116 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:51:29,195 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:51:29,197 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:51:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:52:28,127 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:52:28,173 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:52:28,175 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:52:28,186 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:52:28,234 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:52:28,235 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:52:28,432 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:52:28,504 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:52:28,506 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:52:28,693 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:52:28,752 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:52:28,753 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:52:28,832 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:52:28,867 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:52:28,868 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:52:29,064 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:52:29,100 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:52:29,101 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:52:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:52:52,700 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 13:52:52,701 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:52:52,737 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:52:52,802 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 13:52:52
2025-08-04 13:53:28,135 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:53:28,217 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:53:28,218 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:53:28,237 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:53:28,333 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:53:28,336 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:53:28,426 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:53:28,482 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:53:28,483 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:53:28,683 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:53:28,743 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:53:28,744 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:53:28,801 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:53:28,851 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:53:28,852 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:53:29,064 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:53:29,108 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:53:29,109 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:53:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:54:28,123 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:54:28,288 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:54:28,289 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:54:28,303 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:54:28,372 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:54:28,374 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:54:28,425 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:54:28,556 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:54:28,557 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:54:28,679 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:54:28,751 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:54:28,752 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:54:28,882 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:54:28,952 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:54:28,953 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:54:29,067 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:54:29,109 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:54:29,110 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:54:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:55:28,130 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:55:28,243 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:55:28,246 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:55:28,270 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:55:28,369 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:55:28,373 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:55:28,428 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:55:28,524 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:55:28,525 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:55:28,687 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:55:28,781 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:55:28,783 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:55:28,843 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:55:28,924 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:55:28,926 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:55:29,097 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:55:29,201 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:55:29,205 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:55:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:56:28,116 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:56:28,181 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:56:28,182 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:56:28,198 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:56:28,274 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:56:28,276 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:56:28,421 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:56:28,488 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:56:28,490 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:56:28,687 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:56:28,738 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:56:28,739 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:56:28,804 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:56:28,840 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:56:28,841 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:56:29,051 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:56:29,093 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:56:29,094 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:56:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:57:28,111 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:57:28,159 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:57:28,161 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:57:28,172 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:57:28,222 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:57:28,223 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:57:28,424 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:57:28,475 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:57:28,477 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:57:28,675 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:57:28,720 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:57:28,722 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:57:28,791 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:57:28,835 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:57:28,837 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:57:29,039 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:57:29,083 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:57:29,084 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:57:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:57:52,798 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 13:57:52,799 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:57:52,846 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:57:52,960 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 13:57:52
2025-08-04 13:58:28,117 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:58:28,173 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:58:28,175 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:58:28,190 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:58:28,262 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:58:28,263 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:58:28,418 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:58:28,468 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:58:28,469 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:58:28,678 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:58:28,726 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:58:28,727 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:58:28,792 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:58:28,844 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:58:28,845 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:58:29,040 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:58:29,071 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:58:29,072 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:58:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:59:28,115 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:59:28,150 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:59:28,151 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:59:28,167 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:59:28,213 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:59:28,214 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:59:28,417 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:59:28,460 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:59:28,462 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:59:28,676 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:59:28,722 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:59:28,724 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:59:28,773 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:59:28,817 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:59:28,817 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 13:59:29,037 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 13:59:29,083 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 13:59:29,085 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 13:59:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:00:28,106 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:00:28,111 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:00:28,167 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:00:28,168 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:00:28,178 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:00:28,179 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:00:28,187 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:00:28,222 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:00:28,223 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:00:28,476 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:00:28,504 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:00:28,504 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:00:28,740 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:00:28,776 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:00:28,777 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:00:28,812 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:00:28,845 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:00:28,846 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:01:28,121 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:01:28,197 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:01:28,199 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:01:28,215 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:01:28,291 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:01:28,292 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:01:28,422 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:01:28,502 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:01:28,505 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:01:28,682 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:01:28,777 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:01:28,780 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:01:28,856 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:01:28,936 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:01:28,938 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:01:29,100 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:01:29,187 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:01:29,188 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:01:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:02:28,122 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:02:28,210 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:02:28,212 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:02:28,228 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:02:28,314 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:02:28,323 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:02:28,453 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:02:28,648 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:02:28,704 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:02:28,776 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:02:28,887 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:02:28,889 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:02:29,238 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:02:29,364 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:02:29,376 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:02:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:02:52,956 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 14:02:52,957 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:02:52,998 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:02:53,096 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 14:02:53
2025-08-04 14:03:28,119 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:03:28,207 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:03:28,212 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:03:28,231 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:03:28,317 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:03:28,319 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:03:28,425 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:03:28,493 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:03:28,494 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:03:28,672 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:03:28,738 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:03:28,739 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:03:28,819 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:03:28,870 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:03:28,872 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:04:28,108 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:04:28,109 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:04:28,187 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:04:28,189 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:04:28,192 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:04:28,195 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:04:28,201 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:04:28,252 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:04:28,253 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:04:28,504 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:04:28,574 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:04:28,575 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:04:28,756 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:04:28,811 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:04:28,812 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:05:28,107 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:05:28,109 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:05:28,194 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:05:28,195 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:05:28,205 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:05:28,207 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:05:28,216 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:05:28,281 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:05:28,283 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:05:28,506 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:05:28,555 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:05:28,556 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:05:28,774 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:05:28,808 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:05:28,808 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:06:28,112 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:06:28,112 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:06:28,207 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:06:28,208 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:06:28,216 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:06:28,217 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:06:28,218 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:06:28,271 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:06:28,272 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:06:28,547 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:06:28,581 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:06:28,582 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:06:28,793 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:06:28,838 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:06:28,839 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:07:28,105 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:07:28,105 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:07:28,198 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:07:28,199 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:07:28,206 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:07:28,208 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:07:28,214 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:07:28,261 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:07:28,262 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:07:28,530 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:07:28,575 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:07:28,576 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:07:28,777 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:07:28,826 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:07:28,827 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:07:53,093 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 14:07:53,093 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:07:53,128 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:07:53,183 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 14:07:53
2025-08-04 14:08:28,126 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:08:28,128 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:08:28,255 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:08:28,257 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:08:28,258 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:08:28,260 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:08:28,273 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:08:28,328 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:08:28,329 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:08:28,575 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:08:28,623 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:08:28,624 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:08:28,947 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:08:28,993 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:08:28,994 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:09:28,101 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:09:28,104 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:09:28,164 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:09:28,165 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:09:28,174 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:09:28,174 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:09:28,183 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:09:28,221 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:09:28,222 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:09:28,475 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:09:28,503 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:09:28,504 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:09:28,752 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:09:28,784 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:09:28,785 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:10:28,143 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:10:28,187 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:10:28,188 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:10:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:10:28,195 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:10:28,232 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:10:28,233 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:10:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:10:30,298 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:10:30,328 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:10:30,329 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:10:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:10:30,647 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:10:30,678 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:10:30,679 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:10:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:10:30,900 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:10:30,932 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:10:30,933 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:10:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:11:04,981 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:11:05,028 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:11:05,029 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:11:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:11:23,101 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:11:23,132 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:11:23,132 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:11:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:11:28,097 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:11:28,099 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:11:28,163 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:11:28,164 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:11:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:11:28,171 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:11:28,172 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:11:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:11:28,173 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:11:28,211 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:11:28,212 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:11:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:11:28,531 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:11:28,579 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:11:28,579 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:11:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:11:37,092 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:11:37,124 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:11:37,125 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:11:37] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:11:53,100 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:11:53,128 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:11:53,129 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:11:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:12:07,414 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:12:07,466 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:12:07,468 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:12:07] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:12:28,090 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:12:28,095 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:12:28,171 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:12:28,172 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:12:28,182 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:12:28,182 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:12:28,183 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:12:28,226 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:12:28,227 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:12:28,504 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:12:28,535 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:12:28,535 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:12:28,757 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:12:28,794 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:12:28,795 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:12:37,119 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:12:37,152 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:12:37,153 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:12:37] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:12:53,179 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 14:12:53,180 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:12:53,212 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:12:53,294 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 14:12:53
2025-08-04 14:13:07,416 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:13:07,484 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:13:07,485 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:13:07] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:13:28,103 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:13:28,161 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:13:28,162 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:13:28,174 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:13:28,240 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:13:28,242 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:13:28,412 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:13:28,459 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:13:28,460 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:13:28,664 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:13:28,698 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:13:28,699 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:13:28,771 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:13:28,818 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:13:28,819 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:13:37,106 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:13:37,140 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:13:37,140 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:13:37] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:14:07,417 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:14:07,490 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:14:07,492 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:14:07] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:14:28,100 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:14:28,142 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:14:28,143 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:14:28,400 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:14:28,439 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:14:28,440 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:14:28,662 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:14:28,701 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:14:28,703 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:14:28,777 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:14:28,833 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:14:28,834 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:14:37,409 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:14:37,447 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:14:37,448 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:14:37] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:15:28,099 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:15:28,102 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:15:28,216 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:15:28,217 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:15:28,217 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:15:28,218 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:15:28,565 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:15:28,620 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:15:28,621 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:15:28,792 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:15:28,825 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:15:28,825 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:15:28,938 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:15:28,990 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:15:28,991 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:16:28,097 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:16:28,106 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:16:28,236 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:16:28,250 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:16:28,255 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:16:28,257 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:16:28,565 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:16:28,645 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:16:28,646 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:16:28,833 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:16:28,915 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:16:28,917 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:16:28,963 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:16:29,031 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:16:29,033 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:16:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:17:28,104 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:17:28,158 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:17:28,160 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:17:28,416 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:17:28,459 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:17:28,460 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:17:28,664 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:17:28,701 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:17:28,702 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:17:28,778 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:17:28,814 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:17:28,815 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:17:29,016 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:17:29,070 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:17:29,071 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:17:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:17:53,290 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 14:17:53,291 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:17:53,338 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:17:53,442 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 14:17:53
2025-08-04 14:18:28,102 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:18:28,152 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:18:28,153 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:18:28,404 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:18:28,464 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:18:28,466 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:18:28,655 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:18:28,686 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:18:28,687 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:18:28,782 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:18:28,823 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:18:28,824 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:18:29,000 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:18:29,039 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:18:29,040 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:18:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:19:28,109 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:19:28,145 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:19:28,146 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:19:28,415 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:19:28,470 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:19:28,471 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:19:28,682 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:19:28,719 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:19:28,721 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:19:28,792 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:19:28,819 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:19:28,820 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:19:29,039 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:19:29,768 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:19:29,769 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:19:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:20:28,108 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:20:28,184 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:20:28,185 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:20:28,392 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:20:28,436 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:20:28,437 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:20:28,645 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:20:28,684 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:20:28,685 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:20:28,753 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:20:28,803 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:20:28,804 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:20:28,998 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:20:29,040 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:20:29,041 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:20:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:21:28,102 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:21:28,197 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:21:28,198 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:21:28,437 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:21:28,526 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:21:28,527 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:21:28,674 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:21:28,767 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:21:28,769 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:21:28,856 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:21:28,958 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:21:28,959 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:21:29,089 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:21:29,174 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:21:29,176 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:21:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:22:28,094 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:22:28,178 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:22:28,180 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:22:28,398 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:22:28,478 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:22:28,479 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:22:28,673 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:22:28,733 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:22:28,734 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:22:28,801 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:22:28,870 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:22:28,871 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:22:29,056 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:22:29,109 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:22:29,111 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:22:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:22:53,439 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 14:22:53,440 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:22:53,476 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:22:53,542 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 14:22:53
2025-08-04 14:23:28,092 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:23:28,153 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:23:28,155 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:23:28,396 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:23:28,441 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:23:28,442 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:23:28,671 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:23:28,715 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:23:28,716 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:23:28,757 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:23:28,806 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:23:28,808 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:23:29,026 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:23:29,061 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:23:29,062 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:23:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:24:28,093 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:24:28,136 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:24:28,137 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:24:28,458 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:24:28,489 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:24:28,490 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:24:28,713 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:24:28,755 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:24:28,756 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:24:28,813 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:24:28,852 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:24:28,853 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:24:30,181 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:24:30,215 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:24:30,216 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:24:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:25:28,097 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:25:28,137 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:25:28,138 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:25:28,410 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:25:28,445 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:25:28,446 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:25:28,663 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:25:28,706 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:25:28,707 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:25:28,759 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:25:28,805 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:25:28,806 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:25:29,032 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:25:29,088 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:25:29,089 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:25:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:26:28,087 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:26:28,137 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:26:28,138 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:26:28,405 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:26:28,593 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:26:28,594 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:26:28,666 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:26:28,711 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:26:28,712 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:26:28,916 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:26:28,974 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:26:28,976 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:26:29,036 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:26:29,110 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:26:29,112 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:26:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:27:28,101 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:27:28,182 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:27:28,184 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:27:28,407 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:27:28,505 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:27:28,507 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:27:28,666 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:27:28,727 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:27:28,728 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:27:28,822 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:27:28,885 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:27:28,886 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:27:29,041 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:27:29,076 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:27:29,077 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:27:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:27:53,538 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 14:27:53,538 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:27:53,590 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:27:53,667 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 14:27:53
2025-08-04 14:28:28,081 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:28:28,131 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:28:28,133 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:28:28,394 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:28:28,462 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:28:28,463 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:28:28,637 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:28:28,688 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:28:28,690 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:28:28,782 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:28:28,833 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:28:28,834 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:28:29,005 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:28:29,039 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:28:29,040 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:28:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:29:28,098 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:29:28,144 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:29:28,145 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:29:28,410 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:29:28,476 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:29:28,477 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:29:28,669 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:29:28,735 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:29:28,737 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:29:28,798 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:29:28,854 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:29:28,855 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:29:29,157 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:29:29,194 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:29:29,195 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:29:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:30:28,092 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:30:28,122 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:30:28,176 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:30:28,177 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:30:28,197 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:30:28,198 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:30:28,491 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:30:28,544 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:30:28,545 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:30:28,752 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:30:28,844 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:30:28,845 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:30:28,854 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:30:28,899 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:30:28,900 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:31:28,101 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:31:28,118 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:31:28,208 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:31:28,210 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:31:28,223 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:31:28,224 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:31:28,528 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:31:28,564 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:31:28,565 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:31:28,794 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:31:28,843 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:31:28,844 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:31:28,878 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:31:28,922 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:31:28,924 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:32:28,096 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:32:28,099 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:32:28,172 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:32:28,173 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:32:28,176 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:32:28,177 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:32:28,492 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:32:28,519 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:32:28,520 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:32:28,754 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:32:28,787 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:32:28,788 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:32:28,831 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:32:28,870 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:32:28,871 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:32:53,663 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 14:32:53,664 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:32:53,699 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:32:53,776 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 14:32:53
2025-08-04 14:33:28,090 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:33:28,092 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:33:28,185 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:33:28,186 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:33:28,187 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:33:28,188 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:33:28,509 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:33:28,540 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:33:28,541 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:33:28,765 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:33:28,817 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:33:28,819 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:33:28,863 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:33:28,919 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:33:28,920 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:34:28,077 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:34:28,114 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:34:28,115 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:34:28,383 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:34:28,412 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:34:28,412 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:34:28,645 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:34:28,685 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:34:28,686 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:34:28,726 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:34:28,813 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:34:28,820 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:34:29,012 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:34:29,070 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:34:29,071 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:34:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:35:28,076 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:35:28,078 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:35:28,162 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:35:28,163 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:35:28,163 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:35:28,164 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:35:28,488 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:35:28,519 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:35:28,520 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:35:28,735 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:35:28,779 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:35:28,780 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:35:28,845 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:35:28,898 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:35:28,899 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:36:28,084 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:36:28,086 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:36:28,151 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:36:28,152 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:36:28,153 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:36:28,153 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:36:28,470 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:36:28,499 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:36:28,500 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:36:28,733 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:36:28,779 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:36:28,780 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:36:28,811 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:36:28,850 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:36:28,851 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:37:28,076 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:37:28,078 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:37:28,170 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:37:28,171 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:37:28,173 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:37:28,174 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:37:28,492 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:37:28,525 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:37:28,526 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:37:28,742 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:37:28,767 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:37:28,768 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:37:28,835 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:37:28,860 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:37:28,861 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:37:53,773 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 14:37:53,774 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:37:53,805 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:37:53,861 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 14:37:53
2025-08-04 14:38:28,076 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:38:28,119 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:38:28,121 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:38:28,126 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:38:28,188 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:38:28,189 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:38:28,448 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:38:28,490 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:38:28,491 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:38:28,696 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:38:28,728 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:38:28,729 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:38:28,806 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:38:28,834 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:38:28,835 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:39:28,072 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:39:28,073 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:39:28,155 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:39:28,157 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:39:28,161 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:39:28,163 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:39:28,476 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:39:28,505 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:39:28,506 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:39:28,740 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:39:28,772 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:39:28,773 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:39:28,818 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:39:28,854 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:39:28,855 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:40:28,083 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:40:28,085 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:40:28,226 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:40:28,227 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:40:28,232 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:40:28,233 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:40:28,546 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:40:28,594 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:40:28,596 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:40:28,802 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:40:28,867 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:40:28,868 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:40:28,916 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:40:28,968 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:40:28,969 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:40:34,529 - __main__ - INFO - Received question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-04 14:40:34,530 - __main__ - INFO - Generating Cypher for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-04 14:40:34,554 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 160.7s)
2025-08-04 14:40:34,558 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-04 14:40:34,588 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±']
2025-08-04 14:40:35,764 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 14:40:35,814 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 14:40:35,950 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 14:40:35,951 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 14:40:36,751 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:40:36,802 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:40:36,803 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:40:36] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:40:37,232 - __main__ - INFO - Gemini API call successful
2025-08-04 14:40:37,297 - __main__ - INFO - Generated Cypher with GraphRAG: CALL db.schema.visualization()
2025-08-04 14:40:37,297 - __main__ - INFO - Generated Cypher: CALL db.schema.visualization()
2025-08-04 14:40:37,360 - __main__ - INFO - Query results: 1 rows
2025-08-04 14:40:37,361 - __main__ - INFO - Generating answer for question: Veritabanƒ± ≈üemasƒ±nƒ± g√∂ster
2025-08-04 14:40:42,275 - __main__ - INFO - Gemini API call successful
2025-08-04 14:40:42,340 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 14:40:42,350 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:40:42] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 14:40:53,078 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:40:53,114 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:40:53,115 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:40:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:41:04,913 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:41:04] "GET / HTTP/1.1" 200 -
2025-08-04 14:41:04,945 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:41:04] "[36mGET /static/incehesap.jpg HTTP/1.1[0m" 304 -
2025-08-04 14:41:05,167 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:41:05,213 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:41:05,214 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:41:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:41:05,281 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:41:05] "GET /api/history HTTP/1.1" 200 -
2025-08-04 14:41:05,539 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:41:05,572 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:41:05,573 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:41:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:41:23,075 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:41:23,107 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:41:23,107 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:41:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:41:28,384 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:41:28,415 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:41:28,416 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:41:28,648 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:41:28,680 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:41:28,680 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:41:28,726 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:41:28,751 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:41:28,752 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:41:35,065 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:41:35,091 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:41:35,092 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:41:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:42:05,382 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:42:05,413 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:42:05,414 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:42:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:42:10,999 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:42:11,066 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:42:11,067 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:42:11] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:42:11,497 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:42:11,550 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:42:11,551 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:42:11] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:42:15,063 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:42:15,095 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:42:15,096 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:42:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:42:24,076 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:42:24,111 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:42:24,112 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:42:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:42:26,713 - __main__ - INFO - Received question: ekraannnn kartttƒ± olarak neler var elinde
2025-08-04 14:42:26,713 - __main__ - INFO - Generating Cypher for question: ekraannnn kartttƒ± olarak neler var elinde
2025-08-04 14:42:26,732 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 272.9s)
2025-08-04 14:42:26,735 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: ekraannnn kartttƒ± olarak neler var elinde
2025-08-04 14:42:26,757 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 14:42:27,255 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 14:42:27,347 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 14:42:27,347 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 14:42:28,069 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:42:28,145 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:42:28,146 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:42:28,462 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:42:28,510 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:42:28,511 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:42:28,834 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:42:28,860 - __main__ - INFO - Gemini API call successful
2025-08-04 14:42:28,939 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:42:28,939 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:42:28,944 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product)-[:TYPE]->(c:Category) WHERE c.name CONTAINS 'Ekran Kartƒ±' RETURN p
2025-08-04 14:42:28,945 - __main__ - INFO - Generated Cypher: MATCH (p:Product)-[:TYPE]->(c:Category) WHERE c.name CONTAINS 'Ekran Kartƒ±' RETURN p
2025-08-04 14:42:29,843 - __main__ - INFO - Query results: 4 rows
2025-08-04 14:42:29,844 - __main__ - INFO - Generating answer for question: ekraannnn kartttƒ± olarak neler var elinde
2025-08-04 14:42:35,074 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:42:35,118 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:42:35,120 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:42:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:42:35,261 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:42:35,299 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:42:35,301 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:42:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:42:42,310 - __main__ - INFO - Gemini API call successful
2025-08-04 14:42:42,393 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 14:42:42,404 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:42:42] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 14:42:45,072 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:42:45,104 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:42:45,105 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:42:45] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:42:53,079 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:42:53,136 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:42:53,137 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:42:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:42:53,858 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 14:42:53,858 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:42:53,903 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:42:54,022 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 14:42:54
2025-08-04 14:43:05,067 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:43:05,105 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:43:05,106 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:43:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:43:05,371 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:43:05,404 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:43:05,405 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:43:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:43:23,064 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:43:23,102 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:43:23,104 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:43:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:43:28,065 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:43:28,129 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:43:28,130 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:43:28,369 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:43:28,404 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:43:28,408 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:43:28,629 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:43:28,670 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:43:28,672 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:43:28,725 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:43:28,766 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:43:28,767 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:43:35,264 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:43:35,300 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:43:35,302 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:43:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:43:37,932 - __main__ - INFO - Received question: sadece ekran kartlarƒ±na yapƒ±lan yorumlarƒ± listele
2025-08-04 14:43:37,932 - __main__ - INFO - Generating Cypher for question: sadece ekran kartlarƒ±na yapƒ±lan yorumlarƒ± listele
2025-08-04 14:43:37,956 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 44.1s)
2025-08-04 14:43:37,958 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: sadece ekran kartlarƒ±na yapƒ±lan yorumlarƒ± listele
2025-08-04 14:43:37,982 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 14:43:38,440 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 14:43:38,527 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 14:43:38,528 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 14:43:40,016 - __main__ - INFO - Gemini API call successful
2025-08-04 14:43:40,097 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product)-[:TYPE]->(c:Category) WHERE c.name = 'Ekran Kartƒ±' RETURN p
2025-08-04 14:43:40,097 - __main__ - INFO - Generated Cypher: MATCH (p:Product)-[:TYPE]->(c:Category) WHERE c.name = 'Ekran Kartƒ±' RETURN p
2025-08-04 14:43:40,191 - __main__ - INFO - Query results: 4 rows
2025-08-04 14:43:40,192 - __main__ - INFO - Generating answer for question: sadece ekran kartlarƒ±na yapƒ±lan yorumlarƒ± listele
2025-08-04 14:43:51,200 - __main__ - INFO - Gemini API call successful
2025-08-04 14:43:51,272 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 14:43:51,279 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:43:51] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 14:43:53,076 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:43:53,111 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:43:53,112 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:43:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:44:05,259 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:44:05,296 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:44:05,297 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:44:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:44:06,068 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:44:06,104 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:44:06,105 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:44:06] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:44:20,295 - __main__ - INFO - Received question: sadece ekran kartlarƒ±na yapƒ±lan yorumlarƒ± listele ve her bir yorumu da yorumla
2025-08-04 14:44:20,296 - __main__ - INFO - Generating Cypher for question: sadece ekran kartlarƒ±na yapƒ±lan yorumlarƒ± listele ve her bir yorumu da yorumla
2025-08-04 14:44:20,320 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 86.4s)
2025-08-04 14:44:20,323 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: sadece ekran kartlarƒ±na yapƒ±lan yorumlarƒ± listele ve her bir yorumu da yorumla
2025-08-04 14:44:20,352 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 14:44:20,783 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 14:44:20,893 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 14:44:20,894 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 14:44:22,317 - __main__ - INFO - Gemini API call successful
2025-08-04 14:44:22,396 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product)-[r:TYPE]->(c:Category) WHERE c.name = 'Ekran Kartƒ±' RETURN p.comment AS Yorum
2025-08-04 14:44:22,397 - __main__ - INFO - Generated Cypher: MATCH (p:Product)-[r:TYPE]->(c:Category) WHERE c.name = 'Ekran Kartƒ±' RETURN p.comment AS Yorum
2025-08-04 14:44:22,532 - __main__ - INFO - Query results: 4 rows
2025-08-04 14:44:22,533 - __main__ - INFO - Generating answer for question: sadece ekran kartlarƒ±na yapƒ±lan yorumlarƒ± listele ve her bir yorumu da yorumla
2025-08-04 14:44:25,691 - __main__ - INFO - Gemini API call successful
2025-08-04 14:44:25,778 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 14:44:25,786 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:44:25] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 14:44:28,067 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:44:28,119 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:44:28,122 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:44:28,134 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:44:28,184 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:44:28,185 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:44:28,370 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:44:28,412 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:44:28,413 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:44:28,641 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:44:28,701 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:44:28,702 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:44:28,731 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:44:28,786 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:44:28,788 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:44:35,276 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:44:35,314 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:44:35,315 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:44:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:45:05,411 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:45:05,439 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:45:05,440 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:45:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:45:07,063 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:45:07,090 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:45:07,091 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:45:07] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:45:13,555 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:45:13,607 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:45:13,608 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:45:13] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:45:19,222 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 14:45:19,222 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 14:45:19,258 - __main__ - INFO - Using cached Cypher query
2025-08-04 14:45:19,259 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN type(r) AS relationshipType, count(r) AS relationshipCount
2025-08-04 14:45:19,267 - __main__ - INFO - Query results: 2 rows
2025-08-04 14:45:19,267 - __main__ - INFO - Generating answer for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 14:45:19,304 - __main__ - INFO - Using cached answer
2025-08-04 14:45:19,318 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:45:19] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 14:45:22,815 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:45:22,848 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:45:22,849 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:45:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:45:24,717 - __main__ - INFO - Received question: En sƒ±k kullanƒ±lan property'ler nelerdir?
2025-08-04 14:45:24,718 - __main__ - INFO - Generating Cypher for question: En sƒ±k kullanƒ±lan property'ler nelerdir?
2025-08-04 14:45:24,745 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 150.8s)
2025-08-04 14:45:24,747 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: En sƒ±k kullanƒ±lan property'ler nelerdir?
2025-08-04 14:45:24,774 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 14:45:25,541 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 14:45:25,665 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 14:45:25,666 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 14:45:27,658 - __main__ - INFO - Gemini API call successful
2025-08-04 14:45:27,796 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n)
WITH labels(n)[0] AS node_type, keys(n) AS props
UNWIND props AS prop
RETURN node_type, prop, count(*) AS usage_count
ORDER BY usage_count DESC
2025-08-04 14:45:27,798 - __main__ - INFO - Generated Cypher: MATCH (n)
WITH labels(n)[0] AS node_type, keys(n) AS props
UNWIND props AS prop
RETURN node_type, prop, count(*) AS usage_count
ORDER BY usage_count DESC
2025-08-04 14:45:28,082 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:45:28,134 - __main__ - INFO - Query results: 322 rows
2025-08-04 14:45:28,135 - __main__ - INFO - Generating answer for question: En sƒ±k kullanƒ±lan property'ler nelerdir?
2025-08-04 14:45:28,215 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:45:28,217 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:45:28,370 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:45:28,411 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:45:28,412 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:45:28,634 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:45:28,695 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:45:28,696 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:45:28,727 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:45:28,782 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:45:28,783 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:45:35,378 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:45:35,419 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:45:35,420 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:45:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:45:37,932 - __main__ - INFO - Gemini API call successful
2025-08-04 14:45:38,031 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 14:45:38,040 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:45:38] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 14:45:52,807 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:45:52,844 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:45:52,845 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:45:52] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:46:08,070 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:46:08,105 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:46:08,106 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:46:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:46:22,807 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:46:22,852 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:46:22,853 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:46:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:46:28,085 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:46:28,138 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:46:28,139 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:46:28,385 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:46:28,429 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:46:28,430 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:46:28,650 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:46:28,690 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:46:28,692 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:46:28,745 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:46:28,780 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:46:28,781 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:46:29,008 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:46:29,051 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:46:29,052 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:46:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:46:46,047 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:46:46,102 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:46:46,104 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:46:46] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:46:53,069 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:46:53,108 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:46:53,109 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:46:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:47:05,379 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:47:05,407 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:47:05,408 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:47:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:47:09,063 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:47:09,091 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:47:09,092 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:47:09] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:47:23,062 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:47:23,090 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:47:23,090 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:47:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:47:28,115 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:47:28,168 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:47:28,169 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:47:28,414 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:47:28,461 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:47:28,463 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:47:28,659 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:47:28,698 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:47:28,699 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:47:28,784 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:47:28,814 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:47:28,815 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:47:35,064 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:47:35,096 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:47:35,098 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:47:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:47:54,020 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 14:47:54,020 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:47:54,063 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:47:54,149 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 14:47:54
2025-08-04 14:48:10,074 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:48:10,102 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:48:10,103 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:48:10] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:48:24,064 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:48:24,094 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:48:24,094 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:48:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:48:28,063 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:48:28,107 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:48:28,109 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:48:28,368 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:48:28,415 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:48:28,416 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:48:28,632 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:48:28,672 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:48:28,673 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:48:28,730 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:48:28,769 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:48:28,769 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:48:28,995 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:48:29,034 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:48:29,035 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:48:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:49:11,085 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:49:11,167 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:49:11,168 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:49:11] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:49:25,073 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:49:25,124 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:49:25,125 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:49:25] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:49:28,065 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:49:28,113 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:49:28,114 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:49:28,368 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:49:28,410 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:49:28,411 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:49:28,633 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:49:28,664 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:49:28,665 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:49:28,727 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:49:28,760 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:49:28,761 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:49:28,975 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:49:29,021 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:49:29,022 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:49:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:50:12,074 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:50:12,116 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:50:12,118 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:50:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:50:26,087 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:50:26,128 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:50:26,129 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:50:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:50:28,076 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:50:28,127 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:50:28,129 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:50:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:50:28,381 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:50:28,450 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:50:28,451 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:50:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:50:28,650 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:50:28,720 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:50:28,721 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:50:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:50:28,768 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:50:28,835 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:50:28,837 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:50:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:50:29,043 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:50:29,112 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:50:29,113 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:50:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:51:13,063 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:51:13,113 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:51:13,114 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:51:13] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:51:27,067 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:51:27,113 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:51:27,114 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:51:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:51:28,164 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:51:28,305 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:51:28,313 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:51:28,462 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:51:28,543 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:51:28,548 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:51:28,711 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:51:28,774 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:51:28,775 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:51:28,864 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:51:28,927 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:51:28,929 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:51:29,090 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:51:29,148 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:51:29,149 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:51:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:52:14,092 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:52:14,123 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:52:14,124 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:52:14] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:52:28,071 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:52:28,106 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:52:28,107 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:52:28,118 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:52:28,169 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:52:28,170 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:52:28,377 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:52:28,463 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:52:28,465 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:52:28,641 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:52:28,678 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:52:28,679 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:52:28,781 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:52:28,843 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:52:28,844 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:52:28,996 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:52:29,026 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:52:29,027 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:52:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:52:54,146 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 14:52:54,146 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:52:54,178 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:52:54,285 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 14:52:54
2025-08-04 14:53:15,060 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:53:15,092 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:53:15,093 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:53:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:53:28,077 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:53:28,138 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:53:28,140 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:53:28,153 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:53:28,221 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:53:28,222 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:53:28,381 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:53:28,430 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:53:28,431 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:53:28,643 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:53:28,679 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:53:28,680 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:53:28,750 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:53:28,779 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:53:28,780 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:53:28,997 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:53:29,027 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:53:29,027 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:53:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:54:16,071 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:54:16,105 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:54:16,106 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:54:16] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:54:28,064 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:54:28,098 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:54:28,099 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:54:28,107 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:54:28,157 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:54:28,158 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:54:28,367 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:54:28,430 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:54:28,431 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:54:28,631 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:54:28,676 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:54:28,678 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:54:28,753 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:54:28,792 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:54:28,793 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:54:28,986 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:54:29,023 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:54:29,024 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:54:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:55:17,066 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:55:17,112 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:55:17,113 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:55:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:55:28,066 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:55:28,136 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:55:28,137 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:55:28,151 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:55:28,213 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:55:28,216 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:55:28,370 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:55:28,444 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:55:28,445 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:55:28,630 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:55:28,724 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:55:28,806 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:55:28,910 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:55:28,973 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:55:28,974 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:55:29,309 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:55:29,370 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:55:29,372 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:55:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:56:18,055 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:56:18,096 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:56:18,097 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:56:18] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:56:28,059 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:56:28,103 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:56:28,104 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:56:28,115 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:56:28,159 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:56:28,160 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:56:28,366 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:56:28,419 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:56:28,420 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:56:28,629 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:56:28,679 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:56:28,680 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:56:28,739 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:56:28,786 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:56:28,787 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:56:28,999 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:56:29,048 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:56:29,049 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:56:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:57:19,065 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:57:19,104 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:57:19,105 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:57:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:57:28,060 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:57:28,106 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:57:28,107 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:57:28,115 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:57:28,174 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:57:28,175 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:57:28,369 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:57:28,409 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:57:28,410 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:57:28,630 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:57:28,673 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:57:28,674 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:57:28,724 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:57:28,768 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:57:28,770 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:57:28,990 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:57:29,072 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:57:29,073 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:57:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:57:54,282 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 14:57:54,283 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:57:54,318 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:57:54,404 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 14:57:54
2025-08-04 14:58:20,054 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:58:20,090 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:58:20,092 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:58:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:58:28,057 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:58:28,137 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:58:28,138 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:58:28,151 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:58:28,222 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:58:28,223 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:58:28,359 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:58:28,428 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:58:28,429 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:58:28,633 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:58:28,693 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:58:28,694 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:58:28,743 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:58:28,810 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:58:28,812 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:58:29,004 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:58:29,045 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:58:29,046 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:58:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:59:21,056 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:59:21,097 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:59:21,098 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:59:21] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:59:28,060 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:59:28,104 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:59:28,105 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:59:28,114 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:59:28,153 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:59:28,153 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:59:28,368 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:59:28,403 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:59:28,404 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:59:28,631 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:59:28,673 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:59:28,674 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:59:28,726 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:59:28,765 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:59:28,766 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 14:59:28,989 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 14:59:29,030 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 14:59:29,031 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 14:59:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:00:22,063 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:00:22,100 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:00:22,101 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:00:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:00:28,058 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:00:28,107 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:00:28,108 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:00:28,117 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:00:28,169 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:00:28,170 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:00:28,366 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:00:28,408 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:00:28,410 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:00:28,632 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:00:28,676 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:00:28,677 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:00:28,729 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:00:28,772 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:00:28,773 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:00:28,996 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:00:29,041 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:00:29,042 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:00:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:01:23,090 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:01:23,130 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:01:23,131 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:01:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:01:28,062 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:01:28,079 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:01:28,157 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:01:28,158 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:01:28,165 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:01:28,166 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:01:28,174 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:01:28,215 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:01:28,216 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:01:28,469 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:01:28,511 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:01:28,512 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:01:28,749 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:01:28,790 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:01:28,791 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:01:28,834 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:01:28,880 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:01:28,881 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:02:24,061 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:02:24,094 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:02:24,095 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:02:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:02:28,055 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:02:28,057 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:02:28,134 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:02:28,136 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:02:28,176 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:02:28,177 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:02:28,188 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:02:28,237 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:02:28,238 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:02:28,452 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:02:28,493 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:02:28,494 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:02:28,704 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:02:28,754 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:02:28,755 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:02:28,820 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:02:28,864 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:02:28,865 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:02:54,401 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 15:02:54,402 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:02:54,432 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:02:54,516 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 15:02:54
2025-08-04 15:03:25,078 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:03:25,107 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:03:25,108 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:03:25] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:03:28,060 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:03:28,063 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:03:28,172 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:03:28,173 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:03:28,177 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:03:28,180 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:03:28,194 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:03:28,260 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:03:28,261 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:03:28,490 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:03:28,554 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:03:28,556 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:03:28,746 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:03:28,798 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:03:28,798 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:03:28,876 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:03:28,931 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:03:28,932 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:04:26,060 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:04:26,091 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:04:26,092 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:04:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:04:28,062 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:04:28,064 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:04:28,142 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:04:28,144 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:04:28,146 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:04:28,147 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:04:28,155 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:04:28,186 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:04:28,187 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:04:28,483 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:04:28,513 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:04:28,513 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:04:28,729 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:04:28,764 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:04:28,765 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:04:28,837 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:04:28,870 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:04:28,871 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:05:27,059 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:05:27,091 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:05:27,092 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:05:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:05:28,059 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:05:28,061 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:05:28,149 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:05:28,150 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:05:28,151 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:05:28,152 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:05:28,162 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:05:28,193 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:05:28,194 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:05:28,469 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:05:28,500 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:05:28,501 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:05:28,734 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:05:28,769 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:05:28,770 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:05:28,812 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:05:28,850 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:05:28,851 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:06:28,058 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:06:28,059 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:06:28,143 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:06:28,144 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:06:28,144 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:06:28,145 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:06:28,157 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:06:28,213 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:06:28,240 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:06:28,304 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:06:28,375 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:06:28,376 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:06:28,461 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:06:28,510 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:06:28,511 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:06:28,728 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:06:28,765 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:06:28,766 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:06:28,822 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:06:28,854 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:06:28,856 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:07:28,057 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:07:28,059 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:07:28,142 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:07:28,144 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:07:28,151 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:07:28,153 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:07:28,164 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:07:28,206 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:07:28,208 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:07:28,218 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:07:28,264 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:07:28,266 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:07:28,464 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:07:28,508 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:07:28,509 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:07:28,742 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:07:28,779 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:07:28,780 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:07:28,822 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:07:28,853 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:07:28,854 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:07:54,514 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 15:07:54,514 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:07:54,548 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:07:54,622 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 15:07:54
2025-08-04 15:08:28,050 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:08:28,052 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:08:28,161 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:08:28,162 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:08:28,168 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:08:28,172 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:08:28,176 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:08:28,236 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:08:28,237 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:08:28,250 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:08:28,306 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:08:28,307 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:08:28,486 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:08:28,537 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:08:28,538 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:08:28,749 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:08:28,793 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:08:28,795 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:08:28,850 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:08:28,900 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:08:28,901 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:09:28,060 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:09:28,063 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:09:28,149 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:09:28,150 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:09:28,158 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:09:28,159 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:09:28,170 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:09:28,219 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:09:28,220 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:09:28,231 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:09:28,280 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:09:28,282 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:09:28,466 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:09:28,505 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:09:28,505 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:09:28,719 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:09:28,754 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:09:28,755 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:09:28,820 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:09:28,856 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:09:28,857 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:10:28,051 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:10:28,053 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:10:28,123 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:10:28,125 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:10:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:10:28,136 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:10:28,138 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:10:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:10:28,147 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:10:28,187 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:10:28,189 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:10:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:10:28,199 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:10:28,242 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:10:28,243 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:10:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:10:28,441 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:10:28,474 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:10:28,475 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:10:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:10:28,723 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:10:28,762 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:10:28,764 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:10:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:10:28,821 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:10:28,860 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:10:28,862 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:10:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:11:28,064 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:11:28,112 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:11:28,113 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:11:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:11:28,125 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:11:28,174 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:11:28,175 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:11:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:11:28,186 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:11:28,229 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:11:28,230 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:11:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:11:30,177 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:11:30,211 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:11:30,212 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:11:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:11:30,540 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:11:30,577 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:11:30,578 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:11:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:11:30,783 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:11:30,816 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:11:30,818 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:11:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:11:30,890 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:11:30,946 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:11:30,947 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:11:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:12:28,059 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:12:28,059 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:12:28,116 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:12:28,117 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:12:28,144 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:12:28,145 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:12:28,156 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:12:28,194 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:12:28,195 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:12:28,439 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:12:28,482 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:12:28,483 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:12:28,688 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:12:28,729 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:12:28,730 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:12:28,794 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:12:28,835 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:12:28,837 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:12:54,620 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 15:12:54,621 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:12:54,656 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:12:54,743 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 15:12:54
2025-08-04 15:13:28,043 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:13:28,071 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:13:28,130 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:13:28,131 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:13:28,156 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:13:28,158 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:13:28,453 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:13:28,497 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:13:28,498 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:13:28,712 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:13:28,746 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:13:28,747 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:13:28,828 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:13:28,867 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:13:28,868 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:14:28,053 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:14:28,055 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:14:28,117 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:14:28,118 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:14:28,133 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:14:28,134 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:14:28,429 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:14:28,471 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:14:28,472 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:14:28,691 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:14:28,722 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:14:28,723 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:14:28,798 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:14:28,831 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:14:28,832 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:15:28,048 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:15:28,050 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:15:28,117 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:15:28,118 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:15:28,122 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:15:28,123 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:15:28,441 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:15:28,485 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:15:28,486 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:15:28,699 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:15:28,734 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:15:28,736 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:15:28,798 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:15:28,854 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:15:28,855 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:15:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:16:28,045 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:16:28,047 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:16:28,141 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:16:28,142 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:16:28,149 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:16:28,150 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:16:28,456 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:16:28,498 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:16:28,499 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:16:28,718 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:16:28,759 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:16:28,760 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:16:28,819 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:16:28,856 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:16:28,858 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:16:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:17:28,064 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:17:28,106 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:17:28,107 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:17:28,423 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:17:28,463 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:17:28,464 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:17:28,691 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:17:28,740 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:17:28,741 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:17:28,789 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:17:28,829 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:17:28,830 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:17:54,741 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 15:17:54,741 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:17:54,781 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:17:54,871 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 15:17:54
2025-08-04 15:18:28,050 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:18:28,090 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:18:28,091 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:18:28,402 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:18:28,443 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:18:28,443 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:18:28,660 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:18:28,691 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:18:28,692 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:18:28,756 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:18:28,798 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:18:28,799 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:19:28,051 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:19:28,095 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:19:28,096 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:19:28,407 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:19:28,438 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:19:28,439 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:19:28,670 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:19:28,708 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:19:28,709 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:19:28,754 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:19:28,794 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:19:28,795 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:20:28,041 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:20:28,084 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:20:28,086 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:20:28,403 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:20:28,440 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:20:28,441 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:20:28,661 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:20:28,695 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:20:28,696 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:20:28,763 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:20:28,793 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:20:28,794 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:21:28,133 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:21:28,236 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:21:28,247 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:21:28,601 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:21:28,669 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:21:28,672 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:21:28,862 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:21:28,929 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:21:28,933 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:21:29,021 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:21:29,105 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:21:29,106 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:21:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:22:28,050 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:22:28,099 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:22:28,100 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:22:28,414 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:22:28,445 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:22:28,446 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:22:28,674 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:22:28,711 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:22:28,712 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:22:28,760 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:22:28,807 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:22:28,808 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:22:54,868 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 15:22:54,869 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:22:54,901 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:22:55,024 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 15:22:55
2025-08-04 15:23:28,045 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:23:28,089 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:23:28,090 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:23:28,415 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:23:28,453 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:23:28,455 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:23:28,667 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:23:28,699 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:23:28,700 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:23:28,768 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:23:28,804 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:23:28,805 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:24:28,036 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:24:28,083 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:24:28,084 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:24:28,403 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:24:28,435 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:24:28,436 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:24:28,660 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:24:28,712 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:24:28,714 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:24:28,796 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:24:28,835 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:24:28,836 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:25:28,069 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:25:28,118 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:25:28,119 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:25:28,443 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:25:28,485 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:25:28,487 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:25:28,692 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:25:28,725 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:25:28,726 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:25:28,807 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:25:28,839 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:25:28,840 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:26:28,048 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:26:28,085 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:26:28,086 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:26:28,411 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:26:28,451 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:26:28,452 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:26:28,675 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:26:28,712 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:26:28,713 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:26:28,771 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:26:28,812 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:26:28,813 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:27:28,038 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:27:28,074 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:27:28,075 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:27:28,399 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:27:28,436 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:27:28,437 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:27:28,664 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:27:28,703 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:27:28,704 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:27:28,762 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:27:28,830 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:27:28,831 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:27:55,022 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 15:27:55,022 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:27:55,093 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:27:55,168 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 15:27:55
2025-08-04 15:28:28,355 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:28:28,411 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:28:28,412 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:28:28,605 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:28:28,647 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:28:28,648 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:28:28,729 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:28:28,761 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:28:28,762 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:28:28,963 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:28:28,998 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:28:28,999 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:29:28,034 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:29:28,075 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:29:28,076 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:29:28,395 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:29:28,432 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:29:28,433 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:29:28,666 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:29:28,702 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:29:28,704 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:29:28,751 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:29:28,797 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:29:28,799 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:30:28,042 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:30:28,105 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:30:28,106 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:30:28,419 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:30:28,463 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:30:28,465 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:30:28,686 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:30:28,723 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:30:28,724 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:30:28,786 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:30:28,825 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:30:28,826 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:31:28,040 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:31:28,085 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:31:28,086 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:31:28,408 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:31:28,440 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:31:28,441 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:31:28,662 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:31:28,697 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:31:28,698 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:31:28,756 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:31:28,792 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:31:28,793 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:32:28,040 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:32:28,084 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:32:28,085 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:32:28,414 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:32:28,455 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:32:28,456 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:32:28,657 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:32:28,690 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:32:28,691 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:32:28,765 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:32:28,797 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:32:28,798 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:32:55,166 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 15:32:55,166 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:32:55,198 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:32:55,273 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 15:32:55
2025-08-04 15:33:28,043 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:33:28,091 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:33:28,092 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:33:28,448 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:33:28,490 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:33:28,490 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:33:28,677 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:33:28,720 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:33:28,721 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:33:28,808 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:33:28,851 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:33:28,852 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:34:28,049 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:34:28,093 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:34:28,094 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:34:28,412 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:34:28,456 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:34:28,457 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:34:28,680 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:34:28,730 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:34:28,732 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:34:28,774 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:34:28,822 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:34:28,824 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:35:28,030 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:35:28,070 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:35:28,071 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:35:28,391 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:35:28,434 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:35:28,435 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:35:28,648 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:35:28,693 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:35:28,694 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:35:28,749 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:35:28,800 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:35:28,801 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:36:28,052 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:36:28,158 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:36:28,160 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:36:28,473 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:36:28,548 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:36:28,549 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:36:29,149 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:36:29,200 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:36:29,201 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:36:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:36:29,209 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:36:29,255 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:36:29,256 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:36:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:37:28,341 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:37:28,389 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:37:28,390 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:37:28,605 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:37:28,643 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:37:28,644 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:37:28,702 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:37:28,742 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:37:28,743 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:37:28,953 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:37:28,990 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:37:28,991 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:37:55,271 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 15:37:55,272 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:37:55,311 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:37:55,453 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 15:37:55
2025-08-04 15:38:28,029 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:38:28,071 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:38:28,072 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:38:28,396 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:38:28,440 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:38:28,441 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:38:28,653 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:38:28,695 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:38:28,696 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:38:28,753 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:38:28,801 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:38:28,802 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:39:28,025 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:39:28,071 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:39:28,072 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:39:28,395 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:39:28,439 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:39:28,440 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:39:28,635 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:39:28,666 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:39:28,667 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:39:28,756 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:39:28,799 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:39:28,800 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:40:28,033 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:40:28,079 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:40:28,080 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:40:28,400 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:40:28,440 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:40:28,441 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:40:28,660 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:40:28,703 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:40:28,704 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:40:28,760 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:40:28,796 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:40:28,797 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:41:28,030 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:41:28,076 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:41:28,077 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:41:28,400 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:41:28,445 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:41:28,446 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:41:28,647 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:41:28,683 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:41:28,685 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:41:28,762 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:41:28,809 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:41:28,810 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:42:28,028 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:42:28,077 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:42:28,078 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:42:28,395 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:42:28,439 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:42:28,441 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:42:28,649 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:42:28,683 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:42:28,684 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:42:28,764 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:42:28,794 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:42:28,796 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:42:55,451 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 15:42:55,452 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:42:55,499 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:42:55,650 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 15:42:55
2025-08-04 15:43:28,035 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:43:28,086 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:43:28,087 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:43:28,404 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:43:28,448 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:43:28,449 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:43:28,665 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:43:28,703 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:43:28,704 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:43:28,768 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:43:28,809 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:43:28,810 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:44:28,029 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:44:28,084 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:44:28,085 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:44:28,404 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:44:28,451 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:44:28,453 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:44:28,666 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:44:28,710 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:44:28,711 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:44:28,762 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:44:28,810 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:44:28,811 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:45:28,025 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:45:28,079 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:45:28,081 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:45:28,400 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:45:28,442 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:45:28,443 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:45:28,656 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:45:28,702 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:45:28,703 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:45:28,755 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:45:28,798 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:45:28,799 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:45:58,764 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:45:58,822 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:45:58,823 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:45:58] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:46:01,162 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:46:01,224 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:46:01,225 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:46:01] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:46:04,258 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:46:04] "GET / HTTP/1.1" 200 -
2025-08-04 15:46:04,334 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:46:04] "[36mGET /static/incehesap.jpg HTTP/1.1[0m" 304 -
2025-08-04 15:46:04,503 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:46:04,554 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:46:04,555 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:46:04] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:46:04,676 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:46:04] "GET /api/history HTTP/1.1" 200 -
2025-08-04 15:46:04,885 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:46:04,948 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:46:04,950 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:46:04] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:46:23,086 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:46:23,907 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:46:24,029 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:46:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:46:28,403 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:46:29,206 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:46:29,250 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:46:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:46:29,423 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:46:30,204 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:46:30,215 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:46:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:46:30,630 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:46:31,340 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:46:31,348 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:46:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:46:35,058 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:46:35,729 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:46:35,754 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:46:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:46:53,078 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:46:53,443 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:46:53,450 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:46:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:47:05,385 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:47:06,119 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:47:06,127 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:47:06] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:47:28,077 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:47:28,633 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:47:28,643 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:47:29,016 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:47:29,592 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:47:29,601 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:47:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:47:29,703 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:47:30,239 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:47:30,865 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:47:30,878 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:47:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:47:31,366 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:47:31,374 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:47:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:47:35,398 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:47:35,973 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:47:35,983 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:47:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:47:55,681 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 15:47:55,887 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:47:57,039 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:47:59,326 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 15:47:59
2025-08-04 15:48:05,131 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:48:05,693 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:48:05,708 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:48:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:48:28,110 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:48:28,426 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:48:29,128 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:48:29,142 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:48:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:48:29,341 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:48:29,351 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:48:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:48:29,425 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:48:29,958 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:48:29,967 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:48:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:48:30,371 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:48:30,922 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:48:30,932 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:48:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:48:35,286 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:48:36,805 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:48:37,020 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:48:37] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:49:05,406 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:49:05,936 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:49:05,944 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:49:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:49:28,103 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:49:28,230 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:49:29,745 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:49:29,957 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:49:30,185 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:49:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:49:30,271 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:49:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:49:31,395 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:49:32,517 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:49:32,530 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:49:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:49:32,913 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:49:34,277 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:49:34,359 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:49:34] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:49:34,991 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:49:35,986 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:49:36,024 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:49:36] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:49:36,715 - __main__ - INFO - Received question: √ºr√ºnleri listele
2025-08-04 15:49:36,753 - __main__ - INFO - Generating Cypher for question: √ºr√ºnleri listele
2025-08-04 15:49:37,355 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 100.2s)
2025-08-04 15:49:37,443 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: √ºr√ºnleri listele
2025-08-04 15:49:38,178 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 15:50:04,714 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:50:05,200 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:50:05,212 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:50:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:50:09,199 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 15:50:11,136 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 15:50:11,145 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 15:50:13,434 - __main__ - INFO - Gemini API call successful
2025-08-04 15:50:14,825 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n:Product) RETURN n
2025-08-04 15:50:14,830 - __main__ - INFO - Generated Cypher: MATCH (n:Product) RETURN n
2025-08-04 15:50:15,888 - __main__ - INFO - Query results: 20 rows
2025-08-04 15:50:15,892 - __main__ - INFO - Generating answer for question: √ºr√ºnleri listele
2025-08-04 15:50:29,451 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:50:30,236 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:50:30,667 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:50:30,692 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:50:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:50:31,257 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:50:31,537 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:50:31,557 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:50:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:50:32,146 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:50:32,158 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:50:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:50:32,544 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:50:33,237 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:50:33,252 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:50:33] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:50:34,721 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:50:35,733 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:50:35,780 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:50:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:50:43,666 - __main__ - INFO - Gemini API call successful
2025-08-04 15:50:46,102 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 15:50:46,242 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:50:46] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 15:51:05,383 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:51:05,778 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:51:05,787 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:51:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:51:12,330 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:51:12,990 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:51:13,003 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:51:13] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:51:23,076 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:51:23,712 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:51:23,746 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:51:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:51:28,078 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:51:28,755 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:51:28,775 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:51:29,212 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:51:29,889 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:51:29,907 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:51:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:51:30,003 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:51:30,529 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:51:30,540 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:51:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:51:35,513 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:51:36,035 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:51:36,042 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:51:36] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:51:53,395 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:51:53,877 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:51:53,884 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:51:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:52:28,127 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:52:28,785 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:52:29,598 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:52:29,673 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:52:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:52:30,021 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:52:30,111 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:52:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:52:30,587 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:52:32,417 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:52:32,449 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:52:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:52:32,676 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:52:33,615 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:52:33,670 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:52:33] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:52:34,376 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:52:35,399 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:52:35,607 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:52:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:52:59,358 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 15:52:59,394 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:53:00,216 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:53:03,649 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 15:53:03
2025-08-04 15:53:28,146 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:53:28,495 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:53:29,196 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:53:29,271 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:53:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:53:29,635 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:53:29,662 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:53:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:53:29,769 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:53:30,885 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:53:30,975 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:53:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:53:31,477 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:53:32,461 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:53:32,497 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:53:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:53:32,956 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:53:33,738 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:53:33,811 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:53:33] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:53:53,077 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:53:53,535 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:53:53,544 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:53:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:54:07,406 - __main__ - INFO - Received question: √ºr√ºnlerin √ßƒ±ktƒ±ƒüƒ± tarihe g√∂re sƒ±rala
2025-08-04 15:54:07,490 - __main__ - INFO - Generating Cypher for question: √ºr√ºnlerin √ßƒ±ktƒ±ƒüƒ± tarihe g√∂re sƒ±rala
2025-08-04 15:54:08,112 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 67.9s)
2025-08-04 15:54:08,326 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: √ºr√ºnlerin √ßƒ±ktƒ±ƒüƒ± tarihe g√∂re sƒ±rala
2025-08-04 15:54:09,010 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 15:54:15,607 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 15:54:20,600 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 15:54:20,944 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 15:54:22,555 - __main__ - INFO - Gemini API call successful
2025-08-04 15:54:23,861 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:54:30,143 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:54:31,881 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:54:32,168 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:54:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:54:32,946 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) RETURN p ORDER BY p.addition_date
2025-08-04 15:54:33,098 - __main__ - INFO - Generated Cypher: MATCH (p:Product) RETURN p ORDER BY p.addition_date
2025-08-04 15:54:33,142 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:54:33,406 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:54:33] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:54:33,563 - __main__ - INFO - Query results: 20 rows
2025-08-04 15:54:33,782 - __main__ - INFO - Generating answer for question: √ºr√ºnlerin √ßƒ±ktƒ±ƒüƒ± tarihe g√∂re sƒ±rala
2025-08-04 15:54:34,916 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:54:37,427 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:54:37,511 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:54:37] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:54:38,462 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:54:39,674 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:54:39,803 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:54:39] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:54:40,188 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:54:40,947 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:54:40] "GET / HTTP/1.1" 200 -
2025-08-04 15:54:41,961 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:54:41,980 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:54:41] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:54:42,901 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:54:42] "[36mGET /static/incehesap.jpg HTTP/1.1[0m" 304 -
2025-08-04 15:54:43,222 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:54:43,420 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:54:43] "GET /api/history HTTP/1.1" 200 -
2025-08-04 15:54:44,656 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:54:44,807 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:54:44] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:54:45,741 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:54:46,813 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:54:46,932 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:54:46] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:54:53,016 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:54:54,119 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:54:54,174 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:54:54] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:54:59,366 - __main__ - INFO - Gemini API call successful
2025-08-04 15:55:02,486 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 15:55:02,881 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:55:02] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 15:55:14,032 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:55:15,393 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:55:15,489 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:55:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:55:22,846 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:55:23,607 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:55:23,619 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:55:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:55:28,610 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:55:29,962 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:55:29,974 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:55:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:55:30,150 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:55:31,531 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:55:31,557 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:55:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:55:32,108 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:55:33,310 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:55:33,415 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:55:33] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:55:43,584 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:55:44,610 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:55:44,631 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:55:44] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:55:52,861 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:55:54,006 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:55:54,137 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:55:54] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:56:13,392 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:56:14,046 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:56:14,086 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:56:14] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:56:22,905 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:56:24,360 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:56:24,374 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:56:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:56:28,444 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:56:29,197 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:56:29,209 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:56:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:56:29,312 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:56:30,321 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:56:30,353 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:56:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:56:30,947 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:56:32,250 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:56:32,302 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:56:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:56:43,381 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:56:43,883 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:56:43,897 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:56:43] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:56:53,102 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:56:53,714 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:56:53,723 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:56:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:57:13,387 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:57:13,850 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:57:13,861 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:57:13] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:57:22,839 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:57:23,880 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:57:23,952 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:57:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:57:28,438 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:57:29,158 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:57:29,173 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:57:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:57:29,322 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:57:30,298 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:57:30,314 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:57:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:57:30,932 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:57:31,767 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:57:31,785 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:57:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:57:43,407 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:57:44,346 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:57:44,357 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:57:44] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:57:52,817 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:57:53,329 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:57:53,338 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:57:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:58:03,742 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 15:58:03,782 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:58:04,531 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:58:07,935 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 15:58:07
2025-08-04 15:58:13,748 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:58:14,755 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:58:14,835 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:58:14] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:58:23,364 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:58:24,852 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:58:24,870 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:58:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:58:28,537 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:58:29,550 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:58:29,565 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:58:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:58:29,738 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:58:30,698 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:58:30,712 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:58:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:58:31,339 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:58:32,225 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:58:32,326 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:58:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:58:53,077 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:58:53,472 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:58:53,479 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:58:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:59:14,392 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:59:14,784 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:59:14,794 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:59:14] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:59:28,083 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:59:28,441 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:59:28,839 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:59:28,851 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:59:29,123 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:59:29,132 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:59:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:59:29,194 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:59:29,734 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:59:29,752 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:59:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 15:59:30,193 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 15:59:30,689 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 15:59:30,698 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 15:59:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:00:15,401 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:00:15,986 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:00:16,000 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:00:16] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:00:19,842 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:00:20,842 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:00:20,854 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:00:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:00:22,827 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:00:23,670 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:00:23,684 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:00:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:00:29,141 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:00:30,847 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:00:31,089 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:00:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:00:31,499 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:00:32,698 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:00:32,727 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:00:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:00:33,389 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:00:34,391 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:00:34,413 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:00:34] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:00:52,820 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:00:53,373 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:00:53,386 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:00:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:01:16,421 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:01:17,118 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:01:17,128 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:01:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:01:22,843 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:01:23,524 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:01:23,535 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:01:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:01:28,508 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:01:29,766 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:01:29,794 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:01:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:01:30,057 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:01:30,980 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:01:31,009 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:01:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:01:31,688 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:01:32,778 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:01:32,848 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:01:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:01:52,822 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:01:53,362 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:01:53,369 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:01:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:02:17,398 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:02:17,867 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:02:17,876 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:02:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:02:22,818 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:02:23,327 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:02:23,346 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:02:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:02:28,437 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:02:29,246 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:02:29,262 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:02:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:02:29,418 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:02:30,138 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:02:30,153 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:02:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:02:30,564 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:02:31,299 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:02:31,324 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:02:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:02:52,812 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:02:53,349 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:02:53,359 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:02:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:03:08,026 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 16:03:08,032 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:03:08,540 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:03:11,080 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 16:03:11
2025-08-04 16:03:18,451 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:03:19,143 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:03:19,170 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:03:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:03:22,835 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:03:23,599 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:03:23,610 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:03:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:03:28,402 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:03:29,139 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:03:29,152 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:03:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:03:29,273 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:03:30,115 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:03:30,129 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:03:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:03:30,565 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:03:31,354 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:03:31,368 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:03:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:03:52,829 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:03:53,412 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:03:53,425 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:03:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:04:19,383 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:04:19,945 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:04:19,960 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:04:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:04:23,066 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:04:23,439 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:04:23,447 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:04:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:04:28,396 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:04:28,964 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:04:28,976 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:04:29,034 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:04:29,554 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:04:29,566 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:04:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:04:29,957 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:04:30,428 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:04:30,438 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:04:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:04:53,067 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:04:53,453 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:04:53,461 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:04:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:05:20,386 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:05:20,840 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:05:20,851 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:05:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:05:28,078 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:05:28,471 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:05:28,820 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:05:28,840 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:05:29,227 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:05:29,238 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:05:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:05:29,331 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:05:29,938 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:05:29,964 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:05:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:05:30,435 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:05:31,089 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:05:31,107 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:05:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:06:21,373 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:06:21,766 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:06:21,773 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:06:21] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:06:28,260 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:06:28,472 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:06:29,318 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:06:29,393 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:06:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:06:29,841 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:06:29,865 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:06:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:06:30,038 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:06:31,025 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:06:31,059 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:06:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:06:31,564 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:06:32,160 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:06:32,180 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:06:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:07:22,390 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:07:22,854 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:07:22,864 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:07:22] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:07:28,124 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:07:28,424 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:07:29,046 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:07:29,064 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:07:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:07:29,277 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:07:29,295 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:07:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:07:29,428 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:07:30,035 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:07:30,046 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:07:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:07:30,440 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:07:31,031 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:07:31,052 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:07:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:08:11,138 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 16:08:11,143 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:08:11,597 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:08:13,893 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 16:08:13
2025-08-04 16:08:23,375 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:08:23,783 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:08:23,790 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:08:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:08:28,103 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:08:28,419 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:08:29,096 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:08:29,110 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:08:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:08:29,325 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:08:29,345 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:08:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:08:29,421 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:08:30,042 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:08:30,051 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:08:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:08:30,427 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:08:30,990 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:08:31,019 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:08:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:09:24,387 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:09:24,921 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:09:24,932 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:09:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:09:28,373 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:09:28,743 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:09:29,409 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:09:29,469 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:09:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:09:29,895 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:09:29,925 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:09:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:09:30,047 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:09:30,679 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:09:30,703 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:09:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:09:31,425 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:09:32,099 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:09:32,114 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:09:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:10:26,491 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:10:27,084 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:10:27,096 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:10:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:10:28,236 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:10:28,987 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:10:29,012 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:10:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:10:29,702 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:10:30,425 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:10:30,439 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:10:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:10:30,607 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:10:31,370 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:10:31,406 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:10:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:10:33,062 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:10:34,003 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:10:34,039 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:10:34] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:11:26,404 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:11:26,950 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:11:26,959 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:11:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:11:28,081 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:11:28,225 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:11:29,354 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:11:29,390 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:11:29,418 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:11:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:11:29,558 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:11:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:11:30,231 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:11:30,990 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:11:31,026 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:11:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:11:31,316 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:11:31,909 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:11:31,942 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:11:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:12:27,381 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:12:27,831 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:12:27,844 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:12:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:12:28,079 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:12:28,616 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:12:28,625 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:12:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:12:29,004 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:12:29,573 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:12:29,583 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:12:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:12:29,648 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:12:30,223 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:12:30,238 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:12:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:12:30,273 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:12:30,851 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:12:30,865 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:12:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:13:13,977 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 16:13:13,983 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:13:14,534 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:13:16,411 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 16:13:16
2025-08-04 16:13:28,083 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:13:28,397 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:13:28,763 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:13:28,773 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:13:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:13:29,102 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:13:29,113 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:13:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:13:29,172 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:13:29,716 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:13:29,726 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:13:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:13:30,127 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:13:30,672 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:13:30,682 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:13:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:13:30,769 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:13:31,296 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:13:31,305 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:13:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:14:28,112 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:14:28,436 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:14:28,892 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:14:28,899 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:14:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:14:29,206 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:14:29,216 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:14:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:14:29,304 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:14:29,908 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:14:29,917 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:14:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:14:30,288 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:14:30,859 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:14:30,868 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:14:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:14:30,932 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:14:31,453 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:14:31,461 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:14:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:15:28,092 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:15:28,393 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:15:32,810 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:15:32,822 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:15:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:15:33,039 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:15:33,048 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:15:33] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:15:33,114 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:15:33,552 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:15:33,561 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:15:33] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:15:33,956 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:15:34,639 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:15:34,656 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:15:34] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:15:34,783 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:15:35,223 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:15:35,232 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:15:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:16:28,085 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:16:29,115 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:16:29,179 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:16:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:16:29,496 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:16:30,616 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:16:30,629 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:16:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:16:30,838 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:16:31,561 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:16:31,570 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:16:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:16:32,100 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:16:32,762 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:16:32,781 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:16:32] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:16:32,926 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:16:33,676 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:16:33,697 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:16:33] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:17:28,078 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:17:28,407 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:17:28,807 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:17:28,819 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:17:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:17:29,136 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:17:29,146 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:17:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:17:29,211 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:17:29,797 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:17:29,808 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:17:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:17:30,178 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:17:30,652 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:17:30,660 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:17:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:17:30,722 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:17:31,227 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:17:31,236 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:17:31] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:18:16,456 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 16:18:16,462 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:18:16,666 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:18:16,788 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 16:18:16
2025-08-04 16:18:28,010 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:18:28,043 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:18:28,044 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:18:28,315 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:18:28,357 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:18:28,358 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:18:28,610 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:18:28,644 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:18:28,646 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:18:28,682 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:18:28,715 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:18:28,716 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:18:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:18:28,968 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:18:28,999 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:18:29,000 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:18:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:19:28,005 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:19:28,062 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:19:28,063 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:19:28,315 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:19:28,354 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:19:28,355 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:19:28,615 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:19:28,653 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:19:28,655 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:19:28,670 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:19:28,712 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:19:28,713 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:19:28,964 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:19:29,008 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:19:29,009 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:19:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:20:28,007 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:20:28,052 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:20:28,053 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:20:28,308 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:20:28,348 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:20:28,349 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:20:28,568 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:20:28,612 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:20:28,612 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:20:28,659 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:20:28,697 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:20:28,698 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:20:28,923 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:20:28,960 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:20:28,960 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:21:28,014 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:21:28,070 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:21:28,072 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:21:28,318 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:21:28,368 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:21:28,369 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:21:28,586 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:21:28,627 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:21:28,628 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:21:28,683 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:21:28,727 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:21:28,728 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:21:28,953 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:21:28,989 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:21:28,990 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:22:28,012 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:22:28,063 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:22:28,064 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:22:28,318 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:22:28,360 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:22:28,361 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:22:28,583 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:22:28,617 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:22:28,618 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:22:28,673 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:22:28,708 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:22:28,709 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:22:28,933 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:22:28,970 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:22:28,972 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:23:16,786 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 16:23:16,786 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:23:16,824 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:23:16,906 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 16:23:16
2025-08-04 16:23:28,007 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:23:28,047 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:23:28,048 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:23:28,314 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:23:28,360 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:23:28,362 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:23:28,581 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:23:28,619 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:23:28,621 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:23:28,685 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:23:28,723 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:23:28,725 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:23:28,937 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:23:28,969 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:23:28,970 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:24:28,013 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:24:28,061 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:24:28,063 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:24:28,321 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:24:28,367 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:24:28,368 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:24:28,591 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:24:28,634 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:24:28,635 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:24:28,682 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:24:28,716 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:24:28,717 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:24:28,959 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:24:28,989 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:24:28,990 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:25:28,013 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:25:28,059 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:25:28,060 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:25:28,316 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:25:28,362 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:25:28,364 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:25:28,575 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:25:28,610 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:25:28,611 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:25:28,674 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:25:28,723 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:25:28,724 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:25:28,930 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:25:28,964 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:25:28,966 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:26:28,005 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:26:28,054 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:26:28,056 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:26:28,314 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:26:28,353 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:26:28,354 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:26:28,579 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:26:28,620 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:26:28,621 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:26:28,669 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:26:28,704 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:26:28,705 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:26:28,938 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:26:28,973 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:26:28,974 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:26:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:27:28,010 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:27:28,046 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:27:28,057 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:27:28,059 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:27:28,101 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:27:28,102 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:27:28,384 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:27:28,421 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:27:28,423 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:27:28,630 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:27:28,676 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:27:28,677 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:27:28,744 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:27:28,788 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:27:28,790 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:27:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:28:16,904 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 16:28:16,905 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:28:16,936 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:28:17,051 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 16:28:17
2025-08-04 16:28:28,005 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:28:28,006 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:28:28,089 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:28:28,090 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:28:28,096 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:28:28,097 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:28:28,412 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:28:28,456 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:28:28,457 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:28:28,669 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:28:28,701 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:28:28,702 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:28:28,780 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:28:28,815 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:28:28,816 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:28:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:29:28,001 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:29:28,025 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:29:28,070 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:29:28,071 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:29:28,097 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:29:28,098 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:29:28,421 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:29:28,461 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:29:28,462 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:29:28,661 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:29:28,703 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:29:28,704 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:29:28,788 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:29:28,825 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:29:28,826 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:29:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:30:28,002 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:30:28,004 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:30:28,088 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:30:28,089 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:30:28,091 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:30:28,092 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:30:28,406 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:30:28,445 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:30:28,447 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:30:28,663 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:30:28,705 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:30:28,706 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:30:28,768 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:30:28,808 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:30:28,809 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:30:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:31:28,012 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:31:28,012 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:31:28,120 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:31:28,121 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:31:28,123 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:31:28,124 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:31:28,431 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:31:28,477 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:31:28,478 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:31:28,689 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:31:28,737 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:31:28,738 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:31:28,801 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:31:28,839 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:31:28,840 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:31:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:32:28,011 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:32:28,013 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:32:28,120 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:32:28,121 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:32:28,125 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:32:28,128 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:32:28,440 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:32:28,490 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:32:28,491 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:32:28,701 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:32:28,730 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:32:28,731 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:32:28,808 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:32:28,844 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:32:28,845 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:32:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:33:17,049 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 16:33:17,050 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:33:17,081 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:33:17,169 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 16:33:17
2025-08-04 16:33:28,007 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:33:28,009 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:33:28,092 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:33:28,094 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:33:28,097 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:33:28,100 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:33:28,407 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:33:28,440 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:33:28,441 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:33:28,662 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:33:28,697 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:33:28,698 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:33:28,756 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:33:28,794 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:33:28,795 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:33:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:34:28,007 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:34:28,042 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:34:28,043 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:34:28,362 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:34:28,401 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:34:28,402 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:34:28,611 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:34:28,657 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:34:28,658 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:34:28,725 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:34:28,770 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:34:28,771 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:34:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:35:28,008 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:35:28,090 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:35:28,092 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:35:28,418 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:35:28,455 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:35:28,456 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:35:28,657 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:35:28,699 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:35:28,700 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:35:28,779 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:35:28,812 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:35:28,813 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:35:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:36:27,996 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:36:28,045 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:36:28,046 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:36:28,365 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:36:28,396 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:36:28,396 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:36:28,621 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:36:28,654 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:36:28,655 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:36:28,715 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:36:28,754 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:36:28,755 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:36:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:37:27,999 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:37:28,041 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:37:28,042 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:37:28,361 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:37:28,409 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:37:28,410 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:37:28,626 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:37:28,673 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:37:28,674 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:37:28,732 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:37:28,773 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:37:28,775 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:37:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:38:17,167 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 16:38:17,168 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:38:17,201 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:38:17,289 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 16:38:17
2025-08-04 16:38:28,006 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:38:28,056 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:38:28,058 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:38:28,374 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:38:28,415 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:38:28,416 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:38:28,637 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:38:28,675 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:38:28,676 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:38:28,731 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:38:28,765 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:38:28,767 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:38:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:39:27,997 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:39:28,034 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:39:28,035 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:39:28,350 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:39:28,381 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:39:28,382 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:39:28,617 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:39:28,659 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:39:28,660 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:39:28,698 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:39:28,742 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:39:28,743 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:39:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:40:27,993 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:40:28,039 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:40:28,040 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:40:28,353 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:40:28,396 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:40:28,397 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:40:28,617 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:40:28,658 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:40:28,659 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:40:28,715 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:40:28,756 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:40:28,757 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:41:28,011 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:41:28,056 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:41:28,057 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:41:28,374 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:41:28,415 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:41:28,417 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:41:28,636 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:41:28,667 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:41:28,669 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:41:28,733 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:41:28,764 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:41:28,765 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:42:28,007 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:42:28,042 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:42:28,044 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:42:28,364 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:42:28,400 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:42:28,401 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:42:28,629 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:42:28,667 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:42:28,668 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:42:28,719 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:42:28,767 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:42:28,769 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:42:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:43:17,288 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 16:43:17,289 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:43:17,324 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:43:17,435 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 16:43:17
2025-08-04 16:43:28,000 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:43:28,045 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:43:28,046 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:43:28,360 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:43:28,402 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:43:28,403 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:43:28,620 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:43:28,660 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:43:28,661 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:43:28,716 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:43:28,757 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:43:28,758 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:43:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:44:28,002 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:44:28,043 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:44:28,044 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:44:28,363 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:44:28,410 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:44:28,411 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:44:28,624 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:44:28,656 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:44:28,657 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:44:28,729 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:44:28,769 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:44:28,771 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:44:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:45:28,001 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:45:28,039 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:45:28,039 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:45:28,355 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:45:28,388 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:45:28,389 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:45:28,624 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:45:28,665 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:45:28,666 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:45:28,714 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:45:28,759 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:45:28,760 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:45:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:46:27,990 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:46:28,034 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:46:28,036 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:46:28,354 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:46:28,386 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:46:28,387 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:46:28,621 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:46:28,663 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:46:28,664 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:46:28,702 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:46:28,744 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:46:28,745 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:46:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:47:27,994 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:47:28,035 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:47:28,036 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:47:28,358 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:47:28,416 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:47:28,417 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:47:28,613 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:47:28,651 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:47:28,652 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:47:28,736 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:47:28,770 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:47:28,771 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:47:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:48:17,433 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 16:48:17,434 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:48:17,464 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:48:17,579 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 16:48:17
2025-08-04 16:48:27,989 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:48:28,036 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:48:28,037 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:48:28,362 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:48:28,407 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:48:28,408 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:48:28,611 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:48:28,650 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:48:28,651 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:48:28,717 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:48:28,753 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:48:28,754 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:48:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:49:27,998 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:49:28,034 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:49:28,036 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:49:28,358 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:49:28,388 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:49:28,389 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:49:28,612 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:49:28,646 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:49:28,647 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:49:28,702 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:49:28,743 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:49:28,744 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:49:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:50:27,995 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:50:28,034 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:50:28,035 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:50:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:50:28,345 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:50:28,388 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:50:28,389 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:50:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:50:28,613 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:50:28,654 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:50:28,655 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:50:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:50:28,703 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:50:28,742 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:50:28,743 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:50:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:51:27,996 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:51:28,044 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:51:28,045 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:51:28,364 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:51:28,400 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:51:28,401 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:51:28,613 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:51:28,654 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:51:28,656 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:51:28,710 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:51:28,755 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:51:28,756 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:51:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:52:28,002 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:52:28,055 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:52:28,056 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:52:28,388 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:52:28,422 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:52:28,424 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:52:28,620 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:52:28,659 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:52:28,660 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:52:28,741 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:52:28,781 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:52:28,782 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:52:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:53:17,578 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 16:53:17,578 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:53:17,619 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:53:17,709 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 16:53:17
2025-08-04 16:53:27,997 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:53:28,037 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:53:28,038 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:53:28,349 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:53:28,386 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:53:28,388 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:53:28,618 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:53:28,652 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:53:28,654 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:53:28,702 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:53:28,771 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:53:28,772 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:53:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:54:28,000 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:54:28,053 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:54:28,055 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:54:28,379 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:54:28,410 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:54:28,411 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:54:28,624 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:54:28,676 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:54:28,677 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:54:28,726 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:54:28,768 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:54:28,770 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:54:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:55:27,999 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:55:28,049 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:55:28,050 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:55:28,370 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:55:28,402 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:55:28,403 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:55:28,630 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:55:28,676 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:55:28,678 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:55:28,712 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:55:28,753 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:55:28,754 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:55:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:56:27,990 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:56:28,037 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:56:28,038 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:56:28,353 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:56:28,398 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:56:28,399 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:56:28,615 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:56:28,650 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:56:28,651 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:56:28,721 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:56:28,761 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:56:28,762 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:56:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:57:27,991 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:57:28,025 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:57:28,026 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:57:28,339 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:57:28,379 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:57:28,380 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:57:28,592 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:57:28,633 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:57:28,634 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:57:28,698 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:57:28,739 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:57:28,740 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:57:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:58:17,708 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 16:58:17,708 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:58:17,747 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:58:17,828 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 16:58:17
2025-08-04 16:58:27,997 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:58:28,045 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:58:28,047 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:58:28,367 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:58:28,411 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:58:28,412 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:58:28,623 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:58:28,661 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:58:28,662 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:58:28,729 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:58:28,767 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:58:28,768 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:58:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:59:27,986 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:59:28,036 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:59:28,037 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:59:28,364 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:59:28,412 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:59:28,413 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:59:28,610 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:59:28,661 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:59:28,662 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 16:59:28,732 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 16:59:28,776 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 16:59:28,777 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 16:59:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:00:27,991 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:00:28,034 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:00:28,035 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:00:28,358 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:00:28,391 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:00:28,393 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:00:28,600 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:00:28,640 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:00:28,641 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:00:28,705 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:00:28,755 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:00:28,756 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:00:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:01:27,992 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:01:28,032 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:01:28,033 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:01:28,358 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:01:28,389 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:01:28,390 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:01:28,606 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:01:28,655 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:01:28,656 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:01:28,707 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:01:28,752 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:01:28,753 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:01:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:02:27,995 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:02:28,043 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:02:28,044 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:02:28,358 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:02:28,403 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:02:28,404 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:02:28,632 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:02:28,672 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:02:28,673 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:02:28,722 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:02:28,755 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:02:28,756 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:02:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:03:09,713 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:03:09,798 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:03:09,800 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:03:09] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:03:12,099 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:03:12,195 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:03:12,196 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:03:12] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:03:14,050 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:03:14,121 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:03:14,122 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:03:14] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:03:17,827 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 17:03:17,828 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:03:17,858 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:03:17,954 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 17:03:17
2025-08-04 17:03:22,985 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:03:23,022 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:03:23,023 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:03:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:03:28,290 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:03:28,356 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:03:28,357 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:03:28,553 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:03:28,611 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:03:28,613 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:03:28,669 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:03:28,706 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:03:28,707 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:03:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:03:28,937 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:03:29,001 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:03:29,002 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:03:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:03:34,968 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:03:35,006 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:03:35,007 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:03:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:03:45,021 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:03:45,055 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:03:45,056 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:03:45] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:03:52,998 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:03:53,043 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:03:53,045 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:03:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:04:02,926 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:04:02,964 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:04:02,965 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:04:02] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:04:05,015 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:04:05,059 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:04:05,061 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:04:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:04:14,990 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:04:15,023 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:04:15,024 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:04:15] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:04:16,674 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:04:16,723 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:04:16,724 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:04:16] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:04:28,307 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:04:28,375 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:04:28,376 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:04:28,572 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:04:28,628 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:04:28,629 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:04:28,691 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:04:28,745 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:04:28,746 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:04:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:04:32,079 - __main__ - INFO - Received question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-04 17:04:32,080 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-04 17:04:32,119 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 74.3s)
2025-08-04 17:04:32,122 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-04 17:04:32,158 - graphrag_pipeline - INFO - Extracted entities: ['Veritabanƒ±ndaki']
2025-08-04 17:04:32,789 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 17:04:32,802 - context_manager - ERROR - Dynamic entity context extraction failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Aggregation column contains implicit grouping expressions. For example, in 'RETURN n.a, n.a + n.b + count(*)' the aggregation expression 'n.a + n.b + count(*)' includes the implicit grouping key 'n.b'. It may be possible to rewrite the query by extracting these grouping/aggregation expressions into a preceding WITH clause. Illegal expression(s): context_nodes, similar_entities (line 84, column 34 (offset: 3710))
"                    total + size(context_nodes) + size(similar_entities)"
                                  ^}
2025-08-04 17:04:32,943 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 17:04:32,944 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 17:04:34,188 - __main__ - INFO - Gemini API call successful
2025-08-04 17:04:34,308 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (n) RETURN DISTINCT labels(n) AS nodeTypes
2025-08-04 17:04:34,308 - __main__ - INFO - Generated Cypher: MATCH (n) RETURN DISTINCT labels(n) AS nodeTypes
2025-08-04 17:04:34,653 - __main__ - INFO - Query results: 3 rows
2025-08-04 17:04:34,653 - __main__ - INFO - Generating answer for question: Veritabanƒ±ndaki t√ºm node t√ºrleri nelerdir?
2025-08-04 17:04:34,989 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:04:35,020 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:04:35,021 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:04:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:04:38,482 - __main__ - INFO - Gemini API call successful
2025-08-04 17:04:38,628 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 17:04:38,640 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:04:38] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 17:04:47,279 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:04:47,348 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:04:47,350 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:04:47] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:04:49,351 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:04:49,387 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:04:49,388 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:04:49] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:04:52,997 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:04:53,075 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:04:53,080 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:04:53] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:05:04,963 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:05:04,994 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:05:04,995 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:05:04] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:05:15,984 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:05:16,026 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:05:16,027 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:05:16] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:05:17,294 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:05:17,338 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:05:17,339 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:05:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:05:22,984 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:05:23,033 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:05:23,035 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:05:23] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:05:28,294 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:05:28,363 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:05:28,365 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:05:28,545 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:05:28,611 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:05:28,613 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:05:28,685 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:05:28,732 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:05:28,733 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:05:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:05:34,996 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:05:35,044 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:05:35,045 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:05:35] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:06:04,997 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:06:05,049 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:06:05,050 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:06:05] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:06:16,995 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:06:17,045 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:06:17,046 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:06:17] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:06:18,292 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:06:18,328 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:06:18,329 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:06:18] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:06:23,995 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:06:24,026 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:06:24,026 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:06:24] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:06:28,303 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:06:28,362 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:06:28,364 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:06:28,561 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:06:28,626 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:06:28,627 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:06:28,677 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:06:28,732 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:06:28,733 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:06:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:07:05,989 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:07:06,026 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:07:06,027 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:07:06] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:07:17,981 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:07:18,015 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:07:18,016 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:07:18] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:07:19,296 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:07:19,336 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:07:19,337 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:07:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:07:24,981 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:07:25,016 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:07:25,017 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:07:25] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:07:28,299 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:07:28,355 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:07:28,358 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:07:28,546 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:07:28,591 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:07:28,592 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:07:28,678 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:07:28,720 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:07:28,721 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:07:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:08:06,986 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:08:07,012 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:08:07,012 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:08:07] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:08:17,953 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 17:08:17,953 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:08:17,985 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:08:18,071 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 17:08:18
2025-08-04 17:08:18,992 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:08:19,032 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:08:19,033 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:08:19] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:08:20,299 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:08:20,330 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:08:20,331 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:08:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:08:25,983 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:08:26,012 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:08:26,012 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:08:26] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:08:28,290 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:08:28,320 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:08:28,320 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:08:28,556 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:08:28,595 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:08:28,596 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:08:28,631 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:08:28,665 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:08:28,666 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:08:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:09:07,991 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:09:08,021 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:09:08,022 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:09:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:09:19,987 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:09:20,018 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:09:20,019 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:09:20] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:09:21,290 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:09:21,319 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:09:21,320 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:09:21] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:09:26,985 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:09:27,023 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:09:27,024 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:09:27] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:09:28,291 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:09:28,343 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:09:28,345 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:09:28,550 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:09:28,597 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:09:28,598 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:09:28,669 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:09:28,714 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:09:28,715 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:09:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:10:08,987 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:10:09,014 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:10:09,015 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:10:09] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:10:35,627 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 17:10:35,627 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 17:10:35,628 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 17:10:37,703 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 17:10:37,704 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 17:10:37,736 - embeddings - INFO - Semantic vector index created
2025-08-04 17:10:37,740 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 17:10:37,745 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 17:10:37,745 - __main__ - INFO - Neo4j available: True
2025-08-04 17:10:37,746 - __main__ - INFO - Gemini API available: True
2025-08-04 17:10:37,746 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 17:10:37,748 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 17:10:37,891 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 17:10:37,891 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 17:10:39,446 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:10:39] "GET / HTTP/1.1" 200 -
2025-08-04 17:10:39,535 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:10:39] "[36mGET /static/incehesap.jpg HTTP/1.1[0m" 304 -
2025-08-04 17:10:40,063 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:10:40,082 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:10:40] "GET /api/history HTTP/1.1" 200 -
2025-08-04 17:10:40,210 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:10:40,217 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:10:40] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:10:40,243 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:10:40,347 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:10:40,349 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:10:40] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:10:42,690 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:10:42,766 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:10:42,768 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:10:42] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:19:03,755 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 17:19:03,755 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 17:19:03,756 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 17:19:05,843 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 17:19:05,843 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 17:19:05,863 - embeddings - INFO - Semantic vector index created
2025-08-04 17:19:05,865 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 17:19:05,871 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 17:19:05,871 - __main__ - INFO - Neo4j available: True
2025-08-04 17:19:05,871 - __main__ - INFO - Gemini API available: True
2025-08-04 17:19:05,872 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 17:19:05,873 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 17:19:05,945 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 17:19:05,946 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 17:19:07,804 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:19:07] "GET / HTTP/1.1" 200 -
2025-08-04 17:19:07,923 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:19:07] "GET /static/incehesap.jpg HTTP/1.1" 200 -
2025-08-04 17:19:08,277 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:19:08] "GET /api/history HTTP/1.1" 200 -
2025-08-04 17:19:08,318 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:19:08,416 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:19:08,418 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:19:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:19:08,465 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:19:08,573 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:19:08,574 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:19:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:19:10,853 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 17:19:10,854 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 17:19:10,917 - __main__ - INFO - Using cached Cypher query
2025-08-04 17:19:10,917 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN type(r) AS relationshipType, count(r) AS relationshipCount
2025-08-04 17:19:10,931 - __main__ - INFO - Query results: 2 rows
2025-08-04 17:19:10,931 - __main__ - INFO - Generating answer for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 17:19:10,980 - __main__ - INFO - Using cached answer
2025-08-04 17:19:10,992 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:19:10] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 17:19:19,601 - __main__ - INFO - Received question: 5 tane √ºr√ºn listele
2025-08-04 17:19:19,601 - __main__ - INFO - Generating Cypher for question: 5 tane √ºr√ºn listele
2025-08-04 17:19:19,654 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 19.1s)
2025-08-04 17:19:19,654 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: 5 tane √ºr√ºn listele
2025-08-04 17:19:19,701 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 17:19:20,888 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 17:19:21,028 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 17:19:21,029 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 17:19:21,947 - __main__ - INFO - Gemini API call successful
2025-08-04 17:19:22,078 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product) RETURN p
2025-08-04 17:19:22,079 - __main__ - INFO - Generated Cypher: MATCH (p:Product) RETURN p
2025-08-04 17:19:22,118 - __main__ - INFO - Query results: 20 rows
2025-08-04 17:19:22,118 - __main__ - INFO - Generating answer for question: 5 tane √ºr√ºn listele
2025-08-04 17:19:27,993 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:19:28,082 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:19:28,084 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:19:28,098 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:19:28,187 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:19:28,188 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:19:28,207 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:19:28,269 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:19:28,271 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:19:28,287 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:19:28,350 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:19:28,351 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:19:28,544 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:19:28,605 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:19:28,607 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:19:28,666 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:19:28,712 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:19:28,713 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:19:28,921 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:19:28,971 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:19:28,972 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:19:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:19:37,928 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:19:37,968 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:19:37,971 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:19:37] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:19:40,559 - __main__ - INFO - Gemini API call successful
2025-08-04 17:19:40,681 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 17:19:40,695 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:19:40] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 17:20:07,995 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:20:08,108 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:20:08,110 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:20:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:20:27,981 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:20:28,036 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:20:28,037 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:20:28,050 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:20:28,108 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:20:28,109 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:20:28,118 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:20:28,167 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:20:28,168 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:20:28,283 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:20:28,332 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:20:28,333 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:20:28,549 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:20:28,595 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:20:28,596 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:20:28,646 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:20:28,685 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:20:28,686 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:20:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:20:37,982 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:20:38,029 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:20:38,030 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:20:38] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:21:07,987 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:21:08,075 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:21:08,076 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:21:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:21:27,993 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:21:28,057 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:21:28,058 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:21:28,069 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:21:28,143 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:21:28,144 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:21:28,157 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:21:28,234 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:21:28,235 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:21:28,302 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:21:28,369 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:21:28,371 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:21:28,552 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:21:28,622 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:21:28,623 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:21:28,692 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:21:28,763 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:21:28,765 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:21:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:21:37,979 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:21:38,019 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:21:38,020 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:21:38] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:22:07,982 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:22:08,016 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:22:08,017 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:22:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:22:27,990 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:22:28,057 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:22:28,059 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:22:28,382 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:22:28,423 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:22:28,424 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:22:28,635 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:22:28,682 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:22:28,683 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:22:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:22:30,028 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:22:30,079 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:22:30,080 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:22:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:22:30,089 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:22:30,129 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:22:30,130 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:22:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:22:30,139 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:22:30,185 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:22:30,186 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:22:30] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:22:37,977 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:22:38,009 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:22:38,010 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:22:38] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:23:27,991 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:23:28,041 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:23:28,042 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:23:28,052 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:23:28,092 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:23:28,093 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:23:28,102 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:23:28,160 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:23:28,166 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:23:28,184 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:23:28,229 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:23:28,230 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:23:28,304 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:23:28,345 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:23:28,346 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:23:28,558 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:23:28,605 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:23:28,606 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:23:28,658 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:23:28,701 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:23:28,702 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:23:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:24:05,871 - __main__ - INFO - üîÑ Background schema update ba≈ülƒ±yor...
2025-08-04 17:24:05,872 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:24:05,944 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:24:06,036 - __main__ - INFO - ‚úÖ Background schema update tamamlandƒ± - 17:24:06
2025-08-04 17:24:28,000 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:24:28,005 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:24:28,155 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:24:28,158 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:24:28,173 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:24:28,188 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:24:28,191 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:24:28,255 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:24:28,256 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:24:28,267 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:24:28,349 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:24:28,351 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:24:28,366 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:24:28,420 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:24:28,422 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:24:28,508 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:24:28,562 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:24:28,563 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:24:28,774 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:24:28,812 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:24:28,813 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:24:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:25:27,981 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:25:27,985 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:25:28,089 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:25:28,090 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:25:28,097 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:25:28,098 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:25:28,110 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:25:28,165 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:25:28,166 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:25:28,175 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:25:28,235 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:25:28,236 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:25:28,247 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:25:28,302 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:25:28,303 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:25:28,406 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:25:28,451 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:25:28,452 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:25:28,659 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:25:28,706 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:25:28,707 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:25:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:39:54,496 - __main__ - INFO - Gemini API configured with model: gemini-2.0-flash-exp
2025-08-04 17:39:54,497 - embeddings - INFO - Embedding manager initialized successfully
2025-08-04 17:39:54,497 - __main__ - INFO - GraphRAG embedding manager initialized
2025-08-04 17:39:56,609 - __main__ - INFO - Successfully connected to Neo4j (attempt 1)
2025-08-04 17:39:56,609 - __main__ - INFO - GraphRAG pipeline initialized successfully
2025-08-04 17:39:56,614 - embeddings - INFO - Semantic vector index created
2025-08-04 17:39:56,614 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS FOR (e:Node) ON (e.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 768, `vector.similarity_function`: "cosine"}}` has no effect.} {description: `VECTOR INDEX semantic_nodes FOR (e:Node) ON (e.embedding)` already exists.} {position: None} for query: "\n        CREATE VECTOR INDEX semantic_nodes IF NOT EXISTS\n        FOR (n:Node) ON (n.embedding)\n        OPTIONS {\n            indexConfig: {\n                `vector.dimensions`: 768,\n                `vector.similarity_function`: 'cosine'\n            }\n        }\n        "
2025-08-04 17:39:56,620 - __main__ - INFO - Starting Flask app on 0.0.0.0:5000 (debug=False)
2025-08-04 17:39:56,620 - __main__ - INFO - Neo4j available: True
2025-08-04 17:39:56,621 - __main__ - INFO - Gemini API available: True
2025-08-04 17:39:56,621 - __main__ - INFO - Gemini model: gemini-2.0-flash-exp
2025-08-04 17:39:56,623 - __main__ - INFO - üîÑ Background schema updater ba≈ülatƒ±ldƒ± (5 dakika interval)
2025-08-04 17:39:56,686 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.34.101.131:5000
2025-08-04 17:39:56,687 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-08-04 17:39:58,361 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:39:58] "GET / HTTP/1.1" 200 -
2025-08-04 17:39:58,449 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:39:58] "[36mGET /static/incehesap.jpg HTTP/1.1[0m" 304 -
2025-08-04 17:39:58,981 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:39:58,997 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:39:58] "GET /api/history HTTP/1.1" 200 -
2025-08-04 17:39:59,088 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:39:59,089 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:39:59] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:39:59,123 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:39:59,197 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:39:59,198 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:39:59] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:40:06,215 - __main__ - INFO - Received question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 17:40:06,215 - __main__ - INFO - Generating Cypher for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 17:40:06,259 - __main__ - INFO - Using cached Cypher query
2025-08-04 17:40:06,260 - __main__ - INFO - Generated Cypher: MATCH ()-[r]->() RETURN type(r) AS relationshipType, count(r) AS relationshipCount
2025-08-04 17:40:06,271 - __main__ - INFO - Query results: 2 rows
2025-08-04 17:40:06,272 - __main__ - INFO - Generating answer for question: Veritabanƒ±nda ka√ß adet ili≈üki var?
2025-08-04 17:40:06,314 - __main__ - INFO - Using cached answer
2025-08-04 17:40:06,329 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:40:06] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 17:40:07,974 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:40:08,009 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:40:08,010 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:40:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:40:08,023 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:40:08,068 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:40:08,071 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:40:08] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:40:16,489 - __main__ - INFO - Received question: samsun √ºr√ºnlerine gelen yorumlarƒ± getir
2025-08-04 17:40:16,489 - __main__ - INFO - Generating Cypher for question: samsun √ºr√ºnlerine gelen yorumlarƒ± getir
2025-08-04 17:40:16,528 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 24.1s)
2025-08-04 17:40:16,528 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: samsun √ºr√ºnlerine gelen yorumlarƒ± getir
2025-08-04 17:40:16,569 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 17:40:17,595 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 17:40:17,763 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 17:40:17,765 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 17:40:19,101 - __main__ - INFO - Gemini API call successful
2025-08-04 17:40:19,213 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product {name: 'Samsun √úr√ºn√º'})<-[:REVIEWED]-(r:Review) RETURN p.name AS Product, r.text AS Review
2025-08-04 17:40:19,213 - __main__ - INFO - Generated Cypher: MATCH (p:Product {name: 'Samsun √úr√ºn√º'})<-[:REVIEWED]-(r:Review) RETURN p.name AS Product, r.text AS Review
2025-08-04 17:40:20,243 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownRelationshipTypeWarning} {category: UNRECOGNIZED} {title: The provided relationship type is not in the database.} {description: One of the relationship types in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing relationship type is: REVIEWED)} {position: line: 1, column: 45, offset: 44} for query: "MATCH (p:Product {name: 'Samsun √úr√ºn√º'})<-[:REVIEWED]-(r:Review) RETURN p.name AS Product, r.text AS Review"
2025-08-04 17:40:20,244 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownLabelWarning} {category: UNRECOGNIZED} {title: The provided label is not in the database.} {description: One of the labels in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing label name is: Review)} {position: line: 1, column: 58, offset: 57} for query: "MATCH (p:Product {name: 'Samsun √úr√ºn√º'})<-[:REVIEWED]-(r:Review) RETURN p.name AS Product, r.text AS Review"
2025-08-04 17:40:20,245 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: text)} {position: line: 1, column: 94, offset: 93} for query: "MATCH (p:Product {name: 'Samsun √úr√ºn√º'})<-[:REVIEWED]-(r:Review) RETURN p.name AS Product, r.text AS Review"
2025-08-04 17:40:20,248 - __main__ - INFO - Query results: 0 rows
2025-08-04 17:40:20,250 - __main__ - INFO - Generating answer for question: samsun √ºr√ºnlerine gelen yorumlarƒ± getir
2025-08-04 17:40:23,219 - __main__ - INFO - Gemini API call successful
2025-08-04 17:40:23,400 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 17:40:23,409 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:40:23] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 17:40:27,988 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:40:28,084 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:40:28,086 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:40:28,105 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:40:28,191 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:40:28,193 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:40:28,285 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:40:28,368 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:40:28,370 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:40:28,536 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:40:28,608 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:40:28,610 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:40:28,688 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:40:28,773 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:40:28,775 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:40:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:40:28,987 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:40:29,052 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:40:29,053 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:40:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:40:46,783 - __main__ - INFO - Received question: samsung √ºr√ºnlerinin yorum √∂zelliklerini getir
2025-08-04 17:40:46,783 - __main__ - INFO - Generating Cypher for question: samsung √ºr√ºnlerinin yorum √∂zelliklerini getir
2025-08-04 17:40:46,853 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 54.4s)
2025-08-04 17:40:46,854 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: samsung √ºr√ºnlerinin yorum √∂zelliklerini getir
2025-08-04 17:40:46,896 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 17:40:47,397 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 17:40:47,568 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 17:40:47,568 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 17:40:49,016 - __main__ - INFO - Gemini API call successful
2025-08-04 17:40:49,137 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product {brand: 'Samsung'})-[r:HAS_REVIEW]->(rv:Review) RETURN p.name AS ProductName, rv.comment AS ReviewComment, rv.rating AS ReviewRating
2025-08-04 17:40:49,138 - __main__ - INFO - Generated Cypher: MATCH (p:Product {brand: 'Samsung'})-[r:HAS_REVIEW]->(rv:Review) RETURN p.name AS ProductName, rv.comment AS ReviewComment, rv.rating AS ReviewRating
2025-08-04 17:40:49,351 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownRelationshipTypeWarning} {category: UNRECOGNIZED} {title: The provided relationship type is not in the database.} {description: One of the relationship types in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing relationship type is: HAS_REVIEW)} {position: line: 1, column: 41, offset: 40} for query: "MATCH (p:Product {brand: 'Samsung'})-[r:HAS_REVIEW]->(rv:Review) RETURN p.name AS ProductName, rv.comment AS ReviewComment, rv.rating AS ReviewRating"
2025-08-04 17:40:49,352 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownLabelWarning} {category: UNRECOGNIZED} {title: The provided label is not in the database.} {description: One of the labels in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing label name is: Review)} {position: line: 1, column: 58, offset: 57} for query: "MATCH (p:Product {brand: 'Samsung'})-[r:HAS_REVIEW]->(rv:Review) RETURN p.name AS ProductName, rv.comment AS ReviewComment, rv.rating AS ReviewRating"
2025-08-04 17:40:49,353 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: rating)} {position: line: 1, column: 128, offset: 127} for query: "MATCH (p:Product {brand: 'Samsung'})-[r:HAS_REVIEW]->(rv:Review) RETURN p.name AS ProductName, rv.comment AS ReviewComment, rv.rating AS ReviewRating"
2025-08-04 17:40:49,355 - __main__ - INFO - Query results: 0 rows
2025-08-04 17:40:49,356 - __main__ - INFO - Generating answer for question: samsung √ºr√ºnlerinin yorum √∂zelliklerini getir
2025-08-04 17:40:54,825 - __main__ - INFO - Gemini API call successful
2025-08-04 17:40:54,947 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 17:40:54,959 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:40:54] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 17:40:58,985 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:40:59,050 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:40:59,051 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:40:59] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:41:08,963 - __main__ - INFO - Received question: markasƒ± samsung olan √ºr√ºnleri listele
2025-08-04 17:41:08,964 - __main__ - INFO - Generating Cypher for question: markasƒ± samsung olan √ºr√ºnleri listele
2025-08-04 17:41:09,010 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 76.6s)
2025-08-04 17:41:09,011 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: markasƒ± samsung olan √ºr√ºnleri listele
2025-08-04 17:41:09,014 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:41:09,058 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 17:41:09,157 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:41:09,158 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:41:09] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:41:09,574 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 17:41:09,705 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 17:41:09,706 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 17:41:10,655 - __main__ - INFO - Gemini API call successful
2025-08-04 17:41:10,959 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product {brand: 'Samsung'}) RETURN p
2025-08-04 17:41:10,960 - __main__ - INFO - Generated Cypher: MATCH (p:Product {brand: 'Samsung'}) RETURN p
2025-08-04 17:41:11,006 - __main__ - INFO - Query results: 2 rows
2025-08-04 17:41:11,006 - __main__ - INFO - Generating answer for question: markasƒ± samsung olan √ºr√ºnleri listele
2025-08-04 17:41:20,298 - __main__ - INFO - Gemini API call successful
2025-08-04 17:41:20,399 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 17:41:20,410 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:41:20] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 17:41:27,986 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:41:28,084 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:41:28,088 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:41:28,108 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:41:28,198 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:41:28,202 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:41:28,297 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:41:28,387 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:41:28,388 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:41:28,542 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:41:28,619 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:41:28,621 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:41:28,707 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:41:28,754 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:41:28,755 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:41:28] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:41:28,979 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:41:29,032 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:41:29,033 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:41:29] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:41:43,690 - __main__ - INFO - Received question: markasƒ± samsung olan √ºr√ºnlerin sadece comment √∂zelliklerini listele
2025-08-04 17:41:43,690 - __main__ - INFO - Generating Cypher for question: markasƒ± samsung olan √ºr√ºnlerin sadece comment √∂zelliklerini listele
2025-08-04 17:41:43,750 - __main__ - INFO - üìä Schema cache'den alƒ±ndƒ± (ya≈ü: 111.3s)
2025-08-04 17:41:43,751 - graphrag_pipeline - INFO - Starting GraphRAG pipeline for: markasƒ± samsung olan √ºr√ºnlerin sadece comment √∂zelliklerini listele
2025-08-04 17:41:43,803 - graphrag_pipeline - INFO - Extracted entities: []
2025-08-04 17:41:44,341 - embeddings - ERROR - Semantic search failed: {code: Neo.ClientError.Statement.SyntaxError} {message: Unknown function 'gds.similarity.cosine' (line 4, column 17 (offset: 73))
"        WITH n, gds.similarity.cosine(n.embedding, $query_embedding) AS similarity"
                 ^}
2025-08-04 17:41:44,486 - graphrag_pipeline - INFO - GraphRAG pipeline completed with score: 0.00
2025-08-04 17:41:44,486 - __main__ - INFO - Using GraphRAG enhanced prompt. Context score: 0.00
2025-08-04 17:41:45,774 - __main__ - INFO - Gemini API call successful
2025-08-04 17:41:45,912 - __main__ - INFO - Generated Cypher with GraphRAG: MATCH (p:Product {brand: 'Samsung'})-[r:HAS_COMMENT]->(c:Comment) RETURN c.text AS CommentText
2025-08-04 17:41:45,914 - __main__ - INFO - Generated Cypher: MATCH (p:Product {brand: 'Samsung'})-[r:HAS_COMMENT]->(c:Comment) RETURN c.text AS CommentText
2025-08-04 17:41:46,159 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownRelationshipTypeWarning} {category: UNRECOGNIZED} {title: The provided relationship type is not in the database.} {description: One of the relationship types in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing relationship type is: HAS_COMMENT)} {position: line: 1, column: 41, offset: 40} for query: "MATCH (p:Product {brand: 'Samsung'})-[r:HAS_COMMENT]->(c:Comment) RETURN c.text AS CommentText"
2025-08-04 17:41:46,161 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownLabelWarning} {category: UNRECOGNIZED} {title: The provided label is not in the database.} {description: One of the labels in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing label name is: Comment)} {position: line: 1, column: 58, offset: 57} for query: "MATCH (p:Product {brand: 'Samsung'})-[r:HAS_COMMENT]->(c:Comment) RETURN c.text AS CommentText"
2025-08-04 17:41:46,164 - neo4j.notifications - WARNING - Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: text)} {position: line: 1, column: 76, offset: 75} for query: "MATCH (p:Product {brand: 'Samsung'})-[r:HAS_COMMENT]->(c:Comment) RETURN c.text AS CommentText"
2025-08-04 17:41:46,166 - __main__ - INFO - Query results: 0 rows
2025-08-04 17:41:46,167 - __main__ - INFO - Generating answer for question: markasƒ± samsung olan √ºr√ºnlerin sadece comment √∂zelliklerini listele
2025-08-04 17:41:49,878 - __main__ - INFO - Gemini API call successful
2025-08-04 17:41:50,010 - __main__ - INFO - Successfully generated answer with Gemini
2025-08-04 17:41:50,028 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:41:50] "POST /api/ask HTTP/1.1" 200 -
2025-08-04 17:41:58,984 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:41:59,033 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:41:59,034 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:41:59] "GET /api/health HTTP/1.1" 200 -
2025-08-04 17:42:09,979 - __main__ - INFO - Detecting COMPREHENSIVE live schema from Neo4j...
2025-08-04 17:42:10,014 - __main__ - INFO - COMPREHENSIVE schema detection completed: 3 node types, 2 relationship types, 2 connection patterns
2025-08-04 17:42:10,015 - werkzeug - INFO - 127.0.0.1 - - [04/Aug/2025 17:42:10] "GET /api/health HTTP/1.1" 200 -
